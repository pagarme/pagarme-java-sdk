/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.Map;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetChargeResponse type.
 */
public class GetChargeResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<String> code;
    private OptionalNullable<String> gatewayId;
    private OptionalNullable<Integer> amount;
    private OptionalNullable<String> status;
    private OptionalNullable<String> currency;
    private OptionalNullable<String> paymentMethod;
    private OptionalNullable<LocalDateTime> dueAt;
    private OptionalNullable<LocalDateTime> createdAt;
    private OptionalNullable<LocalDateTime> updatedAt;
    private OptionalNullable<GetTransactionResponse> lastTransaction;
    private OptionalNullable<GetInvoiceResponse> invoice;
    private OptionalNullable<GetOrderResponse> order;
    private OptionalNullable<GetCustomerResponse> customer;
    private OptionalNullable<Map<String, String>> metadata;
    private OptionalNullable<LocalDateTime> paidAt;
    private OptionalNullable<LocalDateTime> canceledAt;
    private OptionalNullable<Integer> canceledAmount;
    private OptionalNullable<Integer> paidAmount;
    private OptionalNullable<Integer> interestAndFinePaid;
    private OptionalNullable<String> recurrencyCycle;

    /**
     * Default constructor.
     */
    public GetChargeResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  code  String value for code.
     * @param  gatewayId  String value for gatewayId.
     * @param  amount  Integer value for amount.
     * @param  status  String value for status.
     * @param  currency  String value for currency.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  dueAt  LocalDateTime value for dueAt.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  lastTransaction  GetTransactionResponse value for lastTransaction.
     * @param  invoice  GetInvoiceResponse value for invoice.
     * @param  order  GetOrderResponse value for order.
     * @param  customer  GetCustomerResponse value for customer.
     * @param  metadata  Map of String, value for metadata.
     * @param  paidAt  LocalDateTime value for paidAt.
     * @param  canceledAt  LocalDateTime value for canceledAt.
     * @param  canceledAmount  Integer value for canceledAmount.
     * @param  paidAmount  Integer value for paidAmount.
     * @param  interestAndFinePaid  Integer value for interestAndFinePaid.
     * @param  recurrencyCycle  String value for recurrencyCycle.
     */
    public GetChargeResponse(
            String id,
            String code,
            String gatewayId,
            Integer amount,
            String status,
            String currency,
            String paymentMethod,
            LocalDateTime dueAt,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            GetTransactionResponse lastTransaction,
            GetInvoiceResponse invoice,
            GetOrderResponse order,
            GetCustomerResponse customer,
            Map<String, String> metadata,
            LocalDateTime paidAt,
            LocalDateTime canceledAt,
            Integer canceledAmount,
            Integer paidAmount,
            Integer interestAndFinePaid,
            String recurrencyCycle) {
        this.id = OptionalNullable.of(id);
        this.code = OptionalNullable.of(code);
        this.gatewayId = OptionalNullable.of(gatewayId);
        this.amount = OptionalNullable.of(amount);
        this.status = OptionalNullable.of(status);
        this.currency = OptionalNullable.of(currency);
        this.paymentMethod = OptionalNullable.of(paymentMethod);
        this.dueAt = OptionalNullable.of(dueAt);
        this.createdAt = OptionalNullable.of(createdAt);
        this.updatedAt = OptionalNullable.of(updatedAt);
        this.lastTransaction = OptionalNullable.of(lastTransaction);
        this.invoice = OptionalNullable.of(invoice);
        this.order = OptionalNullable.of(order);
        this.customer = OptionalNullable.of(customer);
        this.metadata = OptionalNullable.of(metadata);
        this.paidAt = OptionalNullable.of(paidAt);
        this.canceledAt = OptionalNullable.of(canceledAt);
        this.canceledAmount = OptionalNullable.of(canceledAmount);
        this.paidAmount = OptionalNullable.of(paidAmount);
        this.interestAndFinePaid = OptionalNullable.of(interestAndFinePaid);
        this.recurrencyCycle = OptionalNullable.of(recurrencyCycle);
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  code  String value for code.
     * @param  gatewayId  String value for gatewayId.
     * @param  amount  Integer value for amount.
     * @param  status  String value for status.
     * @param  currency  String value for currency.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  dueAt  LocalDateTime value for dueAt.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  lastTransaction  GetTransactionResponse value for lastTransaction.
     * @param  invoice  GetInvoiceResponse value for invoice.
     * @param  order  GetOrderResponse value for order.
     * @param  customer  GetCustomerResponse value for customer.
     * @param  metadata  Map of String, value for metadata.
     * @param  paidAt  LocalDateTime value for paidAt.
     * @param  canceledAt  LocalDateTime value for canceledAt.
     * @param  canceledAmount  Integer value for canceledAmount.
     * @param  paidAmount  Integer value for paidAmount.
     * @param  interestAndFinePaid  Integer value for interestAndFinePaid.
     * @param  recurrencyCycle  String value for recurrencyCycle.
     */

    protected GetChargeResponse(OptionalNullable<String> id, OptionalNullable<String> code,
            OptionalNullable<String> gatewayId, OptionalNullable<Integer> amount,
            OptionalNullable<String> status, OptionalNullable<String> currency,
            OptionalNullable<String> paymentMethod, OptionalNullable<LocalDateTime> dueAt,
            OptionalNullable<LocalDateTime> createdAt, OptionalNullable<LocalDateTime> updatedAt,
            OptionalNullable<GetTransactionResponse> lastTransaction,
            OptionalNullable<GetInvoiceResponse> invoice, OptionalNullable<GetOrderResponse> order,
            OptionalNullable<GetCustomerResponse> customer,
            OptionalNullable<Map<String, String>> metadata, OptionalNullable<LocalDateTime> paidAt,
            OptionalNullable<LocalDateTime> canceledAt, OptionalNullable<Integer> canceledAmount,
            OptionalNullable<Integer> paidAmount, OptionalNullable<Integer> interestAndFinePaid,
            OptionalNullable<String> recurrencyCycle) {
        this.id = id;
        this.code = code;
        this.gatewayId = gatewayId;
        this.amount = amount;
        this.status = status;
        this.currency = currency;
        this.paymentMethod = paymentMethod;
        this.dueAt = dueAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.lastTransaction = lastTransaction;
        this.invoice = invoice;
        this.order = order;
        this.customer = customer;
        this.metadata = metadata;
        this.paidAt = paidAt;
        this.canceledAt = canceledAt;
        this.canceledAmount = canceledAmount;
        this.paidAmount = paidAmount;
        this.interestAndFinePaid = interestAndFinePaid;
        this.recurrencyCycle = recurrencyCycle;
    }

    /**
     * Internal Getter for Id.
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for Code.
     * @return Returns the Internal String
     */
    @JsonGetter("code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCode() {
        return this.code;
    }

    /**
     * Getter for Code.
     * @return Returns the String
     */
    public String getCode() {
        return OptionalNullable.getFrom(code);
    }

    /**
     * Setter for Code.
     * @param code Value for String
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = OptionalNullable.of(code);
    }

    /**
     * UnSetter for Code.
     */
    public void unsetCode() {
        code = null;
    }

    /**
     * Internal Getter for GatewayId.
     * @return Returns the Internal String
     */
    @JsonGetter("gateway_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewayId() {
        return this.gatewayId;
    }

    /**
     * Getter for GatewayId.
     * @return Returns the String
     */
    public String getGatewayId() {
        return OptionalNullable.getFrom(gatewayId);
    }

    /**
     * Setter for GatewayId.
     * @param gatewayId Value for String
     */
    @JsonSetter("gateway_id")
    public void setGatewayId(String gatewayId) {
        this.gatewayId = OptionalNullable.of(gatewayId);
    }

    /**
     * UnSetter for GatewayId.
     */
    public void unsetGatewayId() {
        gatewayId = null;
    }

    /**
     * Internal Getter for Amount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Internal Getter for Status.
     * @return Returns the Internal String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for Currency.
     * @return Returns the Internal String
     */
    @JsonGetter("currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrency() {
        return this.currency;
    }

    /**
     * Getter for Currency.
     * @return Returns the String
     */
    public String getCurrency() {
        return OptionalNullable.getFrom(currency);
    }

    /**
     * Setter for Currency.
     * @param currency Value for String
     */
    @JsonSetter("currency")
    public void setCurrency(String currency) {
        this.currency = OptionalNullable.of(currency);
    }

    /**
     * UnSetter for Currency.
     */
    public void unsetCurrency() {
        currency = null;
    }

    /**
     * Internal Getter for PaymentMethod.
     * @return Returns the Internal String
     */
    @JsonGetter("payment_method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Getter for PaymentMethod.
     * @return Returns the String
     */
    public String getPaymentMethod() {
        return OptionalNullable.getFrom(paymentMethod);
    }

    /**
     * Setter for PaymentMethod.
     * @param paymentMethod Value for String
     */
    @JsonSetter("payment_method")
    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = OptionalNullable.of(paymentMethod);
    }

    /**
     * UnSetter for PaymentMethod.
     */
    public void unsetPaymentMethod() {
        paymentMethod = null;
    }

    /**
     * Internal Getter for DueAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("due_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetDueAt() {
        return this.dueAt;
    }

    /**
     * Getter for DueAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getDueAt() {
        return OptionalNullable.getFrom(dueAt);
    }

    /**
     * Setter for DueAt.
     * @param dueAt Value for LocalDateTime
     */
    @JsonSetter("due_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDueAt(LocalDateTime dueAt) {
        this.dueAt = OptionalNullable.of(dueAt);
    }

    /**
     * UnSetter for DueAt.
     */
    public void unsetDueAt() {
        dueAt = null;
    }

    /**
     * Internal Getter for CreatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCreatedAt() {
        return OptionalNullable.getFrom(createdAt);
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = OptionalNullable.of(createdAt);
    }

    /**
     * UnSetter for CreatedAt.
     */
    public void unsetCreatedAt() {
        createdAt = null;
    }

    /**
     * Internal Getter for UpdatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getUpdatedAt() {
        return OptionalNullable.getFrom(updatedAt);
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = OptionalNullable.of(updatedAt);
    }

    /**
     * UnSetter for UpdatedAt.
     */
    public void unsetUpdatedAt() {
        updatedAt = null;
    }

    /**
     * Internal Getter for LastTransaction.
     * @return Returns the Internal GetTransactionResponse
     */
    @JsonGetter("last_transaction")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetTransactionResponse> internalGetLastTransaction() {
        return this.lastTransaction;
    }

    /**
     * Getter for LastTransaction.
     * @return Returns the GetTransactionResponse
     */
    public GetTransactionResponse getLastTransaction() {
        return OptionalNullable.getFrom(lastTransaction);
    }

    /**
     * Setter for LastTransaction.
     * @param lastTransaction Value for GetTransactionResponse
     */
    @JsonSetter("last_transaction")
    public void setLastTransaction(GetTransactionResponse lastTransaction) {
        this.lastTransaction = OptionalNullable.of(lastTransaction);
    }

    /**
     * UnSetter for LastTransaction.
     */
    public void unsetLastTransaction() {
        lastTransaction = null;
    }

    /**
     * Internal Getter for Invoice.
     * @return Returns the Internal GetInvoiceResponse
     */
    @JsonGetter("invoice")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetInvoiceResponse> internalGetInvoice() {
        return this.invoice;
    }

    /**
     * Getter for Invoice.
     * @return Returns the GetInvoiceResponse
     */
    public GetInvoiceResponse getInvoice() {
        return OptionalNullable.getFrom(invoice);
    }

    /**
     * Setter for Invoice.
     * @param invoice Value for GetInvoiceResponse
     */
    @JsonSetter("invoice")
    public void setInvoice(GetInvoiceResponse invoice) {
        this.invoice = OptionalNullable.of(invoice);
    }

    /**
     * UnSetter for Invoice.
     */
    public void unsetInvoice() {
        invoice = null;
    }

    /**
     * Internal Getter for Order.
     * @return Returns the Internal GetOrderResponse
     */
    @JsonGetter("order")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetOrderResponse> internalGetOrder() {
        return this.order;
    }

    /**
     * Getter for Order.
     * @return Returns the GetOrderResponse
     */
    public GetOrderResponse getOrder() {
        return OptionalNullable.getFrom(order);
    }

    /**
     * Setter for Order.
     * @param order Value for GetOrderResponse
     */
    @JsonSetter("order")
    public void setOrder(GetOrderResponse order) {
        this.order = OptionalNullable.of(order);
    }

    /**
     * UnSetter for Order.
     */
    public void unsetOrder() {
        order = null;
    }

    /**
     * Internal Getter for Customer.
     * @return Returns the Internal GetCustomerResponse
     */
    @JsonGetter("customer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCustomerResponse> internalGetCustomer() {
        return this.customer;
    }

    /**
     * Getter for Customer.
     * @return Returns the GetCustomerResponse
     */
    public GetCustomerResponse getCustomer() {
        return OptionalNullable.getFrom(customer);
    }

    /**
     * Setter for Customer.
     * @param customer Value for GetCustomerResponse
     */
    @JsonSetter("customer")
    public void setCustomer(GetCustomerResponse customer) {
        this.customer = OptionalNullable.of(customer);
    }

    /**
     * UnSetter for Customer.
     */
    public void unsetCustomer() {
        customer = null;
    }

    /**
     * Internal Getter for Metadata.
     * @return Returns the Internal Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Map<String, String>> internalGetMetadata() {
        return this.metadata;
    }

    /**
     * Getter for Metadata.
     * @return Returns the Map of String, String
     */
    public Map<String, String> getMetadata() {
        return OptionalNullable.getFrom(metadata);
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = OptionalNullable.of(metadata);
    }

    /**
     * UnSetter for Metadata.
     */
    public void unsetMetadata() {
        metadata = null;
    }

    /**
     * Internal Getter for PaidAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("paid_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetPaidAt() {
        return this.paidAt;
    }

    /**
     * Getter for PaidAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getPaidAt() {
        return OptionalNullable.getFrom(paidAt);
    }

    /**
     * Setter for PaidAt.
     * @param paidAt Value for LocalDateTime
     */
    @JsonSetter("paid_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setPaidAt(LocalDateTime paidAt) {
        this.paidAt = OptionalNullable.of(paidAt);
    }

    /**
     * UnSetter for PaidAt.
     */
    public void unsetPaidAt() {
        paidAt = null;
    }

    /**
     * Internal Getter for CanceledAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("canceled_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCanceledAt() {
        return this.canceledAt;
    }

    /**
     * Getter for CanceledAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCanceledAt() {
        return OptionalNullable.getFrom(canceledAt);
    }

    /**
     * Setter for CanceledAt.
     * @param canceledAt Value for LocalDateTime
     */
    @JsonSetter("canceled_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCanceledAt(LocalDateTime canceledAt) {
        this.canceledAt = OptionalNullable.of(canceledAt);
    }

    /**
     * UnSetter for CanceledAt.
     */
    public void unsetCanceledAt() {
        canceledAt = null;
    }

    /**
     * Internal Getter for CanceledAmount.
     * Canceled Amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("canceled_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCanceledAmount() {
        return this.canceledAmount;
    }

    /**
     * Getter for CanceledAmount.
     * Canceled Amount
     * @return Returns the Integer
     */
    public Integer getCanceledAmount() {
        return OptionalNullable.getFrom(canceledAmount);
    }

    /**
     * Setter for CanceledAmount.
     * Canceled Amount
     * @param canceledAmount Value for Integer
     */
    @JsonSetter("canceled_amount")
    public void setCanceledAmount(Integer canceledAmount) {
        this.canceledAmount = OptionalNullable.of(canceledAmount);
    }

    /**
     * UnSetter for CanceledAmount.
     * Canceled Amount
     */
    public void unsetCanceledAmount() {
        canceledAmount = null;
    }

    /**
     * Internal Getter for PaidAmount.
     * Paid amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("paid_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPaidAmount() {
        return this.paidAmount;
    }

    /**
     * Getter for PaidAmount.
     * Paid amount
     * @return Returns the Integer
     */
    public Integer getPaidAmount() {
        return OptionalNullable.getFrom(paidAmount);
    }

    /**
     * Setter for PaidAmount.
     * Paid amount
     * @param paidAmount Value for Integer
     */
    @JsonSetter("paid_amount")
    public void setPaidAmount(Integer paidAmount) {
        this.paidAmount = OptionalNullable.of(paidAmount);
    }

    /**
     * UnSetter for PaidAmount.
     * Paid amount
     */
    public void unsetPaidAmount() {
        paidAmount = null;
    }

    /**
     * Internal Getter for InterestAndFinePaid.
     * interest and fine paid
     * @return Returns the Internal Integer
     */
    @JsonGetter("interest_and_fine_paid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInterestAndFinePaid() {
        return this.interestAndFinePaid;
    }

    /**
     * Getter for InterestAndFinePaid.
     * interest and fine paid
     * @return Returns the Integer
     */
    public Integer getInterestAndFinePaid() {
        return OptionalNullable.getFrom(interestAndFinePaid);
    }

    /**
     * Setter for InterestAndFinePaid.
     * interest and fine paid
     * @param interestAndFinePaid Value for Integer
     */
    @JsonSetter("interest_and_fine_paid")
    public void setInterestAndFinePaid(Integer interestAndFinePaid) {
        this.interestAndFinePaid = OptionalNullable.of(interestAndFinePaid);
    }

    /**
     * UnSetter for InterestAndFinePaid.
     * interest and fine paid
     */
    public void unsetInterestAndFinePaid() {
        interestAndFinePaid = null;
    }

    /**
     * Internal Getter for RecurrencyCycle.
     * Defines whether the card has been used one or more times.
     * @return Returns the Internal String
     */
    @JsonGetter("recurrency_cycle")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRecurrencyCycle() {
        return this.recurrencyCycle;
    }

    /**
     * Getter for RecurrencyCycle.
     * Defines whether the card has been used one or more times.
     * @return Returns the String
     */
    public String getRecurrencyCycle() {
        return OptionalNullable.getFrom(recurrencyCycle);
    }

    /**
     * Setter for RecurrencyCycle.
     * Defines whether the card has been used one or more times.
     * @param recurrencyCycle Value for String
     */
    @JsonSetter("recurrency_cycle")
    public void setRecurrencyCycle(String recurrencyCycle) {
        this.recurrencyCycle = OptionalNullable.of(recurrencyCycle);
    }

    /**
     * UnSetter for RecurrencyCycle.
     * Defines whether the card has been used one or more times.
     */
    public void unsetRecurrencyCycle() {
        recurrencyCycle = null;
    }

    /**
     * Converts this GetChargeResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetChargeResponse [" + "id=" + id + ", code=" + code + ", gatewayId=" + gatewayId
                + ", amount=" + amount + ", status=" + status + ", currency=" + currency
                + ", paymentMethod=" + paymentMethod + ", dueAt=" + dueAt + ", createdAt="
                + createdAt + ", updatedAt=" + updatedAt + ", lastTransaction=" + lastTransaction
                + ", invoice=" + invoice + ", order=" + order + ", customer=" + customer
                + ", metadata=" + metadata + ", paidAt=" + paidAt + ", canceledAt=" + canceledAt
                + ", canceledAmount=" + canceledAmount + ", paidAmount=" + paidAmount
                + ", interestAndFinePaid=" + interestAndFinePaid + ", recurrencyCycle="
                + recurrencyCycle + "]";
    }

    /**
     * Builds a new {@link GetChargeResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetChargeResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.code = internalGetCode();
        builder.gatewayId = internalGetGatewayId();
        builder.amount = internalGetAmount();
        builder.status = internalGetStatus();
        builder.currency = internalGetCurrency();
        builder.paymentMethod = internalGetPaymentMethod();
        builder.dueAt = internalGetDueAt();
        builder.createdAt = internalGetCreatedAt();
        builder.updatedAt = internalGetUpdatedAt();
        builder.lastTransaction = internalGetLastTransaction();
        builder.invoice = internalGetInvoice();
        builder.order = internalGetOrder();
        builder.customer = internalGetCustomer();
        builder.metadata = internalGetMetadata();
        builder.paidAt = internalGetPaidAt();
        builder.canceledAt = internalGetCanceledAt();
        builder.canceledAmount = internalGetCanceledAmount();
        builder.paidAmount = internalGetPaidAmount();
        builder.interestAndFinePaid = internalGetInterestAndFinePaid();
        builder.recurrencyCycle = internalGetRecurrencyCycle();
        return builder;
    }

    /**
     * Class to build instances of {@link GetChargeResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<String> code;
        private OptionalNullable<String> gatewayId;
        private OptionalNullable<Integer> amount;
        private OptionalNullable<String> status;
        private OptionalNullable<String> currency;
        private OptionalNullable<String> paymentMethod;
        private OptionalNullable<LocalDateTime> dueAt;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<LocalDateTime> updatedAt;
        private OptionalNullable<GetTransactionResponse> lastTransaction;
        private OptionalNullable<GetInvoiceResponse> invoice;
        private OptionalNullable<GetOrderResponse> order;
        private OptionalNullable<GetCustomerResponse> customer;
        private OptionalNullable<Map<String, String>> metadata;
        private OptionalNullable<LocalDateTime> paidAt;
        private OptionalNullable<LocalDateTime> canceledAt;
        private OptionalNullable<Integer> canceledAmount;
        private OptionalNullable<Integer> paidAmount;
        private OptionalNullable<Integer> interestAndFinePaid;
        private OptionalNullable<String> recurrencyCycle;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for code.
         * @param  code  String value for code.
         * @return Builder
         */
        public Builder code(String code) {
            this.code = OptionalNullable.of(code);
            return this;
        }

        /**
         * UnSetter for code.
         * @return Builder
         */
        public Builder unsetCode() {
            code = null;
            return this;
        }

        /**
         * Setter for gatewayId.
         * @param  gatewayId  String value for gatewayId.
         * @return Builder
         */
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = OptionalNullable.of(gatewayId);
            return this;
        }

        /**
         * UnSetter for gatewayId.
         * @return Builder
         */
        public Builder unsetGatewayId() {
            gatewayId = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = OptionalNullable.of(currency);
            return this;
        }

        /**
         * UnSetter for currency.
         * @return Builder
         */
        public Builder unsetCurrency() {
            currency = null;
            return this;
        }

        /**
         * Setter for paymentMethod.
         * @param  paymentMethod  String value for paymentMethod.
         * @return Builder
         */
        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = OptionalNullable.of(paymentMethod);
            return this;
        }

        /**
         * UnSetter for paymentMethod.
         * @return Builder
         */
        public Builder unsetPaymentMethod() {
            paymentMethod = null;
            return this;
        }

        /**
         * Setter for dueAt.
         * @param  dueAt  LocalDateTime value for dueAt.
         * @return Builder
         */
        public Builder dueAt(LocalDateTime dueAt) {
            this.dueAt = OptionalNullable.of(dueAt);
            return this;
        }

        /**
         * UnSetter for dueAt.
         * @return Builder
         */
        public Builder unsetDueAt() {
            dueAt = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = OptionalNullable.of(updatedAt);
            return this;
        }

        /**
         * UnSetter for updatedAt.
         * @return Builder
         */
        public Builder unsetUpdatedAt() {
            updatedAt = null;
            return this;
        }

        /**
         * Setter for lastTransaction.
         * @param  lastTransaction  GetTransactionResponse value for lastTransaction.
         * @return Builder
         */
        public Builder lastTransaction(GetTransactionResponse lastTransaction) {
            this.lastTransaction = OptionalNullable.of(lastTransaction);
            return this;
        }

        /**
         * UnSetter for lastTransaction.
         * @return Builder
         */
        public Builder unsetLastTransaction() {
            lastTransaction = null;
            return this;
        }

        /**
         * Setter for invoice.
         * @param  invoice  GetInvoiceResponse value for invoice.
         * @return Builder
         */
        public Builder invoice(GetInvoiceResponse invoice) {
            this.invoice = OptionalNullable.of(invoice);
            return this;
        }

        /**
         * UnSetter for invoice.
         * @return Builder
         */
        public Builder unsetInvoice() {
            invoice = null;
            return this;
        }

        /**
         * Setter for order.
         * @param  order  GetOrderResponse value for order.
         * @return Builder
         */
        public Builder order(GetOrderResponse order) {
            this.order = OptionalNullable.of(order);
            return this;
        }

        /**
         * UnSetter for order.
         * @return Builder
         */
        public Builder unsetOrder() {
            order = null;
            return this;
        }

        /**
         * Setter for customer.
         * @param  customer  GetCustomerResponse value for customer.
         * @return Builder
         */
        public Builder customer(GetCustomerResponse customer) {
            this.customer = OptionalNullable.of(customer);
            return this;
        }

        /**
         * UnSetter for customer.
         * @return Builder
         */
        public Builder unsetCustomer() {
            customer = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = OptionalNullable.of(metadata);
            return this;
        }

        /**
         * UnSetter for metadata.
         * @return Builder
         */
        public Builder unsetMetadata() {
            metadata = null;
            return this;
        }

        /**
         * Setter for paidAt.
         * @param  paidAt  LocalDateTime value for paidAt.
         * @return Builder
         */
        public Builder paidAt(LocalDateTime paidAt) {
            this.paidAt = OptionalNullable.of(paidAt);
            return this;
        }

        /**
         * UnSetter for paidAt.
         * @return Builder
         */
        public Builder unsetPaidAt() {
            paidAt = null;
            return this;
        }

        /**
         * Setter for canceledAt.
         * @param  canceledAt  LocalDateTime value for canceledAt.
         * @return Builder
         */
        public Builder canceledAt(LocalDateTime canceledAt) {
            this.canceledAt = OptionalNullable.of(canceledAt);
            return this;
        }

        /**
         * UnSetter for canceledAt.
         * @return Builder
         */
        public Builder unsetCanceledAt() {
            canceledAt = null;
            return this;
        }

        /**
         * Setter for canceledAmount.
         * @param  canceledAmount  Integer value for canceledAmount.
         * @return Builder
         */
        public Builder canceledAmount(Integer canceledAmount) {
            this.canceledAmount = OptionalNullable.of(canceledAmount);
            return this;
        }

        /**
         * UnSetter for canceledAmount.
         * @return Builder
         */
        public Builder unsetCanceledAmount() {
            canceledAmount = null;
            return this;
        }

        /**
         * Setter for paidAmount.
         * @param  paidAmount  Integer value for paidAmount.
         * @return Builder
         */
        public Builder paidAmount(Integer paidAmount) {
            this.paidAmount = OptionalNullable.of(paidAmount);
            return this;
        }

        /**
         * UnSetter for paidAmount.
         * @return Builder
         */
        public Builder unsetPaidAmount() {
            paidAmount = null;
            return this;
        }

        /**
         * Setter for interestAndFinePaid.
         * @param  interestAndFinePaid  Integer value for interestAndFinePaid.
         * @return Builder
         */
        public Builder interestAndFinePaid(Integer interestAndFinePaid) {
            this.interestAndFinePaid = OptionalNullable.of(interestAndFinePaid);
            return this;
        }

        /**
         * UnSetter for interestAndFinePaid.
         * @return Builder
         */
        public Builder unsetInterestAndFinePaid() {
            interestAndFinePaid = null;
            return this;
        }

        /**
         * Setter for recurrencyCycle.
         * @param  recurrencyCycle  String value for recurrencyCycle.
         * @return Builder
         */
        public Builder recurrencyCycle(String recurrencyCycle) {
            this.recurrencyCycle = OptionalNullable.of(recurrencyCycle);
            return this;
        }

        /**
         * UnSetter for recurrencyCycle.
         * @return Builder
         */
        public Builder unsetRecurrencyCycle() {
            recurrencyCycle = null;
            return this;
        }

        /**
         * Builds a new {@link GetChargeResponse} object using the set fields.
         * @return {@link GetChargeResponse}
         */
        public GetChargeResponse build() {
            return new GetChargeResponse(id, code, gatewayId, amount, status, currency,
                    paymentMethod, dueAt, createdAt, updatedAt, lastTransaction, invoice, order,
                    customer, metadata, paidAt, canceledAt, canceledAmount, paidAmount,
                    interestAndFinePaid, recurrencyCycle);
        }
    }
}
