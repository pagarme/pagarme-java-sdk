/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetWithdrawResponse type.
 */
public class GetWithdrawResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<String> gatewayId;
    private OptionalNullable<Integer> amount;
    private OptionalNullable<String> status;
    private OptionalNullable<LocalDateTime> createdAt;
    private OptionalNullable<LocalDateTime> updatedAt;
    private OptionalNullable<List<String>> metadata;
    private OptionalNullable<Integer> fee;
    private OptionalNullable<LocalDateTime> fundingDate;
    private OptionalNullable<LocalDateTime> fundingEstimatedDate;
    private OptionalNullable<String> type;
    private OptionalNullable<GetWithdrawSourceResponse> source;
    private OptionalNullable<GetWithdrawTargetResponse> target;

    /**
     * Default constructor.
     */
    public GetWithdrawResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  gatewayId  String value for gatewayId.
     * @param  amount  Integer value for amount.
     * @param  status  String value for status.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  metadata  List of String value for metadata.
     * @param  fee  Integer value for fee.
     * @param  fundingDate  LocalDateTime value for fundingDate.
     * @param  fundingEstimatedDate  LocalDateTime value for fundingEstimatedDate.
     * @param  type  String value for type.
     * @param  source  GetWithdrawSourceResponse value for source.
     * @param  target  GetWithdrawTargetResponse value for target.
     */
    public GetWithdrawResponse(
            String id,
            String gatewayId,
            Integer amount,
            String status,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            List<String> metadata,
            Integer fee,
            LocalDateTime fundingDate,
            LocalDateTime fundingEstimatedDate,
            String type,
            GetWithdrawSourceResponse source,
            GetWithdrawTargetResponse target) {
        this.id = OptionalNullable.of(id);
        this.gatewayId = OptionalNullable.of(gatewayId);
        this.amount = OptionalNullable.of(amount);
        this.status = OptionalNullable.of(status);
        this.createdAt = OptionalNullable.of(createdAt);
        this.updatedAt = OptionalNullable.of(updatedAt);
        this.metadata = OptionalNullable.of(metadata);
        this.fee = OptionalNullable.of(fee);
        this.fundingDate = OptionalNullable.of(fundingDate);
        this.fundingEstimatedDate = OptionalNullable.of(fundingEstimatedDate);
        this.type = OptionalNullable.of(type);
        this.source = OptionalNullable.of(source);
        this.target = OptionalNullable.of(target);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetWithdrawResponse(OptionalNullable<String> id, OptionalNullable<String> gatewayId,
            OptionalNullable<Integer> amount, OptionalNullable<String> status,
            OptionalNullable<LocalDateTime> createdAt, OptionalNullable<LocalDateTime> updatedAt,
            OptionalNullable<List<String>> metadata, OptionalNullable<Integer> fee,
            OptionalNullable<LocalDateTime> fundingDate,
            OptionalNullable<LocalDateTime> fundingEstimatedDate, OptionalNullable<String> type,
            OptionalNullable<GetWithdrawSourceResponse> source,
            OptionalNullable<GetWithdrawTargetResponse> target) {
        this.id = id;
        this.gatewayId = gatewayId;
        this.amount = amount;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.metadata = metadata;
        this.fee = fee;
        this.fundingDate = fundingDate;
        this.fundingEstimatedDate = fundingEstimatedDate;
        this.type = type;
        this.source = source;
        this.target = target;
    }

    /**
     * Internal Getter for Id.
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for GatewayId.
     * @return Returns the Internal String
     */
    @JsonGetter("gateway_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewayId() {
        return this.gatewayId;
    }

    /**
     * Getter for GatewayId.
     * @return Returns the String
     */
    public String getGatewayId() {
        return OptionalNullable.getFrom(gatewayId);
    }

    /**
     * Setter for GatewayId.
     * @param gatewayId Value for String
     */
    @JsonSetter("gateway_id")
    public void setGatewayId(String gatewayId) {
        this.gatewayId = OptionalNullable.of(gatewayId);
    }

    /**
     * UnSetter for GatewayId.
     */
    public void unsetGatewayId() {
        gatewayId = null;
    }

    /**
     * Internal Getter for Amount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Internal Getter for Status.
     * @return Returns the Internal String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for CreatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCreatedAt() {
        return OptionalNullable.getFrom(createdAt);
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = OptionalNullable.of(createdAt);
    }

    /**
     * UnSetter for CreatedAt.
     */
    public void unsetCreatedAt() {
        createdAt = null;
    }

    /**
     * Internal Getter for UpdatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getUpdatedAt() {
        return OptionalNullable.getFrom(updatedAt);
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = OptionalNullable.of(updatedAt);
    }

    /**
     * UnSetter for UpdatedAt.
     */
    public void unsetUpdatedAt() {
        updatedAt = null;
    }

    /**
     * Internal Getter for Metadata.
     * @return Returns the Internal List of String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetMetadata() {
        return this.metadata;
    }

    /**
     * Getter for Metadata.
     * @return Returns the List of String
     */
    public List<String> getMetadata() {
        return OptionalNullable.getFrom(metadata);
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for List of String
     */
    @JsonSetter("metadata")
    public void setMetadata(List<String> metadata) {
        this.metadata = OptionalNullable.of(metadata);
    }

    /**
     * UnSetter for Metadata.
     */
    public void unsetMetadata() {
        metadata = null;
    }

    /**
     * Internal Getter for Fee.
     * @return Returns the Internal Integer
     */
    @JsonGetter("fee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFee() {
        return this.fee;
    }

    /**
     * Getter for Fee.
     * @return Returns the Integer
     */
    public Integer getFee() {
        return OptionalNullable.getFrom(fee);
    }

    /**
     * Setter for Fee.
     * @param fee Value for Integer
     */
    @JsonSetter("fee")
    public void setFee(Integer fee) {
        this.fee = OptionalNullable.of(fee);
    }

    /**
     * UnSetter for Fee.
     */
    public void unsetFee() {
        fee = null;
    }

    /**
     * Internal Getter for FundingDate.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("funding_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetFundingDate() {
        return this.fundingDate;
    }

    /**
     * Getter for FundingDate.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getFundingDate() {
        return OptionalNullable.getFrom(fundingDate);
    }

    /**
     * Setter for FundingDate.
     * @param fundingDate Value for LocalDateTime
     */
    @JsonSetter("funding_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setFundingDate(LocalDateTime fundingDate) {
        this.fundingDate = OptionalNullable.of(fundingDate);
    }

    /**
     * UnSetter for FundingDate.
     */
    public void unsetFundingDate() {
        fundingDate = null;
    }

    /**
     * Internal Getter for FundingEstimatedDate.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("funding_estimated_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetFundingEstimatedDate() {
        return this.fundingEstimatedDate;
    }

    /**
     * Getter for FundingEstimatedDate.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getFundingEstimatedDate() {
        return OptionalNullable.getFrom(fundingEstimatedDate);
    }

    /**
     * Setter for FundingEstimatedDate.
     * @param fundingEstimatedDate Value for LocalDateTime
     */
    @JsonSetter("funding_estimated_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setFundingEstimatedDate(LocalDateTime fundingEstimatedDate) {
        this.fundingEstimatedDate = OptionalNullable.of(fundingEstimatedDate);
    }

    /**
     * UnSetter for FundingEstimatedDate.
     */
    public void unsetFundingEstimatedDate() {
        fundingEstimatedDate = null;
    }

    /**
     * Internal Getter for Type.
     * @return Returns the Internal String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Internal Getter for Source.
     * @return Returns the Internal GetWithdrawSourceResponse
     */
    @JsonGetter("source")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetWithdrawSourceResponse> internalGetSource() {
        return this.source;
    }

    /**
     * Getter for Source.
     * @return Returns the GetWithdrawSourceResponse
     */
    public GetWithdrawSourceResponse getSource() {
        return OptionalNullable.getFrom(source);
    }

    /**
     * Setter for Source.
     * @param source Value for GetWithdrawSourceResponse
     */
    @JsonSetter("source")
    public void setSource(GetWithdrawSourceResponse source) {
        this.source = OptionalNullable.of(source);
    }

    /**
     * UnSetter for Source.
     */
    public void unsetSource() {
        source = null;
    }

    /**
     * Internal Getter for Target.
     * @return Returns the Internal GetWithdrawTargetResponse
     */
    @JsonGetter("target")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetWithdrawTargetResponse> internalGetTarget() {
        return this.target;
    }

    /**
     * Getter for Target.
     * @return Returns the GetWithdrawTargetResponse
     */
    public GetWithdrawTargetResponse getTarget() {
        return OptionalNullable.getFrom(target);
    }

    /**
     * Setter for Target.
     * @param target Value for GetWithdrawTargetResponse
     */
    @JsonSetter("target")
    public void setTarget(GetWithdrawTargetResponse target) {
        this.target = OptionalNullable.of(target);
    }

    /**
     * UnSetter for Target.
     */
    public void unsetTarget() {
        target = null;
    }

    /**
     * Converts this GetWithdrawResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetWithdrawResponse [" + "id=" + id + ", gatewayId=" + gatewayId + ", amount="
                + amount + ", status=" + status + ", createdAt=" + createdAt + ", updatedAt="
                + updatedAt + ", metadata=" + metadata + ", fee=" + fee + ", fundingDate="
                + fundingDate + ", fundingEstimatedDate=" + fundingEstimatedDate + ", type=" + type
                + ", source=" + source + ", target=" + target + "]";
    }

    /**
     * Builds a new {@link GetWithdrawResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetWithdrawResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.gatewayId = internalGetGatewayId();
        builder.amount = internalGetAmount();
        builder.status = internalGetStatus();
        builder.createdAt = internalGetCreatedAt();
        builder.updatedAt = internalGetUpdatedAt();
        builder.metadata = internalGetMetadata();
        builder.fee = internalGetFee();
        builder.fundingDate = internalGetFundingDate();
        builder.fundingEstimatedDate = internalGetFundingEstimatedDate();
        builder.type = internalGetType();
        builder.source = internalGetSource();
        builder.target = internalGetTarget();
        return builder;
    }

    /**
     * Class to build instances of {@link GetWithdrawResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<String> gatewayId;
        private OptionalNullable<Integer> amount;
        private OptionalNullable<String> status;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<LocalDateTime> updatedAt;
        private OptionalNullable<List<String>> metadata;
        private OptionalNullable<Integer> fee;
        private OptionalNullable<LocalDateTime> fundingDate;
        private OptionalNullable<LocalDateTime> fundingEstimatedDate;
        private OptionalNullable<String> type;
        private OptionalNullable<GetWithdrawSourceResponse> source;
        private OptionalNullable<GetWithdrawTargetResponse> target;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for gatewayId.
         * @param  gatewayId  String value for gatewayId.
         * @return Builder
         */
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = OptionalNullable.of(gatewayId);
            return this;
        }

        /**
         * UnSetter for gatewayId.
         * @return Builder
         */
        public Builder unsetGatewayId() {
            gatewayId = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = OptionalNullable.of(updatedAt);
            return this;
        }

        /**
         * UnSetter for updatedAt.
         * @return Builder
         */
        public Builder unsetUpdatedAt() {
            updatedAt = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  List of String value for metadata.
         * @return Builder
         */
        public Builder metadata(List<String> metadata) {
            this.metadata = OptionalNullable.of(metadata);
            return this;
        }

        /**
         * UnSetter for metadata.
         * @return Builder
         */
        public Builder unsetMetadata() {
            metadata = null;
            return this;
        }

        /**
         * Setter for fee.
         * @param  fee  Integer value for fee.
         * @return Builder
         */
        public Builder fee(Integer fee) {
            this.fee = OptionalNullable.of(fee);
            return this;
        }

        /**
         * UnSetter for fee.
         * @return Builder
         */
        public Builder unsetFee() {
            fee = null;
            return this;
        }

        /**
         * Setter for fundingDate.
         * @param  fundingDate  LocalDateTime value for fundingDate.
         * @return Builder
         */
        public Builder fundingDate(LocalDateTime fundingDate) {
            this.fundingDate = OptionalNullable.of(fundingDate);
            return this;
        }

        /**
         * UnSetter for fundingDate.
         * @return Builder
         */
        public Builder unsetFundingDate() {
            fundingDate = null;
            return this;
        }

        /**
         * Setter for fundingEstimatedDate.
         * @param  fundingEstimatedDate  LocalDateTime value for fundingEstimatedDate.
         * @return Builder
         */
        public Builder fundingEstimatedDate(LocalDateTime fundingEstimatedDate) {
            this.fundingEstimatedDate = OptionalNullable.of(fundingEstimatedDate);
            return this;
        }

        /**
         * UnSetter for fundingEstimatedDate.
         * @return Builder
         */
        public Builder unsetFundingEstimatedDate() {
            fundingEstimatedDate = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for source.
         * @param  source  GetWithdrawSourceResponse value for source.
         * @return Builder
         */
        public Builder source(GetWithdrawSourceResponse source) {
            this.source = OptionalNullable.of(source);
            return this;
        }

        /**
         * UnSetter for source.
         * @return Builder
         */
        public Builder unsetSource() {
            source = null;
            return this;
        }

        /**
         * Setter for target.
         * @param  target  GetWithdrawTargetResponse value for target.
         * @return Builder
         */
        public Builder target(GetWithdrawTargetResponse target) {
            this.target = OptionalNullable.of(target);
            return this;
        }

        /**
         * UnSetter for target.
         * @return Builder
         */
        public Builder unsetTarget() {
            target = null;
            return this;
        }

        /**
         * Builds a new {@link GetWithdrawResponse} object using the set fields.
         * @return {@link GetWithdrawResponse}
         */
        public GetWithdrawResponse build() {
            return new GetWithdrawResponse(id, gatewayId, amount, status, createdAt, updatedAt,
                    metadata, fee, fundingDate, fundingEstimatedDate, type, source, target);
        }
    }
}
