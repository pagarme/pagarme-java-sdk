/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for GetFineResponse type.
 */
public class GetFineResponse {
    private OptionalNullable<Integer> days;
    private OptionalNullable<String> type;
    private OptionalNullable<Integer> amount;

    /**
     * Default constructor.
     */
    public GetFineResponse() {
    }

    /**
     * Initialization constructor.
     * @param  days  Integer value for days.
     * @param  type  String value for type.
     * @param  amount  Integer value for amount.
     */
    public GetFineResponse(
            Integer days,
            String type,
            Integer amount) {
        this.days = OptionalNullable.of(days);
        this.type = OptionalNullable.of(type);
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * Initialization constructor.
     * @param  days  Integer value for days.
     * @param  type  String value for type.
     * @param  amount  Integer value for amount.
     */

    protected GetFineResponse(OptionalNullable<Integer> days, OptionalNullable<String> type,
            OptionalNullable<Integer> amount) {
        this.days = days;
        this.type = type;
        this.amount = amount;
    }

    /**
     * Internal Getter for Days.
     * Days
     * @return Returns the Internal Integer
     */
    @JsonGetter("days")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDays() {
        return this.days;
    }

    /**
     * Getter for Days.
     * Days
     * @return Returns the Integer
     */
    public Integer getDays() {
        return OptionalNullable.getFrom(days);
    }

    /**
     * Setter for Days.
     * Days
     * @param days Value for Integer
     */
    @JsonSetter("days")
    public void setDays(Integer days) {
        this.days = OptionalNullable.of(days);
    }

    /**
     * UnSetter for Days.
     * Days
     */
    public void unsetDays() {
        days = null;
    }

    /**
     * Internal Getter for Type.
     * Type
     * @return Returns the Internal String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * Type
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * Type
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * Type
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Internal Getter for Amount.
     * Amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * Amount
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * Amount
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     * Amount
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Converts this GetFineResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetFineResponse [" + "days=" + days + ", type=" + type + ", amount=" + amount + "]";
    }

    /**
     * Builds a new {@link GetFineResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetFineResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.days = internalGetDays();
        builder.type = internalGetType();
        builder.amount = internalGetAmount();
        return builder;
    }

    /**
     * Class to build instances of {@link GetFineResponse}.
     */
    public static class Builder {
        private OptionalNullable<Integer> days;
        private OptionalNullable<String> type;
        private OptionalNullable<Integer> amount;



        /**
         * Setter for days.
         * @param  days  Integer value for days.
         * @return Builder
         */
        public Builder days(Integer days) {
            this.days = OptionalNullable.of(days);
            return this;
        }

        /**
         * UnSetter for days.
         * @return Builder
         */
        public Builder unsetDays() {
            days = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Builds a new {@link GetFineResponse} object using the set fields.
         * @return {@link GetFineResponse}
         */
        public GetFineResponse build() {
            return new GetFineResponse(days, type, amount);
        }
    }
}
