/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for GetRegisterInformationAddressResponse type.
 */
public class GetRegisterInformationAddressResponse {
    private OptionalNullable<String> street;
    private OptionalNullable<String> complementary;
    private OptionalNullable<String> streetNumber;
    private OptionalNullable<String> neighborhood;
    private OptionalNullable<String> city;
    private OptionalNullable<String> state;
    private OptionalNullable<String> zipCode;
    private OptionalNullable<String> referencePoint;

    /**
     * Default constructor.
     */
    public GetRegisterInformationAddressResponse() {
    }

    /**
     * Initialization constructor.
     * @param  street  String value for street.
     * @param  complementary  String value for complementary.
     * @param  streetNumber  String value for streetNumber.
     * @param  neighborhood  String value for neighborhood.
     * @param  city  String value for city.
     * @param  state  String value for state.
     * @param  zipCode  String value for zipCode.
     * @param  referencePoint  String value for referencePoint.
     */
    public GetRegisterInformationAddressResponse(
            String street,
            String complementary,
            String streetNumber,
            String neighborhood,
            String city,
            String state,
            String zipCode,
            String referencePoint) {
        this.street = OptionalNullable.of(street);
        this.complementary = OptionalNullable.of(complementary);
        this.streetNumber = OptionalNullable.of(streetNumber);
        this.neighborhood = OptionalNullable.of(neighborhood);
        this.city = OptionalNullable.of(city);
        this.state = OptionalNullable.of(state);
        this.zipCode = OptionalNullable.of(zipCode);
        this.referencePoint = OptionalNullable.of(referencePoint);
    }

    /**
     * Initialization constructor.
     * @param  street  String value for street.
     * @param  complementary  String value for complementary.
     * @param  streetNumber  String value for streetNumber.
     * @param  neighborhood  String value for neighborhood.
     * @param  city  String value for city.
     * @param  state  String value for state.
     * @param  zipCode  String value for zipCode.
     * @param  referencePoint  String value for referencePoint.
     */

    protected GetRegisterInformationAddressResponse(OptionalNullable<String> street,
            OptionalNullable<String> complementary, OptionalNullable<String> streetNumber,
            OptionalNullable<String> neighborhood, OptionalNullable<String> city,
            OptionalNullable<String> state, OptionalNullable<String> zipCode,
            OptionalNullable<String> referencePoint) {
        this.street = street;
        this.complementary = complementary;
        this.streetNumber = streetNumber;
        this.neighborhood = neighborhood;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
        this.referencePoint = referencePoint;
    }

    /**
     * Internal Getter for Street.
     * @return Returns the Internal String
     */
    @JsonGetter("street")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStreet() {
        return this.street;
    }

    /**
     * Getter for Street.
     * @return Returns the String
     */
    public String getStreet() {
        return OptionalNullable.getFrom(street);
    }

    /**
     * Setter for Street.
     * @param street Value for String
     */
    @JsonSetter("street")
    public void setStreet(String street) {
        this.street = OptionalNullable.of(street);
    }

    /**
     * UnSetter for Street.
     */
    public void unsetStreet() {
        street = null;
    }

    /**
     * Internal Getter for Complementary.
     * @return Returns the Internal String
     */
    @JsonGetter("complementary")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetComplementary() {
        return this.complementary;
    }

    /**
     * Getter for Complementary.
     * @return Returns the String
     */
    public String getComplementary() {
        return OptionalNullable.getFrom(complementary);
    }

    /**
     * Setter for Complementary.
     * @param complementary Value for String
     */
    @JsonSetter("complementary")
    public void setComplementary(String complementary) {
        this.complementary = OptionalNullable.of(complementary);
    }

    /**
     * UnSetter for Complementary.
     */
    public void unsetComplementary() {
        complementary = null;
    }

    /**
     * Internal Getter for StreetNumber.
     * @return Returns the Internal String
     */
    @JsonGetter("street_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStreetNumber() {
        return this.streetNumber;
    }

    /**
     * Getter for StreetNumber.
     * @return Returns the String
     */
    public String getStreetNumber() {
        return OptionalNullable.getFrom(streetNumber);
    }

    /**
     * Setter for StreetNumber.
     * @param streetNumber Value for String
     */
    @JsonSetter("street_number")
    public void setStreetNumber(String streetNumber) {
        this.streetNumber = OptionalNullable.of(streetNumber);
    }

    /**
     * UnSetter for StreetNumber.
     */
    public void unsetStreetNumber() {
        streetNumber = null;
    }

    /**
     * Internal Getter for Neighborhood.
     * @return Returns the Internal String
     */
    @JsonGetter("neighborhood")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNeighborhood() {
        return this.neighborhood;
    }

    /**
     * Getter for Neighborhood.
     * @return Returns the String
     */
    public String getNeighborhood() {
        return OptionalNullable.getFrom(neighborhood);
    }

    /**
     * Setter for Neighborhood.
     * @param neighborhood Value for String
     */
    @JsonSetter("neighborhood")
    public void setNeighborhood(String neighborhood) {
        this.neighborhood = OptionalNullable.of(neighborhood);
    }

    /**
     * UnSetter for Neighborhood.
     */
    public void unsetNeighborhood() {
        neighborhood = null;
    }

    /**
     * Internal Getter for City.
     * @return Returns the Internal String
     */
    @JsonGetter("city")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCity() {
        return this.city;
    }

    /**
     * Getter for City.
     * @return Returns the String
     */
    public String getCity() {
        return OptionalNullable.getFrom(city);
    }

    /**
     * Setter for City.
     * @param city Value for String
     */
    @JsonSetter("city")
    public void setCity(String city) {
        this.city = OptionalNullable.of(city);
    }

    /**
     * UnSetter for City.
     */
    public void unsetCity() {
        city = null;
    }

    /**
     * Internal Getter for State.
     * @return Returns the Internal String
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetState() {
        return this.state;
    }

    /**
     * Getter for State.
     * @return Returns the String
     */
    public String getState() {
        return OptionalNullable.getFrom(state);
    }

    /**
     * Setter for State.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = OptionalNullable.of(state);
    }

    /**
     * UnSetter for State.
     */
    public void unsetState() {
        state = null;
    }

    /**
     * Internal Getter for ZipCode.
     * @return Returns the Internal String
     */
    @JsonGetter("zip_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetZipCode() {
        return this.zipCode;
    }

    /**
     * Getter for ZipCode.
     * @return Returns the String
     */
    public String getZipCode() {
        return OptionalNullable.getFrom(zipCode);
    }

    /**
     * Setter for ZipCode.
     * @param zipCode Value for String
     */
    @JsonSetter("zip_code")
    public void setZipCode(String zipCode) {
        this.zipCode = OptionalNullable.of(zipCode);
    }

    /**
     * UnSetter for ZipCode.
     */
    public void unsetZipCode() {
        zipCode = null;
    }

    /**
     * Internal Getter for ReferencePoint.
     * @return Returns the Internal String
     */
    @JsonGetter("reference_point")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReferencePoint() {
        return this.referencePoint;
    }

    /**
     * Getter for ReferencePoint.
     * @return Returns the String
     */
    public String getReferencePoint() {
        return OptionalNullable.getFrom(referencePoint);
    }

    /**
     * Setter for ReferencePoint.
     * @param referencePoint Value for String
     */
    @JsonSetter("reference_point")
    public void setReferencePoint(String referencePoint) {
        this.referencePoint = OptionalNullable.of(referencePoint);
    }

    /**
     * UnSetter for ReferencePoint.
     */
    public void unsetReferencePoint() {
        referencePoint = null;
    }

    /**
     * Converts this GetRegisterInformationAddressResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetRegisterInformationAddressResponse [" + "street=" + street + ", complementary="
                + complementary + ", streetNumber=" + streetNumber + ", neighborhood="
                + neighborhood + ", city=" + city + ", state=" + state + ", zipCode=" + zipCode
                + ", referencePoint=" + referencePoint + "]";
    }

    /**
     * Builds a new {@link GetRegisterInformationAddressResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetRegisterInformationAddressResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.street = internalGetStreet();
        builder.complementary = internalGetComplementary();
        builder.streetNumber = internalGetStreetNumber();
        builder.neighborhood = internalGetNeighborhood();
        builder.city = internalGetCity();
        builder.state = internalGetState();
        builder.zipCode = internalGetZipCode();
        builder.referencePoint = internalGetReferencePoint();
        return builder;
    }

    /**
     * Class to build instances of {@link GetRegisterInformationAddressResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> street;
        private OptionalNullable<String> complementary;
        private OptionalNullable<String> streetNumber;
        private OptionalNullable<String> neighborhood;
        private OptionalNullable<String> city;
        private OptionalNullable<String> state;
        private OptionalNullable<String> zipCode;
        private OptionalNullable<String> referencePoint;



        /**
         * Setter for street.
         * @param  street  String value for street.
         * @return Builder
         */
        public Builder street(String street) {
            this.street = OptionalNullable.of(street);
            return this;
        }

        /**
         * UnSetter for street.
         * @return Builder
         */
        public Builder unsetStreet() {
            street = null;
            return this;
        }

        /**
         * Setter for complementary.
         * @param  complementary  String value for complementary.
         * @return Builder
         */
        public Builder complementary(String complementary) {
            this.complementary = OptionalNullable.of(complementary);
            return this;
        }

        /**
         * UnSetter for complementary.
         * @return Builder
         */
        public Builder unsetComplementary() {
            complementary = null;
            return this;
        }

        /**
         * Setter for streetNumber.
         * @param  streetNumber  String value for streetNumber.
         * @return Builder
         */
        public Builder streetNumber(String streetNumber) {
            this.streetNumber = OptionalNullable.of(streetNumber);
            return this;
        }

        /**
         * UnSetter for streetNumber.
         * @return Builder
         */
        public Builder unsetStreetNumber() {
            streetNumber = null;
            return this;
        }

        /**
         * Setter for neighborhood.
         * @param  neighborhood  String value for neighborhood.
         * @return Builder
         */
        public Builder neighborhood(String neighborhood) {
            this.neighborhood = OptionalNullable.of(neighborhood);
            return this;
        }

        /**
         * UnSetter for neighborhood.
         * @return Builder
         */
        public Builder unsetNeighborhood() {
            neighborhood = null;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  String value for city.
         * @return Builder
         */
        public Builder city(String city) {
            this.city = OptionalNullable.of(city);
            return this;
        }

        /**
         * UnSetter for city.
         * @return Builder
         */
        public Builder unsetCity() {
            city = null;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = OptionalNullable.of(state);
            return this;
        }

        /**
         * UnSetter for state.
         * @return Builder
         */
        public Builder unsetState() {
            state = null;
            return this;
        }

        /**
         * Setter for zipCode.
         * @param  zipCode  String value for zipCode.
         * @return Builder
         */
        public Builder zipCode(String zipCode) {
            this.zipCode = OptionalNullable.of(zipCode);
            return this;
        }

        /**
         * UnSetter for zipCode.
         * @return Builder
         */
        public Builder unsetZipCode() {
            zipCode = null;
            return this;
        }

        /**
         * Setter for referencePoint.
         * @param  referencePoint  String value for referencePoint.
         * @return Builder
         */
        public Builder referencePoint(String referencePoint) {
            this.referencePoint = OptionalNullable.of(referencePoint);
            return this;
        }

        /**
         * UnSetter for referencePoint.
         * @return Builder
         */
        public Builder unsetReferencePoint() {
            referencePoint = null;
            return this;
        }

        /**
         * Builds a new {@link GetRegisterInformationAddressResponse} object using the set fields.
         * @return {@link GetRegisterInformationAddressResponse}
         */
        public GetRegisterInformationAddressResponse build() {
            return new GetRegisterInformationAddressResponse(street, complementary, streetNumber,
                    neighborhood, city, state, zipCode, referencePoint);
        }
    }
}
