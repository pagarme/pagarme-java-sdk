/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetTransactionResponse type.
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "transaction_type",
        defaultImpl = GetTransactionResponse.class,
        visible = true)
@JsonSubTypes({
    @Type(value = GetBankTransferTransactionResponse.class, name = "bank_transfer"),
    @Type(value = GetSafetyPayTransactionResponse.class, name = "safetypay"),
    @Type(value = GetVoucherTransactionResponse.class, name = "voucher"),
    @Type(value = GetBoletoTransactionResponse.class, name = "boleto"),
    @Type(value = GetDebitCardTransactionResponse.class, name = "debit_card"),
    @Type(value = GetPrivateLabelTransactionResponse.class, name = "private_label"),
    @Type(value = GetCashTransactionResponse.class, name = "cash"),
    @Type(value = GetCreditCardTransactionResponse.class, name = "credit_card"),
    @Type(value = GetPixTransactionResponse.class, name = "pix")
})
@JsonInclude(Include.ALWAYS)
public class GetTransactionResponse {
    private String gatewayId;
    private Integer amount;
    private String status;
    private Boolean success;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Integer attemptCount;
    private Integer maxAttempts;
    private List<GetSplitResponse> splits;
    private OptionalNullable<LocalDateTime> nextAttempt;
    private String transactionType;
    private String id;
    private GetGatewayResponseResponse gatewayResponse;
    private GetAntifraudResponse antifraudResponse;
    private OptionalNullable<Map<String, String>> metadata;
    private List<GetSplitResponse> split;
    private OptionalNullable<GetInterestResponse> interest;
    private OptionalNullable<GetFineResponse> fine;
    private OptionalNullable<Integer> maxDaysToPayPastDue;

    /**
     * Default constructor.
     */
    public GetTransactionResponse() {
        setTransactionType("transaction");
    }

    /**
     * Initialization constructor.
     * @param  gatewayId  String value for gatewayId.
     * @param  amount  Integer value for amount.
     * @param  status  String value for status.
     * @param  success  Boolean value for success.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  attemptCount  Integer value for attemptCount.
     * @param  maxAttempts  Integer value for maxAttempts.
     * @param  splits  List of GetSplitResponse value for splits.
     * @param  id  String value for id.
     * @param  gatewayResponse  GetGatewayResponseResponse value for gatewayResponse.
     * @param  antifraudResponse  GetAntifraudResponse value for antifraudResponse.
     * @param  split  List of GetSplitResponse value for split.
     * @param  nextAttempt  LocalDateTime value for nextAttempt.
     * @param  transactionType  String value for transactionType.
     * @param  metadata  Map of String, value for metadata.
     * @param  interest  GetInterestResponse value for interest.
     * @param  fine  GetFineResponse value for fine.
     * @param  maxDaysToPayPastDue  Integer value for maxDaysToPayPastDue.
     */
    public GetTransactionResponse(
            String gatewayId,
            Integer amount,
            String status,
            Boolean success,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            Integer attemptCount,
            Integer maxAttempts,
            List<GetSplitResponse> splits,
            String id,
            GetGatewayResponseResponse gatewayResponse,
            GetAntifraudResponse antifraudResponse,
            List<GetSplitResponse> split,
            LocalDateTime nextAttempt,
            String transactionType,
            Map<String, String> metadata,
            GetInterestResponse interest,
            GetFineResponse fine,
            Integer maxDaysToPayPastDue) {
        this.gatewayId = gatewayId;
        this.amount = amount;
        this.status = status;
        this.success = success;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.attemptCount = attemptCount;
        this.maxAttempts = maxAttempts;
        this.splits = splits;
        this.nextAttempt = OptionalNullable.of(nextAttempt);
        this.transactionType = transactionType;
        this.id = id;
        this.gatewayResponse = gatewayResponse;
        this.antifraudResponse = antifraudResponse;
        this.metadata = OptionalNullable.of(metadata);
        this.split = split;
        this.interest = OptionalNullable.of(interest);
        this.fine = OptionalNullable.of(fine);
        this.maxDaysToPayPastDue = OptionalNullable.of(maxDaysToPayPastDue);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetTransactionResponse(String gatewayId, Integer amount, String status,
            Boolean success, LocalDateTime createdAt, LocalDateTime updatedAt, Integer attemptCount,
            Integer maxAttempts, List<GetSplitResponse> splits, String id,
            GetGatewayResponseResponse gatewayResponse, GetAntifraudResponse antifraudResponse,
            List<GetSplitResponse> split, OptionalNullable<LocalDateTime> nextAttempt,
            String transactionType, OptionalNullable<Map<String, String>> metadata,
            OptionalNullable<GetInterestResponse> interest, OptionalNullable<GetFineResponse> fine,
            OptionalNullable<Integer> maxDaysToPayPastDue) {
        this.gatewayId = gatewayId;
        this.amount = amount;
        this.status = status;
        this.success = success;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.attemptCount = attemptCount;
        this.maxAttempts = maxAttempts;
        this.splits = splits;
        this.nextAttempt = nextAttempt;
        this.transactionType = transactionType;
        this.id = id;
        this.gatewayResponse = gatewayResponse;
        this.antifraudResponse = antifraudResponse;
        this.metadata = metadata;
        this.split = split;
        this.interest = interest;
        this.fine = fine;
        this.maxDaysToPayPastDue = maxDaysToPayPastDue;
    }

    /**
     * Getter for GatewayId.
     * Gateway transaction id
     * @return Returns the String
     */
    @JsonGetter("gateway_id")
    public String getGatewayId() {
        return gatewayId;
    }

    /**
     * Setter for GatewayId.
     * Gateway transaction id
     * @param gatewayId Value for String
     */
    @JsonSetter("gateway_id")
    public void setGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
    }

    /**
     * Getter for Amount.
     * Amount in cents
     * @return Returns the Integer
     */
    @JsonGetter("amount")
    public Integer getAmount() {
        return amount;
    }

    /**
     * Setter for Amount.
     * Amount in cents
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    /**
     * Getter for Status.
     * Transaction status
     * @return Returns the String
     */
    @JsonGetter("status")
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * Transaction status
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for Success.
     * Indicates if the transaction ocurred successfuly
     * @return Returns the Boolean
     */
    @JsonGetter("success")
    public Boolean getSuccess() {
        return success;
    }

    /**
     * Setter for Success.
     * Indicates if the transaction ocurred successfuly
     * @param success Value for Boolean
     */
    @JsonSetter("success")
    public void setSuccess(Boolean success) {
        this.success = success;
    }

    /**
     * Getter for CreatedAt.
     * Creation date
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * Creation date
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * Last update date
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * Last update date
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for AttemptCount.
     * Number of attempts tried
     * @return Returns the Integer
     */
    @JsonGetter("attempt_count")
    public Integer getAttemptCount() {
        return attemptCount;
    }

    /**
     * Setter for AttemptCount.
     * Number of attempts tried
     * @param attemptCount Value for Integer
     */
    @JsonSetter("attempt_count")
    public void setAttemptCount(Integer attemptCount) {
        this.attemptCount = attemptCount;
    }

    /**
     * Getter for MaxAttempts.
     * Max attempts
     * @return Returns the Integer
     */
    @JsonGetter("max_attempts")
    public Integer getMaxAttempts() {
        return maxAttempts;
    }

    /**
     * Setter for MaxAttempts.
     * Max attempts
     * @param maxAttempts Value for Integer
     */
    @JsonSetter("max_attempts")
    public void setMaxAttempts(Integer maxAttempts) {
        this.maxAttempts = maxAttempts;
    }

    /**
     * Getter for Splits.
     * Splits
     * @return Returns the List of GetSplitResponse
     */
    @JsonGetter("splits")
    public List<GetSplitResponse> getSplits() {
        return splits;
    }

    /**
     * Setter for Splits.
     * Splits
     * @param splits Value for List of GetSplitResponse
     */
    @JsonSetter("splits")
    public void setSplits(List<GetSplitResponse> splits) {
        this.splits = splits;
    }

    /**
     * Internal Getter for NextAttempt.
     * Date and time of the next attempt
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("next_attempt")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetNextAttempt() {
        return this.nextAttempt;
    }

    /**
     * Getter for NextAttempt.
     * Date and time of the next attempt
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getNextAttempt() {
        return OptionalNullable.getFrom(nextAttempt);
    }

    /**
     * Setter for NextAttempt.
     * Date and time of the next attempt
     * @param nextAttempt Value for LocalDateTime
     */
    @JsonSetter("next_attempt")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setNextAttempt(LocalDateTime nextAttempt) {
        this.nextAttempt = OptionalNullable.of(nextAttempt);
    }

    /**
     * UnSetter for NextAttempt.
     * Date and time of the next attempt
     */
    public void unsetNextAttempt() {
        nextAttempt = null;
    }

    /**
     * Getter for TransactionType.
     * @return Returns the String
     */
    @JsonGetter("transaction_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionType() {
        return transactionType;
    }

    /**
     * Setter for TransactionType.
     * @param transactionType Value for String
     */
    @JsonSetter("transaction_type")
    public void setTransactionType(String transactionType) {
        this.transactionType = transactionType;
    }

    /**
     * Getter for Id.
     * Código da transação
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Código da transação
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for GatewayResponse.
     * The Gateway Response
     * @return Returns the GetGatewayResponseResponse
     */
    @JsonGetter("gateway_response")
    public GetGatewayResponseResponse getGatewayResponse() {
        return gatewayResponse;
    }

    /**
     * Setter for GatewayResponse.
     * The Gateway Response
     * @param gatewayResponse Value for GetGatewayResponseResponse
     */
    @JsonSetter("gateway_response")
    public void setGatewayResponse(GetGatewayResponseResponse gatewayResponse) {
        this.gatewayResponse = gatewayResponse;
    }

    /**
     * Getter for AntifraudResponse.
     * @return Returns the GetAntifraudResponse
     */
    @JsonGetter("antifraud_response")
    public GetAntifraudResponse getAntifraudResponse() {
        return antifraudResponse;
    }

    /**
     * Setter for AntifraudResponse.
     * @param antifraudResponse Value for GetAntifraudResponse
     */
    @JsonSetter("antifraud_response")
    public void setAntifraudResponse(GetAntifraudResponse antifraudResponse) {
        this.antifraudResponse = antifraudResponse;
    }

    /**
     * Internal Getter for Metadata.
     * @return Returns the Internal Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Map<String, String>> internalGetMetadata() {
        return this.metadata;
    }

    /**
     * Getter for Metadata.
     * @return Returns the Map of String, String
     */
    public Map<String, String> getMetadata() {
        return OptionalNullable.getFrom(metadata);
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = OptionalNullable.of(metadata);
    }

    /**
     * UnSetter for Metadata.
     */
    public void unsetMetadata() {
        metadata = null;
    }

    /**
     * Getter for Split.
     * @return Returns the List of GetSplitResponse
     */
    @JsonGetter("split")
    public List<GetSplitResponse> getSplit() {
        return split;
    }

    /**
     * Setter for Split.
     * @param split Value for List of GetSplitResponse
     */
    @JsonSetter("split")
    public void setSplit(List<GetSplitResponse> split) {
        this.split = split;
    }

    /**
     * Internal Getter for Interest.
     * @return Returns the Internal GetInterestResponse
     */
    @JsonGetter("interest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetInterestResponse> internalGetInterest() {
        return this.interest;
    }

    /**
     * Getter for Interest.
     * @return Returns the GetInterestResponse
     */
    public GetInterestResponse getInterest() {
        return OptionalNullable.getFrom(interest);
    }

    /**
     * Setter for Interest.
     * @param interest Value for GetInterestResponse
     */
    @JsonSetter("interest")
    public void setInterest(GetInterestResponse interest) {
        this.interest = OptionalNullable.of(interest);
    }

    /**
     * UnSetter for Interest.
     */
    public void unsetInterest() {
        interest = null;
    }

    /**
     * Internal Getter for Fine.
     * @return Returns the Internal GetFineResponse
     */
    @JsonGetter("fine")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetFineResponse> internalGetFine() {
        return this.fine;
    }

    /**
     * Getter for Fine.
     * @return Returns the GetFineResponse
     */
    public GetFineResponse getFine() {
        return OptionalNullable.getFrom(fine);
    }

    /**
     * Setter for Fine.
     * @param fine Value for GetFineResponse
     */
    @JsonSetter("fine")
    public void setFine(GetFineResponse fine) {
        this.fine = OptionalNullable.of(fine);
    }

    /**
     * UnSetter for Fine.
     */
    public void unsetFine() {
        fine = null;
    }

    /**
     * Internal Getter for MaxDaysToPayPastDue.
     * @return Returns the Internal Integer
     */
    @JsonGetter("max_days_to_pay_past_due")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMaxDaysToPayPastDue() {
        return this.maxDaysToPayPastDue;
    }

    /**
     * Getter for MaxDaysToPayPastDue.
     * @return Returns the Integer
     */
    public Integer getMaxDaysToPayPastDue() {
        return OptionalNullable.getFrom(maxDaysToPayPastDue);
    }

    /**
     * Setter for MaxDaysToPayPastDue.
     * @param maxDaysToPayPastDue Value for Integer
     */
    @JsonSetter("max_days_to_pay_past_due")
    public void setMaxDaysToPayPastDue(Integer maxDaysToPayPastDue) {
        this.maxDaysToPayPastDue = OptionalNullable.of(maxDaysToPayPastDue);
    }

    /**
     * UnSetter for MaxDaysToPayPastDue.
     */
    public void unsetMaxDaysToPayPastDue() {
        maxDaysToPayPastDue = null;
    }

    /**
     * Converts this GetTransactionResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetTransactionResponse [" + "gatewayId=" + gatewayId + ", amount=" + amount
                + ", status=" + status + ", success=" + success + ", createdAt=" + createdAt
                + ", updatedAt=" + updatedAt + ", attemptCount=" + attemptCount + ", maxAttempts="
                + maxAttempts + ", splits=" + splits + ", id=" + id + ", gatewayResponse="
                + gatewayResponse + ", antifraudResponse=" + antifraudResponse + ", split=" + split
                + ", nextAttempt=" + nextAttempt + ", transactionType=" + transactionType
                + ", metadata=" + metadata + ", interest=" + interest + ", fine=" + fine
                + ", maxDaysToPayPastDue=" + maxDaysToPayPastDue + "]";
    }

    /**
     * Builds a new {@link GetTransactionResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetTransactionResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(gatewayId, amount, status, success, createdAt, updatedAt,
                attemptCount, maxAttempts, splits, id, gatewayResponse, antifraudResponse, split)
                .transactionType(getTransactionType());
        builder.nextAttempt = internalGetNextAttempt();
        builder.metadata = internalGetMetadata();
        builder.interest = internalGetInterest();
        builder.fine = internalGetFine();
        builder.maxDaysToPayPastDue = internalGetMaxDaysToPayPastDue();
        return builder;
    }

    /**
     * Class to build instances of {@link GetTransactionResponse}.
     */
    public static class Builder {
        private String gatewayId;
        private Integer amount;
        private String status;
        private Boolean success;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private Integer attemptCount;
        private Integer maxAttempts;
        private List<GetSplitResponse> splits;
        private String id;
        private GetGatewayResponseResponse gatewayResponse;
        private GetAntifraudResponse antifraudResponse;
        private List<GetSplitResponse> split;
        private OptionalNullable<LocalDateTime> nextAttempt;
        private String transactionType = "transaction";
        private OptionalNullable<Map<String, String>> metadata;
        private OptionalNullable<GetInterestResponse> interest;
        private OptionalNullable<GetFineResponse> fine;
        private OptionalNullable<Integer> maxDaysToPayPastDue;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  gatewayId  String value for gatewayId.
         * @param  amount  Integer value for amount.
         * @param  status  String value for status.
         * @param  success  Boolean value for success.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  attemptCount  Integer value for attemptCount.
         * @param  maxAttempts  Integer value for maxAttempts.
         * @param  splits  List of GetSplitResponse value for splits.
         * @param  id  String value for id.
         * @param  gatewayResponse  GetGatewayResponseResponse value for gatewayResponse.
         * @param  antifraudResponse  GetAntifraudResponse value for antifraudResponse.
         * @param  split  List of GetSplitResponse value for split.
         */
        public Builder(String gatewayId, Integer amount, String status, Boolean success,
                LocalDateTime createdAt, LocalDateTime updatedAt, Integer attemptCount,
                Integer maxAttempts, List<GetSplitResponse> splits, String id,
                GetGatewayResponseResponse gatewayResponse, GetAntifraudResponse antifraudResponse,
                List<GetSplitResponse> split) {
            this.gatewayId = gatewayId;
            this.amount = amount;
            this.status = status;
            this.success = success;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.attemptCount = attemptCount;
            this.maxAttempts = maxAttempts;
            this.splits = splits;
            this.id = id;
            this.gatewayResponse = gatewayResponse;
            this.antifraudResponse = antifraudResponse;
            this.split = split;
        }

        /**
         * Setter for gatewayId.
         * @param  gatewayId  String value for gatewayId.
         * @return Builder
         */
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = gatewayId;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for success.
         * @param  success  Boolean value for success.
         * @return Builder
         */
        public Builder success(Boolean success) {
            this.success = success;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for attemptCount.
         * @param  attemptCount  Integer value for attemptCount.
         * @return Builder
         */
        public Builder attemptCount(Integer attemptCount) {
            this.attemptCount = attemptCount;
            return this;
        }

        /**
         * Setter for maxAttempts.
         * @param  maxAttempts  Integer value for maxAttempts.
         * @return Builder
         */
        public Builder maxAttempts(Integer maxAttempts) {
            this.maxAttempts = maxAttempts;
            return this;
        }

        /**
         * Setter for splits.
         * @param  splits  List of GetSplitResponse value for splits.
         * @return Builder
         */
        public Builder splits(List<GetSplitResponse> splits) {
            this.splits = splits;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for gatewayResponse.
         * @param  gatewayResponse  GetGatewayResponseResponse value for gatewayResponse.
         * @return Builder
         */
        public Builder gatewayResponse(GetGatewayResponseResponse gatewayResponse) {
            this.gatewayResponse = gatewayResponse;
            return this;
        }

        /**
         * Setter for antifraudResponse.
         * @param  antifraudResponse  GetAntifraudResponse value for antifraudResponse.
         * @return Builder
         */
        public Builder antifraudResponse(GetAntifraudResponse antifraudResponse) {
            this.antifraudResponse = antifraudResponse;
            return this;
        }

        /**
         * Setter for split.
         * @param  split  List of GetSplitResponse value for split.
         * @return Builder
         */
        public Builder split(List<GetSplitResponse> split) {
            this.split = split;
            return this;
        }

        /**
         * Setter for nextAttempt.
         * @param  nextAttempt  LocalDateTime value for nextAttempt.
         * @return Builder
         */
        public Builder nextAttempt(LocalDateTime nextAttempt) {
            this.nextAttempt = OptionalNullable.of(nextAttempt);
            return this;
        }

        /**
         * UnSetter for nextAttempt.
         * @return Builder
         */
        public Builder unsetNextAttempt() {
            nextAttempt = null;
            return this;
        }

        /**
         * Setter for transactionType.
         * @param  transactionType  String value for transactionType.
         * @return Builder
         */
        public Builder transactionType(String transactionType) {
            this.transactionType = transactionType;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = OptionalNullable.of(metadata);
            return this;
        }

        /**
         * UnSetter for metadata.
         * @return Builder
         */
        public Builder unsetMetadata() {
            metadata = null;
            return this;
        }

        /**
         * Setter for interest.
         * @param  interest  GetInterestResponse value for interest.
         * @return Builder
         */
        public Builder interest(GetInterestResponse interest) {
            this.interest = OptionalNullable.of(interest);
            return this;
        }

        /**
         * UnSetter for interest.
         * @return Builder
         */
        public Builder unsetInterest() {
            interest = null;
            return this;
        }

        /**
         * Setter for fine.
         * @param  fine  GetFineResponse value for fine.
         * @return Builder
         */
        public Builder fine(GetFineResponse fine) {
            this.fine = OptionalNullable.of(fine);
            return this;
        }

        /**
         * UnSetter for fine.
         * @return Builder
         */
        public Builder unsetFine() {
            fine = null;
            return this;
        }

        /**
         * Setter for maxDaysToPayPastDue.
         * @param  maxDaysToPayPastDue  Integer value for maxDaysToPayPastDue.
         * @return Builder
         */
        public Builder maxDaysToPayPastDue(Integer maxDaysToPayPastDue) {
            this.maxDaysToPayPastDue = OptionalNullable.of(maxDaysToPayPastDue);
            return this;
        }

        /**
         * UnSetter for maxDaysToPayPastDue.
         * @return Builder
         */
        public Builder unsetMaxDaysToPayPastDue() {
            maxDaysToPayPastDue = null;
            return this;
        }

        /**
         * Builds a new {@link GetTransactionResponse} object using the set fields.
         * @return {@link GetTransactionResponse}
         */
        public GetTransactionResponse build() {
            return new GetTransactionResponse(gatewayId, amount, status, success, createdAt,
                    updatedAt, attemptCount, maxAttempts, splits, id, gatewayResponse,
                    antifraudResponse, split, nextAttempt, transactionType, metadata, interest,
                    fine, maxDaysToPayPastDue);
        }
    }
}
