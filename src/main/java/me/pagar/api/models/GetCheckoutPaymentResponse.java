/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetCheckoutPaymentResponse type.
 */
public class GetCheckoutPaymentResponse {
    private String id;
    private OptionalNullable<Integer> amount;
    private String defaultPaymentMethod;
    private String successUrl;
    private String paymentUrl;
    private String gatewayAffiliationId;
    private List<String> acceptedPaymentMethods;
    private String status;
    private Boolean skipCheckoutSuccessPage;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private OptionalNullable<LocalDateTime> canceledAt;
    private Boolean customerEditable;
    private OptionalNullable<GetCustomerResponse> customer;
    private GetAddressResponse billingaddress;
    private GetCheckoutCreditCardPaymentResponse creditCard;
    private GetCheckoutBoletoPaymentResponse boleto;
    private Boolean billingAddressEditable;
    private GetShippingResponse shipping;
    private Boolean shippable;
    private OptionalNullable<LocalDateTime> closedAt;
    private OptionalNullable<LocalDateTime> expiresAt;
    private String currency;
    private OptionalNullable<GetCheckoutDebitCardPaymentResponse> debitCard;
    private OptionalNullable<GetCheckoutBankTransferPaymentResponse> bankTransfer;
    private List<String> acceptedBrands;
    private OptionalNullable<GetCheckoutPixPaymentResponse> pix;

    /**
     * Default constructor.
     */
    public GetCheckoutPaymentResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
     * @param  successUrl  String value for successUrl.
     * @param  paymentUrl  String value for paymentUrl.
     * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
     * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
     * @param  status  String value for status.
     * @param  skipCheckoutSuccessPage  Boolean value for skipCheckoutSuccessPage.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  customerEditable  Boolean value for customerEditable.
     * @param  billingaddress  GetAddressResponse value for billingaddress.
     * @param  creditCard  GetCheckoutCreditCardPaymentResponse value for creditCard.
     * @param  boleto  GetCheckoutBoletoPaymentResponse value for boleto.
     * @param  billingAddressEditable  Boolean value for billingAddressEditable.
     * @param  shipping  GetShippingResponse value for shipping.
     * @param  shippable  Boolean value for shippable.
     * @param  currency  String value for currency.
     * @param  acceptedBrands  List of String value for acceptedBrands.
     * @param  amount  Integer value for amount.
     * @param  canceledAt  LocalDateTime value for canceledAt.
     * @param  customer  GetCustomerResponse value for customer.
     * @param  closedAt  LocalDateTime value for closedAt.
     * @param  expiresAt  LocalDateTime value for expiresAt.
     * @param  debitCard  GetCheckoutDebitCardPaymentResponse value for debitCard.
     * @param  bankTransfer  GetCheckoutBankTransferPaymentResponse value for bankTransfer.
     * @param  pix  GetCheckoutPixPaymentResponse value for pix.
     */
    public GetCheckoutPaymentResponse(
            String id,
            String defaultPaymentMethod,
            String successUrl,
            String paymentUrl,
            String gatewayAffiliationId,
            List<String> acceptedPaymentMethods,
            String status,
            Boolean skipCheckoutSuccessPage,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            Boolean customerEditable,
            GetAddressResponse billingaddress,
            GetCheckoutCreditCardPaymentResponse creditCard,
            GetCheckoutBoletoPaymentResponse boleto,
            Boolean billingAddressEditable,
            GetShippingResponse shipping,
            Boolean shippable,
            String currency,
            List<String> acceptedBrands,
            Integer amount,
            LocalDateTime canceledAt,
            GetCustomerResponse customer,
            LocalDateTime closedAt,
            LocalDateTime expiresAt,
            GetCheckoutDebitCardPaymentResponse debitCard,
            GetCheckoutBankTransferPaymentResponse bankTransfer,
            GetCheckoutPixPaymentResponse pix) {
        this.id = id;
        this.amount = OptionalNullable.of(amount);
        this.defaultPaymentMethod = defaultPaymentMethod;
        this.successUrl = successUrl;
        this.paymentUrl = paymentUrl;
        this.gatewayAffiliationId = gatewayAffiliationId;
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        this.status = status;
        this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.canceledAt = OptionalNullable.of(canceledAt);
        this.customerEditable = customerEditable;
        this.customer = OptionalNullable.of(customer);
        this.billingaddress = billingaddress;
        this.creditCard = creditCard;
        this.boleto = boleto;
        this.billingAddressEditable = billingAddressEditable;
        this.shipping = shipping;
        this.shippable = shippable;
        this.closedAt = OptionalNullable.of(closedAt);
        this.expiresAt = OptionalNullable.of(expiresAt);
        this.currency = currency;
        this.debitCard = OptionalNullable.of(debitCard);
        this.bankTransfer = OptionalNullable.of(bankTransfer);
        this.acceptedBrands = acceptedBrands;
        this.pix = OptionalNullable.of(pix);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetCheckoutPaymentResponse(String id, String defaultPaymentMethod, String successUrl,
            String paymentUrl, String gatewayAffiliationId, List<String> acceptedPaymentMethods,
            String status, Boolean skipCheckoutSuccessPage, LocalDateTime createdAt,
            LocalDateTime updatedAt, Boolean customerEditable, GetAddressResponse billingaddress,
            GetCheckoutCreditCardPaymentResponse creditCard,
            GetCheckoutBoletoPaymentResponse boleto, Boolean billingAddressEditable,
            GetShippingResponse shipping, Boolean shippable, String currency,
            List<String> acceptedBrands, OptionalNullable<Integer> amount,
            OptionalNullable<LocalDateTime> canceledAt,
            OptionalNullable<GetCustomerResponse> customer,
            OptionalNullable<LocalDateTime> closedAt, OptionalNullable<LocalDateTime> expiresAt,
            OptionalNullable<GetCheckoutDebitCardPaymentResponse> debitCard,
            OptionalNullable<GetCheckoutBankTransferPaymentResponse> bankTransfer,
            OptionalNullable<GetCheckoutPixPaymentResponse> pix) {
        this.id = id;
        this.amount = amount;
        this.defaultPaymentMethod = defaultPaymentMethod;
        this.successUrl = successUrl;
        this.paymentUrl = paymentUrl;
        this.gatewayAffiliationId = gatewayAffiliationId;
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        this.status = status;
        this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.canceledAt = canceledAt;
        this.customerEditable = customerEditable;
        this.customer = customer;
        this.billingaddress = billingaddress;
        this.creditCard = creditCard;
        this.boleto = boleto;
        this.billingAddressEditable = billingAddressEditable;
        this.shipping = shipping;
        this.shippable = shippable;
        this.closedAt = closedAt;
        this.expiresAt = expiresAt;
        this.currency = currency;
        this.debitCard = debitCard;
        this.bankTransfer = bankTransfer;
        this.acceptedBrands = acceptedBrands;
        this.pix = pix;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Internal Getter for Amount.
     * Valor em centavos
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * Valor em centavos
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * Valor em centavos
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     * Valor em centavos
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Getter for DefaultPaymentMethod.
     * Meio de pagamento padrão no checkout
     * @return Returns the String
     */
    @JsonGetter("default_payment_method")
    public String getDefaultPaymentMethod() {
        return defaultPaymentMethod;
    }

    /**
     * Setter for DefaultPaymentMethod.
     * Meio de pagamento padrão no checkout
     * @param defaultPaymentMethod Value for String
     */
    @JsonSetter("default_payment_method")
    public void setDefaultPaymentMethod(String defaultPaymentMethod) {
        this.defaultPaymentMethod = defaultPaymentMethod;
    }

    /**
     * Getter for SuccessUrl.
     * Url de redirecionamento de sucesso após o checkou
     * @return Returns the String
     */
    @JsonGetter("success_url")
    public String getSuccessUrl() {
        return successUrl;
    }

    /**
     * Setter for SuccessUrl.
     * Url de redirecionamento de sucesso após o checkou
     * @param successUrl Value for String
     */
    @JsonSetter("success_url")
    public void setSuccessUrl(String successUrl) {
        this.successUrl = successUrl;
    }

    /**
     * Getter for PaymentUrl.
     * Url para pagamento usando o checkout
     * @return Returns the String
     */
    @JsonGetter("payment_url")
    public String getPaymentUrl() {
        return paymentUrl;
    }

    /**
     * Setter for PaymentUrl.
     * Url para pagamento usando o checkout
     * @param paymentUrl Value for String
     */
    @JsonSetter("payment_url")
    public void setPaymentUrl(String paymentUrl) {
        this.paymentUrl = paymentUrl;
    }

    /**
     * Getter for GatewayAffiliationId.
     * Código da afiliação onde o pagamento será processado no gateway
     * @return Returns the String
     */
    @JsonGetter("gateway_affiliation_id")
    public String getGatewayAffiliationId() {
        return gatewayAffiliationId;
    }

    /**
     * Setter for GatewayAffiliationId.
     * Código da afiliação onde o pagamento será processado no gateway
     * @param gatewayAffiliationId Value for String
     */
    @JsonSetter("gateway_affiliation_id")
    public void setGatewayAffiliationId(String gatewayAffiliationId) {
        this.gatewayAffiliationId = gatewayAffiliationId;
    }

    /**
     * Getter for AcceptedPaymentMethods.
     * Meios de pagamento aceitos no checkout
     * @return Returns the List of String
     */
    @JsonGetter("accepted_payment_methods")
    public List<String> getAcceptedPaymentMethods() {
        return acceptedPaymentMethods;
    }

    /**
     * Setter for AcceptedPaymentMethods.
     * Meios de pagamento aceitos no checkout
     * @param acceptedPaymentMethods Value for List of String
     */
    @JsonSetter("accepted_payment_methods")
    public void setAcceptedPaymentMethods(List<String> acceptedPaymentMethods) {
        this.acceptedPaymentMethods = acceptedPaymentMethods;
    }

    /**
     * Getter for Status.
     * Status do checkout
     * @return Returns the String
     */
    @JsonGetter("status")
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * Status do checkout
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for SkipCheckoutSuccessPage.
     * Pular tela de sucesso pós-pagamento?
     * @return Returns the Boolean
     */
    @JsonGetter("skip_checkout_success_page")
    public Boolean getSkipCheckoutSuccessPage() {
        return skipCheckoutSuccessPage;
    }

    /**
     * Setter for SkipCheckoutSuccessPage.
     * Pular tela de sucesso pós-pagamento?
     * @param skipCheckoutSuccessPage Value for Boolean
     */
    @JsonSetter("skip_checkout_success_page")
    public void setSkipCheckoutSuccessPage(Boolean skipCheckoutSuccessPage) {
        this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
    }

    /**
     * Getter for CreatedAt.
     * Data de criação
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * Data de criação
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * Data de atualização
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * Data de atualização
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Internal Getter for CanceledAt.
     * Data de cancelamento
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("canceled_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCanceledAt() {
        return this.canceledAt;
    }

    /**
     * Getter for CanceledAt.
     * Data de cancelamento
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCanceledAt() {
        return OptionalNullable.getFrom(canceledAt);
    }

    /**
     * Setter for CanceledAt.
     * Data de cancelamento
     * @param canceledAt Value for LocalDateTime
     */
    @JsonSetter("canceled_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCanceledAt(LocalDateTime canceledAt) {
        this.canceledAt = OptionalNullable.of(canceledAt);
    }

    /**
     * UnSetter for CanceledAt.
     * Data de cancelamento
     */
    public void unsetCanceledAt() {
        canceledAt = null;
    }

    /**
     * Getter for CustomerEditable.
     * Torna o objeto customer editável
     * @return Returns the Boolean
     */
    @JsonGetter("customer_editable")
    public Boolean getCustomerEditable() {
        return customerEditable;
    }

    /**
     * Setter for CustomerEditable.
     * Torna o objeto customer editável
     * @param customerEditable Value for Boolean
     */
    @JsonSetter("customer_editable")
    public void setCustomerEditable(Boolean customerEditable) {
        this.customerEditable = customerEditable;
    }

    /**
     * Internal Getter for Customer.
     * Dados do comprador
     * @return Returns the Internal GetCustomerResponse
     */
    @JsonGetter("customer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCustomerResponse> internalGetCustomer() {
        return this.customer;
    }

    /**
     * Getter for Customer.
     * Dados do comprador
     * @return Returns the GetCustomerResponse
     */
    public GetCustomerResponse getCustomer() {
        return OptionalNullable.getFrom(customer);
    }

    /**
     * Setter for Customer.
     * Dados do comprador
     * @param customer Value for GetCustomerResponse
     */
    @JsonSetter("customer")
    public void setCustomer(GetCustomerResponse customer) {
        this.customer = OptionalNullable.of(customer);
    }

    /**
     * UnSetter for Customer.
     * Dados do comprador
     */
    public void unsetCustomer() {
        customer = null;
    }

    /**
     * Getter for Billingaddress.
     * Dados do endereço de cobrança
     * @return Returns the GetAddressResponse
     */
    @JsonGetter("billingaddress")
    public GetAddressResponse getBillingaddress() {
        return billingaddress;
    }

    /**
     * Setter for Billingaddress.
     * Dados do endereço de cobrança
     * @param billingaddress Value for GetAddressResponse
     */
    @JsonSetter("billingaddress")
    public void setBillingaddress(GetAddressResponse billingaddress) {
        this.billingaddress = billingaddress;
    }

    /**
     * Getter for CreditCard.
     * Configurações de cartão de crédito
     * @return Returns the GetCheckoutCreditCardPaymentResponse
     */
    @JsonGetter("credit_card")
    public GetCheckoutCreditCardPaymentResponse getCreditCard() {
        return creditCard;
    }

    /**
     * Setter for CreditCard.
     * Configurações de cartão de crédito
     * @param creditCard Value for GetCheckoutCreditCardPaymentResponse
     */
    @JsonSetter("credit_card")
    public void setCreditCard(GetCheckoutCreditCardPaymentResponse creditCard) {
        this.creditCard = creditCard;
    }

    /**
     * Getter for Boleto.
     * Configurações de boleto
     * @return Returns the GetCheckoutBoletoPaymentResponse
     */
    @JsonGetter("boleto")
    public GetCheckoutBoletoPaymentResponse getBoleto() {
        return boleto;
    }

    /**
     * Setter for Boleto.
     * Configurações de boleto
     * @param boleto Value for GetCheckoutBoletoPaymentResponse
     */
    @JsonSetter("boleto")
    public void setBoleto(GetCheckoutBoletoPaymentResponse boleto) {
        this.boleto = boleto;
    }

    /**
     * Getter for BillingAddressEditable.
     * Indica se o billing address poderá ser editado
     * @return Returns the Boolean
     */
    @JsonGetter("billing_address_editable")
    public Boolean getBillingAddressEditable() {
        return billingAddressEditable;
    }

    /**
     * Setter for BillingAddressEditable.
     * Indica se o billing address poderá ser editado
     * @param billingAddressEditable Value for Boolean
     */
    @JsonSetter("billing_address_editable")
    public void setBillingAddressEditable(Boolean billingAddressEditable) {
        this.billingAddressEditable = billingAddressEditable;
    }

    /**
     * Getter for Shipping.
     * Configurações de entrega
     * @return Returns the GetShippingResponse
     */
    @JsonGetter("shipping")
    public GetShippingResponse getShipping() {
        return shipping;
    }

    /**
     * Setter for Shipping.
     * Configurações de entrega
     * @param shipping Value for GetShippingResponse
     */
    @JsonSetter("shipping")
    public void setShipping(GetShippingResponse shipping) {
        this.shipping = shipping;
    }

    /**
     * Getter for Shippable.
     * Indica se possui entrega
     * @return Returns the Boolean
     */
    @JsonGetter("shippable")
    public Boolean getShippable() {
        return shippable;
    }

    /**
     * Setter for Shippable.
     * Indica se possui entrega
     * @param shippable Value for Boolean
     */
    @JsonSetter("shippable")
    public void setShippable(Boolean shippable) {
        this.shippable = shippable;
    }

    /**
     * Internal Getter for ClosedAt.
     * Data de fechamento
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("closed_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetClosedAt() {
        return this.closedAt;
    }

    /**
     * Getter for ClosedAt.
     * Data de fechamento
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getClosedAt() {
        return OptionalNullable.getFrom(closedAt);
    }

    /**
     * Setter for ClosedAt.
     * Data de fechamento
     * @param closedAt Value for LocalDateTime
     */
    @JsonSetter("closed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setClosedAt(LocalDateTime closedAt) {
        this.closedAt = OptionalNullable.of(closedAt);
    }

    /**
     * UnSetter for ClosedAt.
     * Data de fechamento
     */
    public void unsetClosedAt() {
        closedAt = null;
    }

    /**
     * Internal Getter for ExpiresAt.
     * Data de expiração
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("expires_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Getter for ExpiresAt.
     * Data de expiração
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getExpiresAt() {
        return OptionalNullable.getFrom(expiresAt);
    }

    /**
     * Setter for ExpiresAt.
     * Data de expiração
     * @param expiresAt Value for LocalDateTime
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = OptionalNullable.of(expiresAt);
    }

    /**
     * UnSetter for ExpiresAt.
     * Data de expiração
     */
    public void unsetExpiresAt() {
        expiresAt = null;
    }

    /**
     * Getter for Currency.
     * Moeda
     * @return Returns the String
     */
    @JsonGetter("currency")
    public String getCurrency() {
        return currency;
    }

    /**
     * Setter for Currency.
     * Moeda
     * @param currency Value for String
     */
    @JsonSetter("currency")
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * Internal Getter for DebitCard.
     * Configurações de cartão de débito
     * @return Returns the Internal GetCheckoutDebitCardPaymentResponse
     */
    @JsonGetter("debit_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutDebitCardPaymentResponse> internalGetDebitCard() {
        return this.debitCard;
    }

    /**
     * Getter for DebitCard.
     * Configurações de cartão de débito
     * @return Returns the GetCheckoutDebitCardPaymentResponse
     */
    public GetCheckoutDebitCardPaymentResponse getDebitCard() {
        return OptionalNullable.getFrom(debitCard);
    }

    /**
     * Setter for DebitCard.
     * Configurações de cartão de débito
     * @param debitCard Value for GetCheckoutDebitCardPaymentResponse
     */
    @JsonSetter("debit_card")
    public void setDebitCard(GetCheckoutDebitCardPaymentResponse debitCard) {
        this.debitCard = OptionalNullable.of(debitCard);
    }

    /**
     * UnSetter for DebitCard.
     * Configurações de cartão de débito
     */
    public void unsetDebitCard() {
        debitCard = null;
    }

    /**
     * Internal Getter for BankTransfer.
     * Bank transfer payment response
     * @return Returns the Internal GetCheckoutBankTransferPaymentResponse
     */
    @JsonGetter("bank_transfer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutBankTransferPaymentResponse> internalGetBankTransfer() {
        return this.bankTransfer;
    }

    /**
     * Getter for BankTransfer.
     * Bank transfer payment response
     * @return Returns the GetCheckoutBankTransferPaymentResponse
     */
    public GetCheckoutBankTransferPaymentResponse getBankTransfer() {
        return OptionalNullable.getFrom(bankTransfer);
    }

    /**
     * Setter for BankTransfer.
     * Bank transfer payment response
     * @param bankTransfer Value for GetCheckoutBankTransferPaymentResponse
     */
    @JsonSetter("bank_transfer")
    public void setBankTransfer(GetCheckoutBankTransferPaymentResponse bankTransfer) {
        this.bankTransfer = OptionalNullable.of(bankTransfer);
    }

    /**
     * UnSetter for BankTransfer.
     * Bank transfer payment response
     */
    public void unsetBankTransfer() {
        bankTransfer = null;
    }

    /**
     * Getter for AcceptedBrands.
     * Accepted Brands
     * @return Returns the List of String
     */
    @JsonGetter("accepted_brands")
    public List<String> getAcceptedBrands() {
        return acceptedBrands;
    }

    /**
     * Setter for AcceptedBrands.
     * Accepted Brands
     * @param acceptedBrands Value for List of String
     */
    @JsonSetter("accepted_brands")
    public void setAcceptedBrands(List<String> acceptedBrands) {
        this.acceptedBrands = acceptedBrands;
    }

    /**
     * Internal Getter for Pix.
     * Pix payment response
     * @return Returns the Internal GetCheckoutPixPaymentResponse
     */
    @JsonGetter("pix")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutPixPaymentResponse> internalGetPix() {
        return this.pix;
    }

    /**
     * Getter for Pix.
     * Pix payment response
     * @return Returns the GetCheckoutPixPaymentResponse
     */
    public GetCheckoutPixPaymentResponse getPix() {
        return OptionalNullable.getFrom(pix);
    }

    /**
     * Setter for Pix.
     * Pix payment response
     * @param pix Value for GetCheckoutPixPaymentResponse
     */
    @JsonSetter("pix")
    public void setPix(GetCheckoutPixPaymentResponse pix) {
        this.pix = OptionalNullable.of(pix);
    }

    /**
     * UnSetter for Pix.
     * Pix payment response
     */
    public void unsetPix() {
        pix = null;
    }

    /**
     * Converts this GetCheckoutPaymentResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetCheckoutPaymentResponse [" + "id=" + id + ", defaultPaymentMethod="
                + defaultPaymentMethod + ", successUrl=" + successUrl + ", paymentUrl=" + paymentUrl
                + ", gatewayAffiliationId=" + gatewayAffiliationId + ", acceptedPaymentMethods="
                + acceptedPaymentMethods + ", status=" + status + ", skipCheckoutSuccessPage="
                + skipCheckoutSuccessPage + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt
                + ", customerEditable=" + customerEditable + ", billingaddress=" + billingaddress
                + ", creditCard=" + creditCard + ", boleto=" + boleto + ", billingAddressEditable="
                + billingAddressEditable + ", shipping=" + shipping + ", shippable=" + shippable
                + ", currency=" + currency + ", acceptedBrands=" + acceptedBrands + ", amount="
                + amount + ", canceledAt=" + canceledAt + ", customer=" + customer + ", closedAt="
                + closedAt + ", expiresAt=" + expiresAt + ", debitCard=" + debitCard
                + ", bankTransfer=" + bankTransfer + ", pix=" + pix + "]";
    }

    /**
     * Builds a new {@link GetCheckoutPaymentResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetCheckoutPaymentResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, defaultPaymentMethod, successUrl, paymentUrl,
                gatewayAffiliationId, acceptedPaymentMethods, status, skipCheckoutSuccessPage,
                createdAt, updatedAt, customerEditable, billingaddress, creditCard, boleto,
                billingAddressEditable, shipping, shippable, currency, acceptedBrands);
        builder.amount = internalGetAmount();
        builder.canceledAt = internalGetCanceledAt();
        builder.customer = internalGetCustomer();
        builder.closedAt = internalGetClosedAt();
        builder.expiresAt = internalGetExpiresAt();
        builder.debitCard = internalGetDebitCard();
        builder.bankTransfer = internalGetBankTransfer();
        builder.pix = internalGetPix();
        return builder;
    }

    /**
     * Class to build instances of {@link GetCheckoutPaymentResponse}.
     */
    public static class Builder {
        private String id;
        private String defaultPaymentMethod;
        private String successUrl;
        private String paymentUrl;
        private String gatewayAffiliationId;
        private List<String> acceptedPaymentMethods;
        private String status;
        private Boolean skipCheckoutSuccessPage;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private Boolean customerEditable;
        private GetAddressResponse billingaddress;
        private GetCheckoutCreditCardPaymentResponse creditCard;
        private GetCheckoutBoletoPaymentResponse boleto;
        private Boolean billingAddressEditable;
        private GetShippingResponse shipping;
        private Boolean shippable;
        private String currency;
        private List<String> acceptedBrands;
        private OptionalNullable<Integer> amount;
        private OptionalNullable<LocalDateTime> canceledAt;
        private OptionalNullable<GetCustomerResponse> customer;
        private OptionalNullable<LocalDateTime> closedAt;
        private OptionalNullable<LocalDateTime> expiresAt;
        private OptionalNullable<GetCheckoutDebitCardPaymentResponse> debitCard;
        private OptionalNullable<GetCheckoutBankTransferPaymentResponse> bankTransfer;
        private OptionalNullable<GetCheckoutPixPaymentResponse> pix;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  String value for id.
         * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
         * @param  successUrl  String value for successUrl.
         * @param  paymentUrl  String value for paymentUrl.
         * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
         * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
         * @param  status  String value for status.
         * @param  skipCheckoutSuccessPage  Boolean value for skipCheckoutSuccessPage.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  customerEditable  Boolean value for customerEditable.
         * @param  billingaddress  GetAddressResponse value for billingaddress.
         * @param  creditCard  GetCheckoutCreditCardPaymentResponse value for creditCard.
         * @param  boleto  GetCheckoutBoletoPaymentResponse value for boleto.
         * @param  billingAddressEditable  Boolean value for billingAddressEditable.
         * @param  shipping  GetShippingResponse value for shipping.
         * @param  shippable  Boolean value for shippable.
         * @param  currency  String value for currency.
         * @param  acceptedBrands  List of String value for acceptedBrands.
         */
        public Builder(String id, String defaultPaymentMethod, String successUrl, String paymentUrl,
                String gatewayAffiliationId, List<String> acceptedPaymentMethods, String status,
                Boolean skipCheckoutSuccessPage, LocalDateTime createdAt, LocalDateTime updatedAt,
                Boolean customerEditable, GetAddressResponse billingaddress,
                GetCheckoutCreditCardPaymentResponse creditCard,
                GetCheckoutBoletoPaymentResponse boleto, Boolean billingAddressEditable,
                GetShippingResponse shipping, Boolean shippable, String currency,
                List<String> acceptedBrands) {
            this.id = id;
            this.defaultPaymentMethod = defaultPaymentMethod;
            this.successUrl = successUrl;
            this.paymentUrl = paymentUrl;
            this.gatewayAffiliationId = gatewayAffiliationId;
            this.acceptedPaymentMethods = acceptedPaymentMethods;
            this.status = status;
            this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.customerEditable = customerEditable;
            this.billingaddress = billingaddress;
            this.creditCard = creditCard;
            this.boleto = boleto;
            this.billingAddressEditable = billingAddressEditable;
            this.shipping = shipping;
            this.shippable = shippable;
            this.currency = currency;
            this.acceptedBrands = acceptedBrands;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for defaultPaymentMethod.
         * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
         * @return Builder
         */
        public Builder defaultPaymentMethod(String defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }

        /**
         * Setter for successUrl.
         * @param  successUrl  String value for successUrl.
         * @return Builder
         */
        public Builder successUrl(String successUrl) {
            this.successUrl = successUrl;
            return this;
        }

        /**
         * Setter for paymentUrl.
         * @param  paymentUrl  String value for paymentUrl.
         * @return Builder
         */
        public Builder paymentUrl(String paymentUrl) {
            this.paymentUrl = paymentUrl;
            return this;
        }

        /**
         * Setter for gatewayAffiliationId.
         * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
         * @return Builder
         */
        public Builder gatewayAffiliationId(String gatewayAffiliationId) {
            this.gatewayAffiliationId = gatewayAffiliationId;
            return this;
        }

        /**
         * Setter for acceptedPaymentMethods.
         * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
         * @return Builder
         */
        public Builder acceptedPaymentMethods(List<String> acceptedPaymentMethods) {
            this.acceptedPaymentMethods = acceptedPaymentMethods;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for skipCheckoutSuccessPage.
         * @param  skipCheckoutSuccessPage  Boolean value for skipCheckoutSuccessPage.
         * @return Builder
         */
        public Builder skipCheckoutSuccessPage(Boolean skipCheckoutSuccessPage) {
            this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for customerEditable.
         * @param  customerEditable  Boolean value for customerEditable.
         * @return Builder
         */
        public Builder customerEditable(Boolean customerEditable) {
            this.customerEditable = customerEditable;
            return this;
        }

        /**
         * Setter for billingaddress.
         * @param  billingaddress  GetAddressResponse value for billingaddress.
         * @return Builder
         */
        public Builder billingaddress(GetAddressResponse billingaddress) {
            this.billingaddress = billingaddress;
            return this;
        }

        /**
         * Setter for creditCard.
         * @param  creditCard  GetCheckoutCreditCardPaymentResponse value for creditCard.
         * @return Builder
         */
        public Builder creditCard(GetCheckoutCreditCardPaymentResponse creditCard) {
            this.creditCard = creditCard;
            return this;
        }

        /**
         * Setter for boleto.
         * @param  boleto  GetCheckoutBoletoPaymentResponse value for boleto.
         * @return Builder
         */
        public Builder boleto(GetCheckoutBoletoPaymentResponse boleto) {
            this.boleto = boleto;
            return this;
        }

        /**
         * Setter for billingAddressEditable.
         * @param  billingAddressEditable  Boolean value for billingAddressEditable.
         * @return Builder
         */
        public Builder billingAddressEditable(Boolean billingAddressEditable) {
            this.billingAddressEditable = billingAddressEditable;
            return this;
        }

        /**
         * Setter for shipping.
         * @param  shipping  GetShippingResponse value for shipping.
         * @return Builder
         */
        public Builder shipping(GetShippingResponse shipping) {
            this.shipping = shipping;
            return this;
        }

        /**
         * Setter for shippable.
         * @param  shippable  Boolean value for shippable.
         * @return Builder
         */
        public Builder shippable(Boolean shippable) {
            this.shippable = shippable;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Setter for acceptedBrands.
         * @param  acceptedBrands  List of String value for acceptedBrands.
         * @return Builder
         */
        public Builder acceptedBrands(List<String> acceptedBrands) {
            this.acceptedBrands = acceptedBrands;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for canceledAt.
         * @param  canceledAt  LocalDateTime value for canceledAt.
         * @return Builder
         */
        public Builder canceledAt(LocalDateTime canceledAt) {
            this.canceledAt = OptionalNullable.of(canceledAt);
            return this;
        }

        /**
         * UnSetter for canceledAt.
         * @return Builder
         */
        public Builder unsetCanceledAt() {
            canceledAt = null;
            return this;
        }

        /**
         * Setter for customer.
         * @param  customer  GetCustomerResponse value for customer.
         * @return Builder
         */
        public Builder customer(GetCustomerResponse customer) {
            this.customer = OptionalNullable.of(customer);
            return this;
        }

        /**
         * UnSetter for customer.
         * @return Builder
         */
        public Builder unsetCustomer() {
            customer = null;
            return this;
        }

        /**
         * Setter for closedAt.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @return Builder
         */
        public Builder closedAt(LocalDateTime closedAt) {
            this.closedAt = OptionalNullable.of(closedAt);
            return this;
        }

        /**
         * UnSetter for closedAt.
         * @return Builder
         */
        public Builder unsetClosedAt() {
            closedAt = null;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(LocalDateTime expiresAt) {
            this.expiresAt = OptionalNullable.of(expiresAt);
            return this;
        }

        /**
         * UnSetter for expiresAt.
         * @return Builder
         */
        public Builder unsetExpiresAt() {
            expiresAt = null;
            return this;
        }

        /**
         * Setter for debitCard.
         * @param  debitCard  GetCheckoutDebitCardPaymentResponse value for debitCard.
         * @return Builder
         */
        public Builder debitCard(GetCheckoutDebitCardPaymentResponse debitCard) {
            this.debitCard = OptionalNullable.of(debitCard);
            return this;
        }

        /**
         * UnSetter for debitCard.
         * @return Builder
         */
        public Builder unsetDebitCard() {
            debitCard = null;
            return this;
        }

        /**
         * Setter for bankTransfer.
         * @param  bankTransfer  GetCheckoutBankTransferPaymentResponse value for bankTransfer.
         * @return Builder
         */
        public Builder bankTransfer(GetCheckoutBankTransferPaymentResponse bankTransfer) {
            this.bankTransfer = OptionalNullable.of(bankTransfer);
            return this;
        }

        /**
         * UnSetter for bankTransfer.
         * @return Builder
         */
        public Builder unsetBankTransfer() {
            bankTransfer = null;
            return this;
        }

        /**
         * Setter for pix.
         * @param  pix  GetCheckoutPixPaymentResponse value for pix.
         * @return Builder
         */
        public Builder pix(GetCheckoutPixPaymentResponse pix) {
            this.pix = OptionalNullable.of(pix);
            return this;
        }

        /**
         * UnSetter for pix.
         * @return Builder
         */
        public Builder unsetPix() {
            pix = null;
            return this;
        }

        /**
         * Builds a new {@link GetCheckoutPaymentResponse} object using the set fields.
         * @return {@link GetCheckoutPaymentResponse}
         */
        public GetCheckoutPaymentResponse build() {
            return new GetCheckoutPaymentResponse(id, defaultPaymentMethod, successUrl, paymentUrl,
                    gatewayAffiliationId, acceptedPaymentMethods, status, skipCheckoutSuccessPage,
                    createdAt, updatedAt, customerEditable, billingaddress, creditCard, boleto,
                    billingAddressEditable, shipping, shippable, currency, acceptedBrands, amount,
                    canceledAt, customer, closedAt, expiresAt, debitCard, bankTransfer, pix);
        }
    }
}
