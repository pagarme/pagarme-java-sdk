/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetCheckoutPaymentResponse type.
 */
public class GetCheckoutPaymentResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<Integer> amount;
    private OptionalNullable<String> defaultPaymentMethod;
    private OptionalNullable<String> successUrl;
    private OptionalNullable<String> paymentUrl;
    private OptionalNullable<String> gatewayAffiliationId;
    private OptionalNullable<List<String>> acceptedPaymentMethods;
    private OptionalNullable<String> status;
    private OptionalNullable<Boolean> skipCheckoutSuccessPage;
    private OptionalNullable<LocalDateTime> createdAt;
    private OptionalNullable<LocalDateTime> updatedAt;
    private OptionalNullable<LocalDateTime> canceledAt;
    private OptionalNullable<Boolean> customerEditable;
    private OptionalNullable<GetCustomerResponse> customer;
    private OptionalNullable<GetAddressResponse> billingaddress;
    private OptionalNullable<GetCheckoutCreditCardPaymentResponse> creditCard;
    private OptionalNullable<GetCheckoutBoletoPaymentResponse> boleto;
    private OptionalNullable<Boolean> billingAddressEditable;
    private OptionalNullable<GetShippingResponse> shipping;
    private OptionalNullable<Boolean> shippable;
    private OptionalNullable<LocalDateTime> closedAt;
    private OptionalNullable<LocalDateTime> expiresAt;
    private OptionalNullable<String> currency;
    private OptionalNullable<GetCheckoutDebitCardPaymentResponse> debitCard;
    private OptionalNullable<GetCheckoutBankTransferPaymentResponse> bankTransfer;
    private OptionalNullable<List<String>> acceptedBrands;
    private OptionalNullable<GetCheckoutPixPaymentResponse> pix;

    /**
     * Default constructor.
     */
    public GetCheckoutPaymentResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  amount  Integer value for amount.
     * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
     * @param  successUrl  String value for successUrl.
     * @param  paymentUrl  String value for paymentUrl.
     * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
     * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
     * @param  status  String value for status.
     * @param  skipCheckoutSuccessPage  Boolean value for skipCheckoutSuccessPage.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  canceledAt  LocalDateTime value for canceledAt.
     * @param  customerEditable  Boolean value for customerEditable.
     * @param  customer  GetCustomerResponse value for customer.
     * @param  billingaddress  GetAddressResponse value for billingaddress.
     * @param  creditCard  GetCheckoutCreditCardPaymentResponse value for creditCard.
     * @param  boleto  GetCheckoutBoletoPaymentResponse value for boleto.
     * @param  billingAddressEditable  Boolean value for billingAddressEditable.
     * @param  shipping  GetShippingResponse value for shipping.
     * @param  shippable  Boolean value for shippable.
     * @param  closedAt  LocalDateTime value for closedAt.
     * @param  expiresAt  LocalDateTime value for expiresAt.
     * @param  currency  String value for currency.
     * @param  debitCard  GetCheckoutDebitCardPaymentResponse value for debitCard.
     * @param  bankTransfer  GetCheckoutBankTransferPaymentResponse value for bankTransfer.
     * @param  acceptedBrands  List of String value for acceptedBrands.
     * @param  pix  GetCheckoutPixPaymentResponse value for pix.
     */
    public GetCheckoutPaymentResponse(
            String id,
            Integer amount,
            String defaultPaymentMethod,
            String successUrl,
            String paymentUrl,
            String gatewayAffiliationId,
            List<String> acceptedPaymentMethods,
            String status,
            Boolean skipCheckoutSuccessPage,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            LocalDateTime canceledAt,
            Boolean customerEditable,
            GetCustomerResponse customer,
            GetAddressResponse billingaddress,
            GetCheckoutCreditCardPaymentResponse creditCard,
            GetCheckoutBoletoPaymentResponse boleto,
            Boolean billingAddressEditable,
            GetShippingResponse shipping,
            Boolean shippable,
            LocalDateTime closedAt,
            LocalDateTime expiresAt,
            String currency,
            GetCheckoutDebitCardPaymentResponse debitCard,
            GetCheckoutBankTransferPaymentResponse bankTransfer,
            List<String> acceptedBrands,
            GetCheckoutPixPaymentResponse pix) {
        this.id = OptionalNullable.of(id);
        this.amount = OptionalNullable.of(amount);
        this.defaultPaymentMethod = OptionalNullable.of(defaultPaymentMethod);
        this.successUrl = OptionalNullable.of(successUrl);
        this.paymentUrl = OptionalNullable.of(paymentUrl);
        this.gatewayAffiliationId = OptionalNullable.of(gatewayAffiliationId);
        this.acceptedPaymentMethods = OptionalNullable.of(acceptedPaymentMethods);
        this.status = OptionalNullable.of(status);
        this.skipCheckoutSuccessPage = OptionalNullable.of(skipCheckoutSuccessPage);
        this.createdAt = OptionalNullable.of(createdAt);
        this.updatedAt = OptionalNullable.of(updatedAt);
        this.canceledAt = OptionalNullable.of(canceledAt);
        this.customerEditable = OptionalNullable.of(customerEditable);
        this.customer = OptionalNullable.of(customer);
        this.billingaddress = OptionalNullable.of(billingaddress);
        this.creditCard = OptionalNullable.of(creditCard);
        this.boleto = OptionalNullable.of(boleto);
        this.billingAddressEditable = OptionalNullable.of(billingAddressEditable);
        this.shipping = OptionalNullable.of(shipping);
        this.shippable = OptionalNullable.of(shippable);
        this.closedAt = OptionalNullable.of(closedAt);
        this.expiresAt = OptionalNullable.of(expiresAt);
        this.currency = OptionalNullable.of(currency);
        this.debitCard = OptionalNullable.of(debitCard);
        this.bankTransfer = OptionalNullable.of(bankTransfer);
        this.acceptedBrands = OptionalNullable.of(acceptedBrands);
        this.pix = OptionalNullable.of(pix);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetCheckoutPaymentResponse(OptionalNullable<String> id,
            OptionalNullable<Integer> amount, OptionalNullable<String> defaultPaymentMethod,
            OptionalNullable<String> successUrl, OptionalNullable<String> paymentUrl,
            OptionalNullable<String> gatewayAffiliationId,
            OptionalNullable<List<String>> acceptedPaymentMethods, OptionalNullable<String> status,
            OptionalNullable<Boolean> skipCheckoutSuccessPage,
            OptionalNullable<LocalDateTime> createdAt, OptionalNullable<LocalDateTime> updatedAt,
            OptionalNullable<LocalDateTime> canceledAt, OptionalNullable<Boolean> customerEditable,
            OptionalNullable<GetCustomerResponse> customer,
            OptionalNullable<GetAddressResponse> billingaddress,
            OptionalNullable<GetCheckoutCreditCardPaymentResponse> creditCard,
            OptionalNullable<GetCheckoutBoletoPaymentResponse> boleto,
            OptionalNullable<Boolean> billingAddressEditable,
            OptionalNullable<GetShippingResponse> shipping, OptionalNullable<Boolean> shippable,
            OptionalNullable<LocalDateTime> closedAt, OptionalNullable<LocalDateTime> expiresAt,
            OptionalNullable<String> currency,
            OptionalNullable<GetCheckoutDebitCardPaymentResponse> debitCard,
            OptionalNullable<GetCheckoutBankTransferPaymentResponse> bankTransfer,
            OptionalNullable<List<String>> acceptedBrands,
            OptionalNullable<GetCheckoutPixPaymentResponse> pix) {
        this.id = id;
        this.amount = amount;
        this.defaultPaymentMethod = defaultPaymentMethod;
        this.successUrl = successUrl;
        this.paymentUrl = paymentUrl;
        this.gatewayAffiliationId = gatewayAffiliationId;
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        this.status = status;
        this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.canceledAt = canceledAt;
        this.customerEditable = customerEditable;
        this.customer = customer;
        this.billingaddress = billingaddress;
        this.creditCard = creditCard;
        this.boleto = boleto;
        this.billingAddressEditable = billingAddressEditable;
        this.shipping = shipping;
        this.shippable = shippable;
        this.closedAt = closedAt;
        this.expiresAt = expiresAt;
        this.currency = currency;
        this.debitCard = debitCard;
        this.bankTransfer = bankTransfer;
        this.acceptedBrands = acceptedBrands;
        this.pix = pix;
    }

    /**
     * Internal Getter for Id.
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for Amount.
     * Valor em centavos
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * Valor em centavos
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * Valor em centavos
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     * Valor em centavos
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Internal Getter for DefaultPaymentMethod.
     * Meio de pagamento padrão no checkout
     * @return Returns the Internal String
     */
    @JsonGetter("default_payment_method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDefaultPaymentMethod() {
        return this.defaultPaymentMethod;
    }

    /**
     * Getter for DefaultPaymentMethod.
     * Meio de pagamento padrão no checkout
     * @return Returns the String
     */
    public String getDefaultPaymentMethod() {
        return OptionalNullable.getFrom(defaultPaymentMethod);
    }

    /**
     * Setter for DefaultPaymentMethod.
     * Meio de pagamento padrão no checkout
     * @param defaultPaymentMethod Value for String
     */
    @JsonSetter("default_payment_method")
    public void setDefaultPaymentMethod(String defaultPaymentMethod) {
        this.defaultPaymentMethod = OptionalNullable.of(defaultPaymentMethod);
    }

    /**
     * UnSetter for DefaultPaymentMethod.
     * Meio de pagamento padrão no checkout
     */
    public void unsetDefaultPaymentMethod() {
        defaultPaymentMethod = null;
    }

    /**
     * Internal Getter for SuccessUrl.
     * Url de redirecionamento de sucesso após o checkou
     * @return Returns the Internal String
     */
    @JsonGetter("success_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSuccessUrl() {
        return this.successUrl;
    }

    /**
     * Getter for SuccessUrl.
     * Url de redirecionamento de sucesso após o checkou
     * @return Returns the String
     */
    public String getSuccessUrl() {
        return OptionalNullable.getFrom(successUrl);
    }

    /**
     * Setter for SuccessUrl.
     * Url de redirecionamento de sucesso após o checkou
     * @param successUrl Value for String
     */
    @JsonSetter("success_url")
    public void setSuccessUrl(String successUrl) {
        this.successUrl = OptionalNullable.of(successUrl);
    }

    /**
     * UnSetter for SuccessUrl.
     * Url de redirecionamento de sucesso após o checkou
     */
    public void unsetSuccessUrl() {
        successUrl = null;
    }

    /**
     * Internal Getter for PaymentUrl.
     * Url para pagamento usando o checkout
     * @return Returns the Internal String
     */
    @JsonGetter("payment_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentUrl() {
        return this.paymentUrl;
    }

    /**
     * Getter for PaymentUrl.
     * Url para pagamento usando o checkout
     * @return Returns the String
     */
    public String getPaymentUrl() {
        return OptionalNullable.getFrom(paymentUrl);
    }

    /**
     * Setter for PaymentUrl.
     * Url para pagamento usando o checkout
     * @param paymentUrl Value for String
     */
    @JsonSetter("payment_url")
    public void setPaymentUrl(String paymentUrl) {
        this.paymentUrl = OptionalNullable.of(paymentUrl);
    }

    /**
     * UnSetter for PaymentUrl.
     * Url para pagamento usando o checkout
     */
    public void unsetPaymentUrl() {
        paymentUrl = null;
    }

    /**
     * Internal Getter for GatewayAffiliationId.
     * Código da afiliação onde o pagamento será processado no gateway
     * @return Returns the Internal String
     */
    @JsonGetter("gateway_affiliation_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewayAffiliationId() {
        return this.gatewayAffiliationId;
    }

    /**
     * Getter for GatewayAffiliationId.
     * Código da afiliação onde o pagamento será processado no gateway
     * @return Returns the String
     */
    public String getGatewayAffiliationId() {
        return OptionalNullable.getFrom(gatewayAffiliationId);
    }

    /**
     * Setter for GatewayAffiliationId.
     * Código da afiliação onde o pagamento será processado no gateway
     * @param gatewayAffiliationId Value for String
     */
    @JsonSetter("gateway_affiliation_id")
    public void setGatewayAffiliationId(String gatewayAffiliationId) {
        this.gatewayAffiliationId = OptionalNullable.of(gatewayAffiliationId);
    }

    /**
     * UnSetter for GatewayAffiliationId.
     * Código da afiliação onde o pagamento será processado no gateway
     */
    public void unsetGatewayAffiliationId() {
        gatewayAffiliationId = null;
    }

    /**
     * Internal Getter for AcceptedPaymentMethods.
     * Meios de pagamento aceitos no checkout
     * @return Returns the Internal List of String
     */
    @JsonGetter("accepted_payment_methods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetAcceptedPaymentMethods() {
        return this.acceptedPaymentMethods;
    }

    /**
     * Getter for AcceptedPaymentMethods.
     * Meios de pagamento aceitos no checkout
     * @return Returns the List of String
     */
    public List<String> getAcceptedPaymentMethods() {
        return OptionalNullable.getFrom(acceptedPaymentMethods);
    }

    /**
     * Setter for AcceptedPaymentMethods.
     * Meios de pagamento aceitos no checkout
     * @param acceptedPaymentMethods Value for List of String
     */
    @JsonSetter("accepted_payment_methods")
    public void setAcceptedPaymentMethods(List<String> acceptedPaymentMethods) {
        this.acceptedPaymentMethods = OptionalNullable.of(acceptedPaymentMethods);
    }

    /**
     * UnSetter for AcceptedPaymentMethods.
     * Meios de pagamento aceitos no checkout
     */
    public void unsetAcceptedPaymentMethods() {
        acceptedPaymentMethods = null;
    }

    /**
     * Internal Getter for Status.
     * Status do checkout
     * @return Returns the Internal String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * Status do checkout
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * Status do checkout
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     * Status do checkout
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for SkipCheckoutSuccessPage.
     * Pular tela de sucesso pós-pagamento?
     * @return Returns the Internal Boolean
     */
    @JsonGetter("skip_checkout_success_page")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetSkipCheckoutSuccessPage() {
        return this.skipCheckoutSuccessPage;
    }

    /**
     * Getter for SkipCheckoutSuccessPage.
     * Pular tela de sucesso pós-pagamento?
     * @return Returns the Boolean
     */
    public Boolean getSkipCheckoutSuccessPage() {
        return OptionalNullable.getFrom(skipCheckoutSuccessPage);
    }

    /**
     * Setter for SkipCheckoutSuccessPage.
     * Pular tela de sucesso pós-pagamento?
     * @param skipCheckoutSuccessPage Value for Boolean
     */
    @JsonSetter("skip_checkout_success_page")
    public void setSkipCheckoutSuccessPage(Boolean skipCheckoutSuccessPage) {
        this.skipCheckoutSuccessPage = OptionalNullable.of(skipCheckoutSuccessPage);
    }

    /**
     * UnSetter for SkipCheckoutSuccessPage.
     * Pular tela de sucesso pós-pagamento?
     */
    public void unsetSkipCheckoutSuccessPage() {
        skipCheckoutSuccessPage = null;
    }

    /**
     * Internal Getter for CreatedAt.
     * Data de criação
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for CreatedAt.
     * Data de criação
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCreatedAt() {
        return OptionalNullable.getFrom(createdAt);
    }

    /**
     * Setter for CreatedAt.
     * Data de criação
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = OptionalNullable.of(createdAt);
    }

    /**
     * UnSetter for CreatedAt.
     * Data de criação
     */
    public void unsetCreatedAt() {
        createdAt = null;
    }

    /**
     * Internal Getter for UpdatedAt.
     * Data de atualização
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for UpdatedAt.
     * Data de atualização
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getUpdatedAt() {
        return OptionalNullable.getFrom(updatedAt);
    }

    /**
     * Setter for UpdatedAt.
     * Data de atualização
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = OptionalNullable.of(updatedAt);
    }

    /**
     * UnSetter for UpdatedAt.
     * Data de atualização
     */
    public void unsetUpdatedAt() {
        updatedAt = null;
    }

    /**
     * Internal Getter for CanceledAt.
     * Data de cancelamento
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("canceled_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCanceledAt() {
        return this.canceledAt;
    }

    /**
     * Getter for CanceledAt.
     * Data de cancelamento
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCanceledAt() {
        return OptionalNullable.getFrom(canceledAt);
    }

    /**
     * Setter for CanceledAt.
     * Data de cancelamento
     * @param canceledAt Value for LocalDateTime
     */
    @JsonSetter("canceled_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCanceledAt(LocalDateTime canceledAt) {
        this.canceledAt = OptionalNullable.of(canceledAt);
    }

    /**
     * UnSetter for CanceledAt.
     * Data de cancelamento
     */
    public void unsetCanceledAt() {
        canceledAt = null;
    }

    /**
     * Internal Getter for CustomerEditable.
     * Torna o objeto customer editável
     * @return Returns the Internal Boolean
     */
    @JsonGetter("customer_editable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetCustomerEditable() {
        return this.customerEditable;
    }

    /**
     * Getter for CustomerEditable.
     * Torna o objeto customer editável
     * @return Returns the Boolean
     */
    public Boolean getCustomerEditable() {
        return OptionalNullable.getFrom(customerEditable);
    }

    /**
     * Setter for CustomerEditable.
     * Torna o objeto customer editável
     * @param customerEditable Value for Boolean
     */
    @JsonSetter("customer_editable")
    public void setCustomerEditable(Boolean customerEditable) {
        this.customerEditable = OptionalNullable.of(customerEditable);
    }

    /**
     * UnSetter for CustomerEditable.
     * Torna o objeto customer editável
     */
    public void unsetCustomerEditable() {
        customerEditable = null;
    }

    /**
     * Internal Getter for Customer.
     * Dados do comprador
     * @return Returns the Internal GetCustomerResponse
     */
    @JsonGetter("customer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCustomerResponse> internalGetCustomer() {
        return this.customer;
    }

    /**
     * Getter for Customer.
     * Dados do comprador
     * @return Returns the GetCustomerResponse
     */
    public GetCustomerResponse getCustomer() {
        return OptionalNullable.getFrom(customer);
    }

    /**
     * Setter for Customer.
     * Dados do comprador
     * @param customer Value for GetCustomerResponse
     */
    @JsonSetter("customer")
    public void setCustomer(GetCustomerResponse customer) {
        this.customer = OptionalNullable.of(customer);
    }

    /**
     * UnSetter for Customer.
     * Dados do comprador
     */
    public void unsetCustomer() {
        customer = null;
    }

    /**
     * Internal Getter for Billingaddress.
     * Dados do endereço de cobrança
     * @return Returns the Internal GetAddressResponse
     */
    @JsonGetter("billingaddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetAddressResponse> internalGetBillingaddress() {
        return this.billingaddress;
    }

    /**
     * Getter for Billingaddress.
     * Dados do endereço de cobrança
     * @return Returns the GetAddressResponse
     */
    public GetAddressResponse getBillingaddress() {
        return OptionalNullable.getFrom(billingaddress);
    }

    /**
     * Setter for Billingaddress.
     * Dados do endereço de cobrança
     * @param billingaddress Value for GetAddressResponse
     */
    @JsonSetter("billingaddress")
    public void setBillingaddress(GetAddressResponse billingaddress) {
        this.billingaddress = OptionalNullable.of(billingaddress);
    }

    /**
     * UnSetter for Billingaddress.
     * Dados do endereço de cobrança
     */
    public void unsetBillingaddress() {
        billingaddress = null;
    }

    /**
     * Internal Getter for CreditCard.
     * Configurações de cartão de crédito
     * @return Returns the Internal GetCheckoutCreditCardPaymentResponse
     */
    @JsonGetter("credit_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutCreditCardPaymentResponse> internalGetCreditCard() {
        return this.creditCard;
    }

    /**
     * Getter for CreditCard.
     * Configurações de cartão de crédito
     * @return Returns the GetCheckoutCreditCardPaymentResponse
     */
    public GetCheckoutCreditCardPaymentResponse getCreditCard() {
        return OptionalNullable.getFrom(creditCard);
    }

    /**
     * Setter for CreditCard.
     * Configurações de cartão de crédito
     * @param creditCard Value for GetCheckoutCreditCardPaymentResponse
     */
    @JsonSetter("credit_card")
    public void setCreditCard(GetCheckoutCreditCardPaymentResponse creditCard) {
        this.creditCard = OptionalNullable.of(creditCard);
    }

    /**
     * UnSetter for CreditCard.
     * Configurações de cartão de crédito
     */
    public void unsetCreditCard() {
        creditCard = null;
    }

    /**
     * Internal Getter for Boleto.
     * Configurações de boleto
     * @return Returns the Internal GetCheckoutBoletoPaymentResponse
     */
    @JsonGetter("boleto")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutBoletoPaymentResponse> internalGetBoleto() {
        return this.boleto;
    }

    /**
     * Getter for Boleto.
     * Configurações de boleto
     * @return Returns the GetCheckoutBoletoPaymentResponse
     */
    public GetCheckoutBoletoPaymentResponse getBoleto() {
        return OptionalNullable.getFrom(boleto);
    }

    /**
     * Setter for Boleto.
     * Configurações de boleto
     * @param boleto Value for GetCheckoutBoletoPaymentResponse
     */
    @JsonSetter("boleto")
    public void setBoleto(GetCheckoutBoletoPaymentResponse boleto) {
        this.boleto = OptionalNullable.of(boleto);
    }

    /**
     * UnSetter for Boleto.
     * Configurações de boleto
     */
    public void unsetBoleto() {
        boleto = null;
    }

    /**
     * Internal Getter for BillingAddressEditable.
     * Indica se o billing address poderá ser editado
     * @return Returns the Internal Boolean
     */
    @JsonGetter("billing_address_editable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetBillingAddressEditable() {
        return this.billingAddressEditable;
    }

    /**
     * Getter for BillingAddressEditable.
     * Indica se o billing address poderá ser editado
     * @return Returns the Boolean
     */
    public Boolean getBillingAddressEditable() {
        return OptionalNullable.getFrom(billingAddressEditable);
    }

    /**
     * Setter for BillingAddressEditable.
     * Indica se o billing address poderá ser editado
     * @param billingAddressEditable Value for Boolean
     */
    @JsonSetter("billing_address_editable")
    public void setBillingAddressEditable(Boolean billingAddressEditable) {
        this.billingAddressEditable = OptionalNullable.of(billingAddressEditable);
    }

    /**
     * UnSetter for BillingAddressEditable.
     * Indica se o billing address poderá ser editado
     */
    public void unsetBillingAddressEditable() {
        billingAddressEditable = null;
    }

    /**
     * Internal Getter for Shipping.
     * Configurações de entrega
     * @return Returns the Internal GetShippingResponse
     */
    @JsonGetter("shipping")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetShippingResponse> internalGetShipping() {
        return this.shipping;
    }

    /**
     * Getter for Shipping.
     * Configurações de entrega
     * @return Returns the GetShippingResponse
     */
    public GetShippingResponse getShipping() {
        return OptionalNullable.getFrom(shipping);
    }

    /**
     * Setter for Shipping.
     * Configurações de entrega
     * @param shipping Value for GetShippingResponse
     */
    @JsonSetter("shipping")
    public void setShipping(GetShippingResponse shipping) {
        this.shipping = OptionalNullable.of(shipping);
    }

    /**
     * UnSetter for Shipping.
     * Configurações de entrega
     */
    public void unsetShipping() {
        shipping = null;
    }

    /**
     * Internal Getter for Shippable.
     * Indica se possui entrega
     * @return Returns the Internal Boolean
     */
    @JsonGetter("shippable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetShippable() {
        return this.shippable;
    }

    /**
     * Getter for Shippable.
     * Indica se possui entrega
     * @return Returns the Boolean
     */
    public Boolean getShippable() {
        return OptionalNullable.getFrom(shippable);
    }

    /**
     * Setter for Shippable.
     * Indica se possui entrega
     * @param shippable Value for Boolean
     */
    @JsonSetter("shippable")
    public void setShippable(Boolean shippable) {
        this.shippable = OptionalNullable.of(shippable);
    }

    /**
     * UnSetter for Shippable.
     * Indica se possui entrega
     */
    public void unsetShippable() {
        shippable = null;
    }

    /**
     * Internal Getter for ClosedAt.
     * Data de fechamento
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("closed_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetClosedAt() {
        return this.closedAt;
    }

    /**
     * Getter for ClosedAt.
     * Data de fechamento
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getClosedAt() {
        return OptionalNullable.getFrom(closedAt);
    }

    /**
     * Setter for ClosedAt.
     * Data de fechamento
     * @param closedAt Value for LocalDateTime
     */
    @JsonSetter("closed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setClosedAt(LocalDateTime closedAt) {
        this.closedAt = OptionalNullable.of(closedAt);
    }

    /**
     * UnSetter for ClosedAt.
     * Data de fechamento
     */
    public void unsetClosedAt() {
        closedAt = null;
    }

    /**
     * Internal Getter for ExpiresAt.
     * Data de expiração
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("expires_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Getter for ExpiresAt.
     * Data de expiração
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getExpiresAt() {
        return OptionalNullable.getFrom(expiresAt);
    }

    /**
     * Setter for ExpiresAt.
     * Data de expiração
     * @param expiresAt Value for LocalDateTime
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = OptionalNullable.of(expiresAt);
    }

    /**
     * UnSetter for ExpiresAt.
     * Data de expiração
     */
    public void unsetExpiresAt() {
        expiresAt = null;
    }

    /**
     * Internal Getter for Currency.
     * Moeda
     * @return Returns the Internal String
     */
    @JsonGetter("currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrency() {
        return this.currency;
    }

    /**
     * Getter for Currency.
     * Moeda
     * @return Returns the String
     */
    public String getCurrency() {
        return OptionalNullable.getFrom(currency);
    }

    /**
     * Setter for Currency.
     * Moeda
     * @param currency Value for String
     */
    @JsonSetter("currency")
    public void setCurrency(String currency) {
        this.currency = OptionalNullable.of(currency);
    }

    /**
     * UnSetter for Currency.
     * Moeda
     */
    public void unsetCurrency() {
        currency = null;
    }

    /**
     * Internal Getter for DebitCard.
     * Configurações de cartão de débito
     * @return Returns the Internal GetCheckoutDebitCardPaymentResponse
     */
    @JsonGetter("debit_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutDebitCardPaymentResponse> internalGetDebitCard() {
        return this.debitCard;
    }

    /**
     * Getter for DebitCard.
     * Configurações de cartão de débito
     * @return Returns the GetCheckoutDebitCardPaymentResponse
     */
    public GetCheckoutDebitCardPaymentResponse getDebitCard() {
        return OptionalNullable.getFrom(debitCard);
    }

    /**
     * Setter for DebitCard.
     * Configurações de cartão de débito
     * @param debitCard Value for GetCheckoutDebitCardPaymentResponse
     */
    @JsonSetter("debit_card")
    public void setDebitCard(GetCheckoutDebitCardPaymentResponse debitCard) {
        this.debitCard = OptionalNullable.of(debitCard);
    }

    /**
     * UnSetter for DebitCard.
     * Configurações de cartão de débito
     */
    public void unsetDebitCard() {
        debitCard = null;
    }

    /**
     * Internal Getter for BankTransfer.
     * Bank transfer payment response
     * @return Returns the Internal GetCheckoutBankTransferPaymentResponse
     */
    @JsonGetter("bank_transfer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutBankTransferPaymentResponse> internalGetBankTransfer() {
        return this.bankTransfer;
    }

    /**
     * Getter for BankTransfer.
     * Bank transfer payment response
     * @return Returns the GetCheckoutBankTransferPaymentResponse
     */
    public GetCheckoutBankTransferPaymentResponse getBankTransfer() {
        return OptionalNullable.getFrom(bankTransfer);
    }

    /**
     * Setter for BankTransfer.
     * Bank transfer payment response
     * @param bankTransfer Value for GetCheckoutBankTransferPaymentResponse
     */
    @JsonSetter("bank_transfer")
    public void setBankTransfer(GetCheckoutBankTransferPaymentResponse bankTransfer) {
        this.bankTransfer = OptionalNullable.of(bankTransfer);
    }

    /**
     * UnSetter for BankTransfer.
     * Bank transfer payment response
     */
    public void unsetBankTransfer() {
        bankTransfer = null;
    }

    /**
     * Internal Getter for AcceptedBrands.
     * Accepted Brands
     * @return Returns the Internal List of String
     */
    @JsonGetter("accepted_brands")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetAcceptedBrands() {
        return this.acceptedBrands;
    }

    /**
     * Getter for AcceptedBrands.
     * Accepted Brands
     * @return Returns the List of String
     */
    public List<String> getAcceptedBrands() {
        return OptionalNullable.getFrom(acceptedBrands);
    }

    /**
     * Setter for AcceptedBrands.
     * Accepted Brands
     * @param acceptedBrands Value for List of String
     */
    @JsonSetter("accepted_brands")
    public void setAcceptedBrands(List<String> acceptedBrands) {
        this.acceptedBrands = OptionalNullable.of(acceptedBrands);
    }

    /**
     * UnSetter for AcceptedBrands.
     * Accepted Brands
     */
    public void unsetAcceptedBrands() {
        acceptedBrands = null;
    }

    /**
     * Internal Getter for Pix.
     * Pix payment response
     * @return Returns the Internal GetCheckoutPixPaymentResponse
     */
    @JsonGetter("pix")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCheckoutPixPaymentResponse> internalGetPix() {
        return this.pix;
    }

    /**
     * Getter for Pix.
     * Pix payment response
     * @return Returns the GetCheckoutPixPaymentResponse
     */
    public GetCheckoutPixPaymentResponse getPix() {
        return OptionalNullable.getFrom(pix);
    }

    /**
     * Setter for Pix.
     * Pix payment response
     * @param pix Value for GetCheckoutPixPaymentResponse
     */
    @JsonSetter("pix")
    public void setPix(GetCheckoutPixPaymentResponse pix) {
        this.pix = OptionalNullable.of(pix);
    }

    /**
     * UnSetter for Pix.
     * Pix payment response
     */
    public void unsetPix() {
        pix = null;
    }

    /**
     * Converts this GetCheckoutPaymentResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetCheckoutPaymentResponse [" + "id=" + id + ", amount=" + amount
                + ", defaultPaymentMethod=" + defaultPaymentMethod + ", successUrl=" + successUrl
                + ", paymentUrl=" + paymentUrl + ", gatewayAffiliationId=" + gatewayAffiliationId
                + ", acceptedPaymentMethods=" + acceptedPaymentMethods + ", status=" + status
                + ", skipCheckoutSuccessPage=" + skipCheckoutSuccessPage + ", createdAt="
                + createdAt + ", updatedAt=" + updatedAt + ", canceledAt=" + canceledAt
                + ", customerEditable=" + customerEditable + ", customer=" + customer
                + ", billingaddress=" + billingaddress + ", creditCard=" + creditCard + ", boleto="
                + boleto + ", billingAddressEditable=" + billingAddressEditable + ", shipping="
                + shipping + ", shippable=" + shippable + ", closedAt=" + closedAt + ", expiresAt="
                + expiresAt + ", currency=" + currency + ", debitCard=" + debitCard
                + ", bankTransfer=" + bankTransfer + ", acceptedBrands=" + acceptedBrands + ", pix="
                + pix + "]";
    }

    /**
     * Builds a new {@link GetCheckoutPaymentResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetCheckoutPaymentResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.amount = internalGetAmount();
        builder.defaultPaymentMethod = internalGetDefaultPaymentMethod();
        builder.successUrl = internalGetSuccessUrl();
        builder.paymentUrl = internalGetPaymentUrl();
        builder.gatewayAffiliationId = internalGetGatewayAffiliationId();
        builder.acceptedPaymentMethods = internalGetAcceptedPaymentMethods();
        builder.status = internalGetStatus();
        builder.skipCheckoutSuccessPage = internalGetSkipCheckoutSuccessPage();
        builder.createdAt = internalGetCreatedAt();
        builder.updatedAt = internalGetUpdatedAt();
        builder.canceledAt = internalGetCanceledAt();
        builder.customerEditable = internalGetCustomerEditable();
        builder.customer = internalGetCustomer();
        builder.billingaddress = internalGetBillingaddress();
        builder.creditCard = internalGetCreditCard();
        builder.boleto = internalGetBoleto();
        builder.billingAddressEditable = internalGetBillingAddressEditable();
        builder.shipping = internalGetShipping();
        builder.shippable = internalGetShippable();
        builder.closedAt = internalGetClosedAt();
        builder.expiresAt = internalGetExpiresAt();
        builder.currency = internalGetCurrency();
        builder.debitCard = internalGetDebitCard();
        builder.bankTransfer = internalGetBankTransfer();
        builder.acceptedBrands = internalGetAcceptedBrands();
        builder.pix = internalGetPix();
        return builder;
    }

    /**
     * Class to build instances of {@link GetCheckoutPaymentResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<Integer> amount;
        private OptionalNullable<String> defaultPaymentMethod;
        private OptionalNullable<String> successUrl;
        private OptionalNullable<String> paymentUrl;
        private OptionalNullable<String> gatewayAffiliationId;
        private OptionalNullable<List<String>> acceptedPaymentMethods;
        private OptionalNullable<String> status;
        private OptionalNullable<Boolean> skipCheckoutSuccessPage;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<LocalDateTime> updatedAt;
        private OptionalNullable<LocalDateTime> canceledAt;
        private OptionalNullable<Boolean> customerEditable;
        private OptionalNullable<GetCustomerResponse> customer;
        private OptionalNullable<GetAddressResponse> billingaddress;
        private OptionalNullable<GetCheckoutCreditCardPaymentResponse> creditCard;
        private OptionalNullable<GetCheckoutBoletoPaymentResponse> boleto;
        private OptionalNullable<Boolean> billingAddressEditable;
        private OptionalNullable<GetShippingResponse> shipping;
        private OptionalNullable<Boolean> shippable;
        private OptionalNullable<LocalDateTime> closedAt;
        private OptionalNullable<LocalDateTime> expiresAt;
        private OptionalNullable<String> currency;
        private OptionalNullable<GetCheckoutDebitCardPaymentResponse> debitCard;
        private OptionalNullable<GetCheckoutBankTransferPaymentResponse> bankTransfer;
        private OptionalNullable<List<String>> acceptedBrands;
        private OptionalNullable<GetCheckoutPixPaymentResponse> pix;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for defaultPaymentMethod.
         * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
         * @return Builder
         */
        public Builder defaultPaymentMethod(String defaultPaymentMethod) {
            this.defaultPaymentMethod = OptionalNullable.of(defaultPaymentMethod);
            return this;
        }

        /**
         * UnSetter for defaultPaymentMethod.
         * @return Builder
         */
        public Builder unsetDefaultPaymentMethod() {
            defaultPaymentMethod = null;
            return this;
        }

        /**
         * Setter for successUrl.
         * @param  successUrl  String value for successUrl.
         * @return Builder
         */
        public Builder successUrl(String successUrl) {
            this.successUrl = OptionalNullable.of(successUrl);
            return this;
        }

        /**
         * UnSetter for successUrl.
         * @return Builder
         */
        public Builder unsetSuccessUrl() {
            successUrl = null;
            return this;
        }

        /**
         * Setter for paymentUrl.
         * @param  paymentUrl  String value for paymentUrl.
         * @return Builder
         */
        public Builder paymentUrl(String paymentUrl) {
            this.paymentUrl = OptionalNullable.of(paymentUrl);
            return this;
        }

        /**
         * UnSetter for paymentUrl.
         * @return Builder
         */
        public Builder unsetPaymentUrl() {
            paymentUrl = null;
            return this;
        }

        /**
         * Setter for gatewayAffiliationId.
         * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
         * @return Builder
         */
        public Builder gatewayAffiliationId(String gatewayAffiliationId) {
            this.gatewayAffiliationId = OptionalNullable.of(gatewayAffiliationId);
            return this;
        }

        /**
         * UnSetter for gatewayAffiliationId.
         * @return Builder
         */
        public Builder unsetGatewayAffiliationId() {
            gatewayAffiliationId = null;
            return this;
        }

        /**
         * Setter for acceptedPaymentMethods.
         * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
         * @return Builder
         */
        public Builder acceptedPaymentMethods(List<String> acceptedPaymentMethods) {
            this.acceptedPaymentMethods = OptionalNullable.of(acceptedPaymentMethods);
            return this;
        }

        /**
         * UnSetter for acceptedPaymentMethods.
         * @return Builder
         */
        public Builder unsetAcceptedPaymentMethods() {
            acceptedPaymentMethods = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for skipCheckoutSuccessPage.
         * @param  skipCheckoutSuccessPage  Boolean value for skipCheckoutSuccessPage.
         * @return Builder
         */
        public Builder skipCheckoutSuccessPage(Boolean skipCheckoutSuccessPage) {
            this.skipCheckoutSuccessPage = OptionalNullable.of(skipCheckoutSuccessPage);
            return this;
        }

        /**
         * UnSetter for skipCheckoutSuccessPage.
         * @return Builder
         */
        public Builder unsetSkipCheckoutSuccessPage() {
            skipCheckoutSuccessPage = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = OptionalNullable.of(updatedAt);
            return this;
        }

        /**
         * UnSetter for updatedAt.
         * @return Builder
         */
        public Builder unsetUpdatedAt() {
            updatedAt = null;
            return this;
        }

        /**
         * Setter for canceledAt.
         * @param  canceledAt  LocalDateTime value for canceledAt.
         * @return Builder
         */
        public Builder canceledAt(LocalDateTime canceledAt) {
            this.canceledAt = OptionalNullable.of(canceledAt);
            return this;
        }

        /**
         * UnSetter for canceledAt.
         * @return Builder
         */
        public Builder unsetCanceledAt() {
            canceledAt = null;
            return this;
        }

        /**
         * Setter for customerEditable.
         * @param  customerEditable  Boolean value for customerEditable.
         * @return Builder
         */
        public Builder customerEditable(Boolean customerEditable) {
            this.customerEditable = OptionalNullable.of(customerEditable);
            return this;
        }

        /**
         * UnSetter for customerEditable.
         * @return Builder
         */
        public Builder unsetCustomerEditable() {
            customerEditable = null;
            return this;
        }

        /**
         * Setter for customer.
         * @param  customer  GetCustomerResponse value for customer.
         * @return Builder
         */
        public Builder customer(GetCustomerResponse customer) {
            this.customer = OptionalNullable.of(customer);
            return this;
        }

        /**
         * UnSetter for customer.
         * @return Builder
         */
        public Builder unsetCustomer() {
            customer = null;
            return this;
        }

        /**
         * Setter for billingaddress.
         * @param  billingaddress  GetAddressResponse value for billingaddress.
         * @return Builder
         */
        public Builder billingaddress(GetAddressResponse billingaddress) {
            this.billingaddress = OptionalNullable.of(billingaddress);
            return this;
        }

        /**
         * UnSetter for billingaddress.
         * @return Builder
         */
        public Builder unsetBillingaddress() {
            billingaddress = null;
            return this;
        }

        /**
         * Setter for creditCard.
         * @param  creditCard  GetCheckoutCreditCardPaymentResponse value for creditCard.
         * @return Builder
         */
        public Builder creditCard(GetCheckoutCreditCardPaymentResponse creditCard) {
            this.creditCard = OptionalNullable.of(creditCard);
            return this;
        }

        /**
         * UnSetter for creditCard.
         * @return Builder
         */
        public Builder unsetCreditCard() {
            creditCard = null;
            return this;
        }

        /**
         * Setter for boleto.
         * @param  boleto  GetCheckoutBoletoPaymentResponse value for boleto.
         * @return Builder
         */
        public Builder boleto(GetCheckoutBoletoPaymentResponse boleto) {
            this.boleto = OptionalNullable.of(boleto);
            return this;
        }

        /**
         * UnSetter for boleto.
         * @return Builder
         */
        public Builder unsetBoleto() {
            boleto = null;
            return this;
        }

        /**
         * Setter for billingAddressEditable.
         * @param  billingAddressEditable  Boolean value for billingAddressEditable.
         * @return Builder
         */
        public Builder billingAddressEditable(Boolean billingAddressEditable) {
            this.billingAddressEditable = OptionalNullable.of(billingAddressEditable);
            return this;
        }

        /**
         * UnSetter for billingAddressEditable.
         * @return Builder
         */
        public Builder unsetBillingAddressEditable() {
            billingAddressEditable = null;
            return this;
        }

        /**
         * Setter for shipping.
         * @param  shipping  GetShippingResponse value for shipping.
         * @return Builder
         */
        public Builder shipping(GetShippingResponse shipping) {
            this.shipping = OptionalNullable.of(shipping);
            return this;
        }

        /**
         * UnSetter for shipping.
         * @return Builder
         */
        public Builder unsetShipping() {
            shipping = null;
            return this;
        }

        /**
         * Setter for shippable.
         * @param  shippable  Boolean value for shippable.
         * @return Builder
         */
        public Builder shippable(Boolean shippable) {
            this.shippable = OptionalNullable.of(shippable);
            return this;
        }

        /**
         * UnSetter for shippable.
         * @return Builder
         */
        public Builder unsetShippable() {
            shippable = null;
            return this;
        }

        /**
         * Setter for closedAt.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @return Builder
         */
        public Builder closedAt(LocalDateTime closedAt) {
            this.closedAt = OptionalNullable.of(closedAt);
            return this;
        }

        /**
         * UnSetter for closedAt.
         * @return Builder
         */
        public Builder unsetClosedAt() {
            closedAt = null;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(LocalDateTime expiresAt) {
            this.expiresAt = OptionalNullable.of(expiresAt);
            return this;
        }

        /**
         * UnSetter for expiresAt.
         * @return Builder
         */
        public Builder unsetExpiresAt() {
            expiresAt = null;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = OptionalNullable.of(currency);
            return this;
        }

        /**
         * UnSetter for currency.
         * @return Builder
         */
        public Builder unsetCurrency() {
            currency = null;
            return this;
        }

        /**
         * Setter for debitCard.
         * @param  debitCard  GetCheckoutDebitCardPaymentResponse value for debitCard.
         * @return Builder
         */
        public Builder debitCard(GetCheckoutDebitCardPaymentResponse debitCard) {
            this.debitCard = OptionalNullable.of(debitCard);
            return this;
        }

        /**
         * UnSetter for debitCard.
         * @return Builder
         */
        public Builder unsetDebitCard() {
            debitCard = null;
            return this;
        }

        /**
         * Setter for bankTransfer.
         * @param  bankTransfer  GetCheckoutBankTransferPaymentResponse value for bankTransfer.
         * @return Builder
         */
        public Builder bankTransfer(GetCheckoutBankTransferPaymentResponse bankTransfer) {
            this.bankTransfer = OptionalNullable.of(bankTransfer);
            return this;
        }

        /**
         * UnSetter for bankTransfer.
         * @return Builder
         */
        public Builder unsetBankTransfer() {
            bankTransfer = null;
            return this;
        }

        /**
         * Setter for acceptedBrands.
         * @param  acceptedBrands  List of String value for acceptedBrands.
         * @return Builder
         */
        public Builder acceptedBrands(List<String> acceptedBrands) {
            this.acceptedBrands = OptionalNullable.of(acceptedBrands);
            return this;
        }

        /**
         * UnSetter for acceptedBrands.
         * @return Builder
         */
        public Builder unsetAcceptedBrands() {
            acceptedBrands = null;
            return this;
        }

        /**
         * Setter for pix.
         * @param  pix  GetCheckoutPixPaymentResponse value for pix.
         * @return Builder
         */
        public Builder pix(GetCheckoutPixPaymentResponse pix) {
            this.pix = OptionalNullable.of(pix);
            return this;
        }

        /**
         * UnSetter for pix.
         * @return Builder
         */
        public Builder unsetPix() {
            pix = null;
            return this;
        }

        /**
         * Builds a new {@link GetCheckoutPaymentResponse} object using the set fields.
         * @return {@link GetCheckoutPaymentResponse}
         */
        public GetCheckoutPaymentResponse build() {
            return new GetCheckoutPaymentResponse(id, amount, defaultPaymentMethod, successUrl,
                    paymentUrl, gatewayAffiliationId, acceptedPaymentMethods, status,
                    skipCheckoutSuccessPage, createdAt, updatedAt, canceledAt, customerEditable,
                    customer, billingaddress, creditCard, boleto, billingAddressEditable, shipping,
                    shippable, closedAt, expiresAt, currency, debitCard, bankTransfer,
                    acceptedBrands, pix);
        }
    }
}
