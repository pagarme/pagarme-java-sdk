/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetSubscriptionResponse type.
 */
public class GetSubscriptionResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<String> code;
    private OptionalNullable<LocalDateTime> startAt;
    private OptionalNullable<String> interval;
    private OptionalNullable<Integer> intervalCount;
    private OptionalNullable<String> billingType;
    private OptionalNullable<GetPeriodResponse> currentCycle;
    private OptionalNullable<String> paymentMethod;
    private OptionalNullable<String> currency;
    private OptionalNullable<Integer> installments;
    private OptionalNullable<String> status;
    private OptionalNullable<LocalDateTime> createdAt;
    private OptionalNullable<LocalDateTime> updatedAt;
    private OptionalNullable<GetCustomerResponse> customer;
    private OptionalNullable<GetCardResponse> card;
    private OptionalNullable<List<GetSubscriptionItemResponse>> items;
    private OptionalNullable<String> statementDescriptor;
    private OptionalNullable<Map<String, String>> metadata;
    private OptionalNullable<GetSetupResponse> setup;
    private OptionalNullable<String> gatewayAffiliationId;
    private OptionalNullable<LocalDateTime> nextBillingAt;
    private OptionalNullable<Integer> billingDay;
    private OptionalNullable<Integer> minimumPrice;
    private OptionalNullable<LocalDateTime> canceledAt;
    private OptionalNullable<List<GetDiscountResponse>> discounts;
    private OptionalNullable<List<GetIncrementResponse>> increments;
    private OptionalNullable<Integer> boletoDueDays;
    private OptionalNullable<GetSubscriptionSplitResponse> split;
    private OptionalNullable<GetSubscriptionBoletoResponse> boleto;
    private OptionalNullable<Boolean> manualBilling;

    /**
     * Default constructor.
     */
    public GetSubscriptionResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  code  String value for code.
     * @param  startAt  LocalDateTime value for startAt.
     * @param  interval  String value for interval.
     * @param  intervalCount  Integer value for intervalCount.
     * @param  billingType  String value for billingType.
     * @param  currentCycle  GetPeriodResponse value for currentCycle.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  currency  String value for currency.
     * @param  installments  Integer value for installments.
     * @param  status  String value for status.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  customer  GetCustomerResponse value for customer.
     * @param  card  GetCardResponse value for card.
     * @param  items  List of GetSubscriptionItemResponse value for items.
     * @param  statementDescriptor  String value for statementDescriptor.
     * @param  metadata  Map of String, value for metadata.
     * @param  setup  GetSetupResponse value for setup.
     * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
     * @param  nextBillingAt  LocalDateTime value for nextBillingAt.
     * @param  billingDay  Integer value for billingDay.
     * @param  minimumPrice  Integer value for minimumPrice.
     * @param  canceledAt  LocalDateTime value for canceledAt.
     * @param  discounts  List of GetDiscountResponse value for discounts.
     * @param  increments  List of GetIncrementResponse value for increments.
     * @param  boletoDueDays  Integer value for boletoDueDays.
     * @param  split  GetSubscriptionSplitResponse value for split.
     * @param  boleto  GetSubscriptionBoletoResponse value for boleto.
     * @param  manualBilling  Boolean value for manualBilling.
     */
    public GetSubscriptionResponse(
            String id,
            String code,
            LocalDateTime startAt,
            String interval,
            Integer intervalCount,
            String billingType,
            GetPeriodResponse currentCycle,
            String paymentMethod,
            String currency,
            Integer installments,
            String status,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            GetCustomerResponse customer,
            GetCardResponse card,
            List<GetSubscriptionItemResponse> items,
            String statementDescriptor,
            Map<String, String> metadata,
            GetSetupResponse setup,
            String gatewayAffiliationId,
            LocalDateTime nextBillingAt,
            Integer billingDay,
            Integer minimumPrice,
            LocalDateTime canceledAt,
            List<GetDiscountResponse> discounts,
            List<GetIncrementResponse> increments,
            Integer boletoDueDays,
            GetSubscriptionSplitResponse split,
            GetSubscriptionBoletoResponse boleto,
            Boolean manualBilling) {
        this.id = OptionalNullable.of(id);
        this.code = OptionalNullable.of(code);
        this.startAt = OptionalNullable.of(startAt);
        this.interval = OptionalNullable.of(interval);
        this.intervalCount = OptionalNullable.of(intervalCount);
        this.billingType = OptionalNullable.of(billingType);
        this.currentCycle = OptionalNullable.of(currentCycle);
        this.paymentMethod = OptionalNullable.of(paymentMethod);
        this.currency = OptionalNullable.of(currency);
        this.installments = OptionalNullable.of(installments);
        this.status = OptionalNullable.of(status);
        this.createdAt = OptionalNullable.of(createdAt);
        this.updatedAt = OptionalNullable.of(updatedAt);
        this.customer = OptionalNullable.of(customer);
        this.card = OptionalNullable.of(card);
        this.items = OptionalNullable.of(items);
        this.statementDescriptor = OptionalNullable.of(statementDescriptor);
        this.metadata = OptionalNullable.of(metadata);
        this.setup = OptionalNullable.of(setup);
        this.gatewayAffiliationId = OptionalNullable.of(gatewayAffiliationId);
        this.nextBillingAt = OptionalNullable.of(nextBillingAt);
        this.billingDay = OptionalNullable.of(billingDay);
        this.minimumPrice = OptionalNullable.of(minimumPrice);
        this.canceledAt = OptionalNullable.of(canceledAt);
        this.discounts = OptionalNullable.of(discounts);
        this.increments = OptionalNullable.of(increments);
        this.boletoDueDays = OptionalNullable.of(boletoDueDays);
        this.split = OptionalNullable.of(split);
        this.boleto = OptionalNullable.of(boleto);
        this.manualBilling = OptionalNullable.of(manualBilling);
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  code  String value for code.
     * @param  startAt  LocalDateTime value for startAt.
     * @param  interval  String value for interval.
     * @param  intervalCount  Integer value for intervalCount.
     * @param  billingType  String value for billingType.
     * @param  currentCycle  GetPeriodResponse value for currentCycle.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  currency  String value for currency.
     * @param  installments  Integer value for installments.
     * @param  status  String value for status.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  customer  GetCustomerResponse value for customer.
     * @param  card  GetCardResponse value for card.
     * @param  items  List of GetSubscriptionItemResponse value for items.
     * @param  statementDescriptor  String value for statementDescriptor.
     * @param  metadata  Map of String, value for metadata.
     * @param  setup  GetSetupResponse value for setup.
     * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
     * @param  nextBillingAt  LocalDateTime value for nextBillingAt.
     * @param  billingDay  Integer value for billingDay.
     * @param  minimumPrice  Integer value for minimumPrice.
     * @param  canceledAt  LocalDateTime value for canceledAt.
     * @param  discounts  List of GetDiscountResponse value for discounts.
     * @param  increments  List of GetIncrementResponse value for increments.
     * @param  boletoDueDays  Integer value for boletoDueDays.
     * @param  split  GetSubscriptionSplitResponse value for split.
     * @param  boleto  GetSubscriptionBoletoResponse value for boleto.
     * @param  manualBilling  Boolean value for manualBilling.
     */

    protected GetSubscriptionResponse(OptionalNullable<String> id, OptionalNullable<String> code,
            OptionalNullable<LocalDateTime> startAt, OptionalNullable<String> interval,
            OptionalNullable<Integer> intervalCount, OptionalNullable<String> billingType,
            OptionalNullable<GetPeriodResponse> currentCycle,
            OptionalNullable<String> paymentMethod, OptionalNullable<String> currency,
            OptionalNullable<Integer> installments, OptionalNullable<String> status,
            OptionalNullable<LocalDateTime> createdAt, OptionalNullable<LocalDateTime> updatedAt,
            OptionalNullable<GetCustomerResponse> customer, OptionalNullable<GetCardResponse> card,
            OptionalNullable<List<GetSubscriptionItemResponse>> items,
            OptionalNullable<String> statementDescriptor,
            OptionalNullable<Map<String, String>> metadata,
            OptionalNullable<GetSetupResponse> setup, OptionalNullable<String> gatewayAffiliationId,
            OptionalNullable<LocalDateTime> nextBillingAt, OptionalNullable<Integer> billingDay,
            OptionalNullable<Integer> minimumPrice, OptionalNullable<LocalDateTime> canceledAt,
            OptionalNullable<List<GetDiscountResponse>> discounts,
            OptionalNullable<List<GetIncrementResponse>> increments,
            OptionalNullable<Integer> boletoDueDays,
            OptionalNullable<GetSubscriptionSplitResponse> split,
            OptionalNullable<GetSubscriptionBoletoResponse> boleto,
            OptionalNullable<Boolean> manualBilling) {
        this.id = id;
        this.code = code;
        this.startAt = startAt;
        this.interval = interval;
        this.intervalCount = intervalCount;
        this.billingType = billingType;
        this.currentCycle = currentCycle;
        this.paymentMethod = paymentMethod;
        this.currency = currency;
        this.installments = installments;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.customer = customer;
        this.card = card;
        this.items = items;
        this.statementDescriptor = statementDescriptor;
        this.metadata = metadata;
        this.setup = setup;
        this.gatewayAffiliationId = gatewayAffiliationId;
        this.nextBillingAt = nextBillingAt;
        this.billingDay = billingDay;
        this.minimumPrice = minimumPrice;
        this.canceledAt = canceledAt;
        this.discounts = discounts;
        this.increments = increments;
        this.boletoDueDays = boletoDueDays;
        this.split = split;
        this.boleto = boleto;
        this.manualBilling = manualBilling;
    }

    /**
     * Internal Getter for Id.
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for Code.
     * @return Returns the Internal String
     */
    @JsonGetter("code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCode() {
        return this.code;
    }

    /**
     * Getter for Code.
     * @return Returns the String
     */
    public String getCode() {
        return OptionalNullable.getFrom(code);
    }

    /**
     * Setter for Code.
     * @param code Value for String
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = OptionalNullable.of(code);
    }

    /**
     * UnSetter for Code.
     */
    public void unsetCode() {
        code = null;
    }

    /**
     * Internal Getter for StartAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("start_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetStartAt() {
        return this.startAt;
    }

    /**
     * Getter for StartAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getStartAt() {
        return OptionalNullable.getFrom(startAt);
    }

    /**
     * Setter for StartAt.
     * @param startAt Value for LocalDateTime
     */
    @JsonSetter("start_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setStartAt(LocalDateTime startAt) {
        this.startAt = OptionalNullable.of(startAt);
    }

    /**
     * UnSetter for StartAt.
     */
    public void unsetStartAt() {
        startAt = null;
    }

    /**
     * Internal Getter for Interval.
     * @return Returns the Internal String
     */
    @JsonGetter("interval")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInterval() {
        return this.interval;
    }

    /**
     * Getter for Interval.
     * @return Returns the String
     */
    public String getInterval() {
        return OptionalNullable.getFrom(interval);
    }

    /**
     * Setter for Interval.
     * @param interval Value for String
     */
    @JsonSetter("interval")
    public void setInterval(String interval) {
        this.interval = OptionalNullable.of(interval);
    }

    /**
     * UnSetter for Interval.
     */
    public void unsetInterval() {
        interval = null;
    }

    /**
     * Internal Getter for IntervalCount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("interval_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIntervalCount() {
        return this.intervalCount;
    }

    /**
     * Getter for IntervalCount.
     * @return Returns the Integer
     */
    public Integer getIntervalCount() {
        return OptionalNullable.getFrom(intervalCount);
    }

    /**
     * Setter for IntervalCount.
     * @param intervalCount Value for Integer
     */
    @JsonSetter("interval_count")
    public void setIntervalCount(Integer intervalCount) {
        this.intervalCount = OptionalNullable.of(intervalCount);
    }

    /**
     * UnSetter for IntervalCount.
     */
    public void unsetIntervalCount() {
        intervalCount = null;
    }

    /**
     * Internal Getter for BillingType.
     * @return Returns the Internal String
     */
    @JsonGetter("billing_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingType() {
        return this.billingType;
    }

    /**
     * Getter for BillingType.
     * @return Returns the String
     */
    public String getBillingType() {
        return OptionalNullable.getFrom(billingType);
    }

    /**
     * Setter for BillingType.
     * @param billingType Value for String
     */
    @JsonSetter("billing_type")
    public void setBillingType(String billingType) {
        this.billingType = OptionalNullable.of(billingType);
    }

    /**
     * UnSetter for BillingType.
     */
    public void unsetBillingType() {
        billingType = null;
    }

    /**
     * Internal Getter for CurrentCycle.
     * @return Returns the Internal GetPeriodResponse
     */
    @JsonGetter("current_cycle")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetPeriodResponse> internalGetCurrentCycle() {
        return this.currentCycle;
    }

    /**
     * Getter for CurrentCycle.
     * @return Returns the GetPeriodResponse
     */
    public GetPeriodResponse getCurrentCycle() {
        return OptionalNullable.getFrom(currentCycle);
    }

    /**
     * Setter for CurrentCycle.
     * @param currentCycle Value for GetPeriodResponse
     */
    @JsonSetter("current_cycle")
    public void setCurrentCycle(GetPeriodResponse currentCycle) {
        this.currentCycle = OptionalNullable.of(currentCycle);
    }

    /**
     * UnSetter for CurrentCycle.
     */
    public void unsetCurrentCycle() {
        currentCycle = null;
    }

    /**
     * Internal Getter for PaymentMethod.
     * @return Returns the Internal String
     */
    @JsonGetter("payment_method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Getter for PaymentMethod.
     * @return Returns the String
     */
    public String getPaymentMethod() {
        return OptionalNullable.getFrom(paymentMethod);
    }

    /**
     * Setter for PaymentMethod.
     * @param paymentMethod Value for String
     */
    @JsonSetter("payment_method")
    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = OptionalNullable.of(paymentMethod);
    }

    /**
     * UnSetter for PaymentMethod.
     */
    public void unsetPaymentMethod() {
        paymentMethod = null;
    }

    /**
     * Internal Getter for Currency.
     * @return Returns the Internal String
     */
    @JsonGetter("currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrency() {
        return this.currency;
    }

    /**
     * Getter for Currency.
     * @return Returns the String
     */
    public String getCurrency() {
        return OptionalNullable.getFrom(currency);
    }

    /**
     * Setter for Currency.
     * @param currency Value for String
     */
    @JsonSetter("currency")
    public void setCurrency(String currency) {
        this.currency = OptionalNullable.of(currency);
    }

    /**
     * UnSetter for Currency.
     */
    public void unsetCurrency() {
        currency = null;
    }

    /**
     * Internal Getter for Installments.
     * @return Returns the Internal Integer
     */
    @JsonGetter("installments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInstallments() {
        return this.installments;
    }

    /**
     * Getter for Installments.
     * @return Returns the Integer
     */
    public Integer getInstallments() {
        return OptionalNullable.getFrom(installments);
    }

    /**
     * Setter for Installments.
     * @param installments Value for Integer
     */
    @JsonSetter("installments")
    public void setInstallments(Integer installments) {
        this.installments = OptionalNullable.of(installments);
    }

    /**
     * UnSetter for Installments.
     */
    public void unsetInstallments() {
        installments = null;
    }

    /**
     * Internal Getter for Status.
     * @return Returns the Internal String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for CreatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCreatedAt() {
        return OptionalNullable.getFrom(createdAt);
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = OptionalNullable.of(createdAt);
    }

    /**
     * UnSetter for CreatedAt.
     */
    public void unsetCreatedAt() {
        createdAt = null;
    }

    /**
     * Internal Getter for UpdatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getUpdatedAt() {
        return OptionalNullable.getFrom(updatedAt);
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = OptionalNullable.of(updatedAt);
    }

    /**
     * UnSetter for UpdatedAt.
     */
    public void unsetUpdatedAt() {
        updatedAt = null;
    }

    /**
     * Internal Getter for Customer.
     * @return Returns the Internal GetCustomerResponse
     */
    @JsonGetter("customer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCustomerResponse> internalGetCustomer() {
        return this.customer;
    }

    /**
     * Getter for Customer.
     * @return Returns the GetCustomerResponse
     */
    public GetCustomerResponse getCustomer() {
        return OptionalNullable.getFrom(customer);
    }

    /**
     * Setter for Customer.
     * @param customer Value for GetCustomerResponse
     */
    @JsonSetter("customer")
    public void setCustomer(GetCustomerResponse customer) {
        this.customer = OptionalNullable.of(customer);
    }

    /**
     * UnSetter for Customer.
     */
    public void unsetCustomer() {
        customer = null;
    }

    /**
     * Internal Getter for Card.
     * @return Returns the Internal GetCardResponse
     */
    @JsonGetter("card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCardResponse> internalGetCard() {
        return this.card;
    }

    /**
     * Getter for Card.
     * @return Returns the GetCardResponse
     */
    public GetCardResponse getCard() {
        return OptionalNullable.getFrom(card);
    }

    /**
     * Setter for Card.
     * @param card Value for GetCardResponse
     */
    @JsonSetter("card")
    public void setCard(GetCardResponse card) {
        this.card = OptionalNullable.of(card);
    }

    /**
     * UnSetter for Card.
     */
    public void unsetCard() {
        card = null;
    }

    /**
     * Internal Getter for Items.
     * @return Returns the Internal List of GetSubscriptionItemResponse
     */
    @JsonGetter("items")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<GetSubscriptionItemResponse>> internalGetItems() {
        return this.items;
    }

    /**
     * Getter for Items.
     * @return Returns the List of GetSubscriptionItemResponse
     */
    public List<GetSubscriptionItemResponse> getItems() {
        return OptionalNullable.getFrom(items);
    }

    /**
     * Setter for Items.
     * @param items Value for List of GetSubscriptionItemResponse
     */
    @JsonSetter("items")
    public void setItems(List<GetSubscriptionItemResponse> items) {
        this.items = OptionalNullable.of(items);
    }

    /**
     * UnSetter for Items.
     */
    public void unsetItems() {
        items = null;
    }

    /**
     * Internal Getter for StatementDescriptor.
     * @return Returns the Internal String
     */
    @JsonGetter("statement_descriptor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementDescriptor() {
        return this.statementDescriptor;
    }

    /**
     * Getter for StatementDescriptor.
     * @return Returns the String
     */
    public String getStatementDescriptor() {
        return OptionalNullable.getFrom(statementDescriptor);
    }

    /**
     * Setter for StatementDescriptor.
     * @param statementDescriptor Value for String
     */
    @JsonSetter("statement_descriptor")
    public void setStatementDescriptor(String statementDescriptor) {
        this.statementDescriptor = OptionalNullable.of(statementDescriptor);
    }

    /**
     * UnSetter for StatementDescriptor.
     */
    public void unsetStatementDescriptor() {
        statementDescriptor = null;
    }

    /**
     * Internal Getter for Metadata.
     * @return Returns the Internal Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Map<String, String>> internalGetMetadata() {
        return this.metadata;
    }

    /**
     * Getter for Metadata.
     * @return Returns the Map of String, String
     */
    public Map<String, String> getMetadata() {
        return OptionalNullable.getFrom(metadata);
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = OptionalNullable.of(metadata);
    }

    /**
     * UnSetter for Metadata.
     */
    public void unsetMetadata() {
        metadata = null;
    }

    /**
     * Internal Getter for Setup.
     * @return Returns the Internal GetSetupResponse
     */
    @JsonGetter("setup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetSetupResponse> internalGetSetup() {
        return this.setup;
    }

    /**
     * Getter for Setup.
     * @return Returns the GetSetupResponse
     */
    public GetSetupResponse getSetup() {
        return OptionalNullable.getFrom(setup);
    }

    /**
     * Setter for Setup.
     * @param setup Value for GetSetupResponse
     */
    @JsonSetter("setup")
    public void setSetup(GetSetupResponse setup) {
        this.setup = OptionalNullable.of(setup);
    }

    /**
     * UnSetter for Setup.
     */
    public void unsetSetup() {
        setup = null;
    }

    /**
     * Internal Getter for GatewayAffiliationId.
     * Affiliation Code
     * @return Returns the Internal String
     */
    @JsonGetter("gateway_affiliation_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewayAffiliationId() {
        return this.gatewayAffiliationId;
    }

    /**
     * Getter for GatewayAffiliationId.
     * Affiliation Code
     * @return Returns the String
     */
    public String getGatewayAffiliationId() {
        return OptionalNullable.getFrom(gatewayAffiliationId);
    }

    /**
     * Setter for GatewayAffiliationId.
     * Affiliation Code
     * @param gatewayAffiliationId Value for String
     */
    @JsonSetter("gateway_affiliation_id")
    public void setGatewayAffiliationId(String gatewayAffiliationId) {
        this.gatewayAffiliationId = OptionalNullable.of(gatewayAffiliationId);
    }

    /**
     * UnSetter for GatewayAffiliationId.
     * Affiliation Code
     */
    public void unsetGatewayAffiliationId() {
        gatewayAffiliationId = null;
    }

    /**
     * Internal Getter for NextBillingAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("next_billing_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetNextBillingAt() {
        return this.nextBillingAt;
    }

    /**
     * Getter for NextBillingAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getNextBillingAt() {
        return OptionalNullable.getFrom(nextBillingAt);
    }

    /**
     * Setter for NextBillingAt.
     * @param nextBillingAt Value for LocalDateTime
     */
    @JsonSetter("next_billing_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setNextBillingAt(LocalDateTime nextBillingAt) {
        this.nextBillingAt = OptionalNullable.of(nextBillingAt);
    }

    /**
     * UnSetter for NextBillingAt.
     */
    public void unsetNextBillingAt() {
        nextBillingAt = null;
    }

    /**
     * Internal Getter for BillingDay.
     * @return Returns the Internal Integer
     */
    @JsonGetter("billing_day")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBillingDay() {
        return this.billingDay;
    }

    /**
     * Getter for BillingDay.
     * @return Returns the Integer
     */
    public Integer getBillingDay() {
        return OptionalNullable.getFrom(billingDay);
    }

    /**
     * Setter for BillingDay.
     * @param billingDay Value for Integer
     */
    @JsonSetter("billing_day")
    public void setBillingDay(Integer billingDay) {
        this.billingDay = OptionalNullable.of(billingDay);
    }

    /**
     * UnSetter for BillingDay.
     */
    public void unsetBillingDay() {
        billingDay = null;
    }

    /**
     * Internal Getter for MinimumPrice.
     * @return Returns the Internal Integer
     */
    @JsonGetter("minimum_price")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMinimumPrice() {
        return this.minimumPrice;
    }

    /**
     * Getter for MinimumPrice.
     * @return Returns the Integer
     */
    public Integer getMinimumPrice() {
        return OptionalNullable.getFrom(minimumPrice);
    }

    /**
     * Setter for MinimumPrice.
     * @param minimumPrice Value for Integer
     */
    @JsonSetter("minimum_price")
    public void setMinimumPrice(Integer minimumPrice) {
        this.minimumPrice = OptionalNullable.of(minimumPrice);
    }

    /**
     * UnSetter for MinimumPrice.
     */
    public void unsetMinimumPrice() {
        minimumPrice = null;
    }

    /**
     * Internal Getter for CanceledAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("canceled_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCanceledAt() {
        return this.canceledAt;
    }

    /**
     * Getter for CanceledAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCanceledAt() {
        return OptionalNullable.getFrom(canceledAt);
    }

    /**
     * Setter for CanceledAt.
     * @param canceledAt Value for LocalDateTime
     */
    @JsonSetter("canceled_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCanceledAt(LocalDateTime canceledAt) {
        this.canceledAt = OptionalNullable.of(canceledAt);
    }

    /**
     * UnSetter for CanceledAt.
     */
    public void unsetCanceledAt() {
        canceledAt = null;
    }

    /**
     * Internal Getter for Discounts.
     * Subscription discounts
     * @return Returns the Internal List of GetDiscountResponse
     */
    @JsonGetter("discounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<GetDiscountResponse>> internalGetDiscounts() {
        return this.discounts;
    }

    /**
     * Getter for Discounts.
     * Subscription discounts
     * @return Returns the List of GetDiscountResponse
     */
    public List<GetDiscountResponse> getDiscounts() {
        return OptionalNullable.getFrom(discounts);
    }

    /**
     * Setter for Discounts.
     * Subscription discounts
     * @param discounts Value for List of GetDiscountResponse
     */
    @JsonSetter("discounts")
    public void setDiscounts(List<GetDiscountResponse> discounts) {
        this.discounts = OptionalNullable.of(discounts);
    }

    /**
     * UnSetter for Discounts.
     * Subscription discounts
     */
    public void unsetDiscounts() {
        discounts = null;
    }

    /**
     * Internal Getter for Increments.
     * Subscription increments
     * @return Returns the Internal List of GetIncrementResponse
     */
    @JsonGetter("increments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<GetIncrementResponse>> internalGetIncrements() {
        return this.increments;
    }

    /**
     * Getter for Increments.
     * Subscription increments
     * @return Returns the List of GetIncrementResponse
     */
    public List<GetIncrementResponse> getIncrements() {
        return OptionalNullable.getFrom(increments);
    }

    /**
     * Setter for Increments.
     * Subscription increments
     * @param increments Value for List of GetIncrementResponse
     */
    @JsonSetter("increments")
    public void setIncrements(List<GetIncrementResponse> increments) {
        this.increments = OptionalNullable.of(increments);
    }

    /**
     * UnSetter for Increments.
     * Subscription increments
     */
    public void unsetIncrements() {
        increments = null;
    }

    /**
     * Internal Getter for BoletoDueDays.
     * Days until boleto expires
     * @return Returns the Internal Integer
     */
    @JsonGetter("boleto_due_days")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBoletoDueDays() {
        return this.boletoDueDays;
    }

    /**
     * Getter for BoletoDueDays.
     * Days until boleto expires
     * @return Returns the Integer
     */
    public Integer getBoletoDueDays() {
        return OptionalNullable.getFrom(boletoDueDays);
    }

    /**
     * Setter for BoletoDueDays.
     * Days until boleto expires
     * @param boletoDueDays Value for Integer
     */
    @JsonSetter("boleto_due_days")
    public void setBoletoDueDays(Integer boletoDueDays) {
        this.boletoDueDays = OptionalNullable.of(boletoDueDays);
    }

    /**
     * UnSetter for BoletoDueDays.
     * Days until boleto expires
     */
    public void unsetBoletoDueDays() {
        boletoDueDays = null;
    }

    /**
     * Internal Getter for Split.
     * Subscription's split response
     * @return Returns the Internal GetSubscriptionSplitResponse
     */
    @JsonGetter("split")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetSubscriptionSplitResponse> internalGetSplit() {
        return this.split;
    }

    /**
     * Getter for Split.
     * Subscription's split response
     * @return Returns the GetSubscriptionSplitResponse
     */
    public GetSubscriptionSplitResponse getSplit() {
        return OptionalNullable.getFrom(split);
    }

    /**
     * Setter for Split.
     * Subscription's split response
     * @param split Value for GetSubscriptionSplitResponse
     */
    @JsonSetter("split")
    public void setSplit(GetSubscriptionSplitResponse split) {
        this.split = OptionalNullable.of(split);
    }

    /**
     * UnSetter for Split.
     * Subscription's split response
     */
    public void unsetSplit() {
        split = null;
    }

    /**
     * Internal Getter for Boleto.
     * @return Returns the Internal GetSubscriptionBoletoResponse
     */
    @JsonGetter("boleto")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetSubscriptionBoletoResponse> internalGetBoleto() {
        return this.boleto;
    }

    /**
     * Getter for Boleto.
     * @return Returns the GetSubscriptionBoletoResponse
     */
    public GetSubscriptionBoletoResponse getBoleto() {
        return OptionalNullable.getFrom(boleto);
    }

    /**
     * Setter for Boleto.
     * @param boleto Value for GetSubscriptionBoletoResponse
     */
    @JsonSetter("boleto")
    public void setBoleto(GetSubscriptionBoletoResponse boleto) {
        this.boleto = OptionalNullable.of(boleto);
    }

    /**
     * UnSetter for Boleto.
     */
    public void unsetBoleto() {
        boleto = null;
    }

    /**
     * Internal Getter for ManualBilling.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("manual_billing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetManualBilling() {
        return this.manualBilling;
    }

    /**
     * Getter for ManualBilling.
     * @return Returns the Boolean
     */
    public Boolean getManualBilling() {
        return OptionalNullable.getFrom(manualBilling);
    }

    /**
     * Setter for ManualBilling.
     * @param manualBilling Value for Boolean
     */
    @JsonSetter("manual_billing")
    public void setManualBilling(Boolean manualBilling) {
        this.manualBilling = OptionalNullable.of(manualBilling);
    }

    /**
     * UnSetter for ManualBilling.
     */
    public void unsetManualBilling() {
        manualBilling = null;
    }

    /**
     * Converts this GetSubscriptionResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetSubscriptionResponse [" + "id=" + id + ", code=" + code + ", startAt=" + startAt
                + ", interval=" + interval + ", intervalCount=" + intervalCount + ", billingType="
                + billingType + ", currentCycle=" + currentCycle + ", paymentMethod="
                + paymentMethod + ", currency=" + currency + ", installments=" + installments
                + ", status=" + status + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt
                + ", customer=" + customer + ", card=" + card + ", items=" + items
                + ", statementDescriptor=" + statementDescriptor + ", metadata=" + metadata
                + ", setup=" + setup + ", gatewayAffiliationId=" + gatewayAffiliationId
                + ", nextBillingAt=" + nextBillingAt + ", billingDay=" + billingDay
                + ", minimumPrice=" + minimumPrice + ", canceledAt=" + canceledAt + ", discounts="
                + discounts + ", increments=" + increments + ", boletoDueDays=" + boletoDueDays
                + ", split=" + split + ", boleto=" + boleto + ", manualBilling=" + manualBilling
                + "]";
    }

    /**
     * Builds a new {@link GetSubscriptionResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetSubscriptionResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.code = internalGetCode();
        builder.startAt = internalGetStartAt();
        builder.interval = internalGetInterval();
        builder.intervalCount = internalGetIntervalCount();
        builder.billingType = internalGetBillingType();
        builder.currentCycle = internalGetCurrentCycle();
        builder.paymentMethod = internalGetPaymentMethod();
        builder.currency = internalGetCurrency();
        builder.installments = internalGetInstallments();
        builder.status = internalGetStatus();
        builder.createdAt = internalGetCreatedAt();
        builder.updatedAt = internalGetUpdatedAt();
        builder.customer = internalGetCustomer();
        builder.card = internalGetCard();
        builder.items = internalGetItems();
        builder.statementDescriptor = internalGetStatementDescriptor();
        builder.metadata = internalGetMetadata();
        builder.setup = internalGetSetup();
        builder.gatewayAffiliationId = internalGetGatewayAffiliationId();
        builder.nextBillingAt = internalGetNextBillingAt();
        builder.billingDay = internalGetBillingDay();
        builder.minimumPrice = internalGetMinimumPrice();
        builder.canceledAt = internalGetCanceledAt();
        builder.discounts = internalGetDiscounts();
        builder.increments = internalGetIncrements();
        builder.boletoDueDays = internalGetBoletoDueDays();
        builder.split = internalGetSplit();
        builder.boleto = internalGetBoleto();
        builder.manualBilling = internalGetManualBilling();
        return builder;
    }

    /**
     * Class to build instances of {@link GetSubscriptionResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<String> code;
        private OptionalNullable<LocalDateTime> startAt;
        private OptionalNullable<String> interval;
        private OptionalNullable<Integer> intervalCount;
        private OptionalNullable<String> billingType;
        private OptionalNullable<GetPeriodResponse> currentCycle;
        private OptionalNullable<String> paymentMethod;
        private OptionalNullable<String> currency;
        private OptionalNullable<Integer> installments;
        private OptionalNullable<String> status;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<LocalDateTime> updatedAt;
        private OptionalNullable<GetCustomerResponse> customer;
        private OptionalNullable<GetCardResponse> card;
        private OptionalNullable<List<GetSubscriptionItemResponse>> items;
        private OptionalNullable<String> statementDescriptor;
        private OptionalNullable<Map<String, String>> metadata;
        private OptionalNullable<GetSetupResponse> setup;
        private OptionalNullable<String> gatewayAffiliationId;
        private OptionalNullable<LocalDateTime> nextBillingAt;
        private OptionalNullable<Integer> billingDay;
        private OptionalNullable<Integer> minimumPrice;
        private OptionalNullable<LocalDateTime> canceledAt;
        private OptionalNullable<List<GetDiscountResponse>> discounts;
        private OptionalNullable<List<GetIncrementResponse>> increments;
        private OptionalNullable<Integer> boletoDueDays;
        private OptionalNullable<GetSubscriptionSplitResponse> split;
        private OptionalNullable<GetSubscriptionBoletoResponse> boleto;
        private OptionalNullable<Boolean> manualBilling;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for code.
         * @param  code  String value for code.
         * @return Builder
         */
        public Builder code(String code) {
            this.code = OptionalNullable.of(code);
            return this;
        }

        /**
         * UnSetter for code.
         * @return Builder
         */
        public Builder unsetCode() {
            code = null;
            return this;
        }

        /**
         * Setter for startAt.
         * @param  startAt  LocalDateTime value for startAt.
         * @return Builder
         */
        public Builder startAt(LocalDateTime startAt) {
            this.startAt = OptionalNullable.of(startAt);
            return this;
        }

        /**
         * UnSetter for startAt.
         * @return Builder
         */
        public Builder unsetStartAt() {
            startAt = null;
            return this;
        }

        /**
         * Setter for interval.
         * @param  interval  String value for interval.
         * @return Builder
         */
        public Builder interval(String interval) {
            this.interval = OptionalNullable.of(interval);
            return this;
        }

        /**
         * UnSetter for interval.
         * @return Builder
         */
        public Builder unsetInterval() {
            interval = null;
            return this;
        }

        /**
         * Setter for intervalCount.
         * @param  intervalCount  Integer value for intervalCount.
         * @return Builder
         */
        public Builder intervalCount(Integer intervalCount) {
            this.intervalCount = OptionalNullable.of(intervalCount);
            return this;
        }

        /**
         * UnSetter for intervalCount.
         * @return Builder
         */
        public Builder unsetIntervalCount() {
            intervalCount = null;
            return this;
        }

        /**
         * Setter for billingType.
         * @param  billingType  String value for billingType.
         * @return Builder
         */
        public Builder billingType(String billingType) {
            this.billingType = OptionalNullable.of(billingType);
            return this;
        }

        /**
         * UnSetter for billingType.
         * @return Builder
         */
        public Builder unsetBillingType() {
            billingType = null;
            return this;
        }

        /**
         * Setter for currentCycle.
         * @param  currentCycle  GetPeriodResponse value for currentCycle.
         * @return Builder
         */
        public Builder currentCycle(GetPeriodResponse currentCycle) {
            this.currentCycle = OptionalNullable.of(currentCycle);
            return this;
        }

        /**
         * UnSetter for currentCycle.
         * @return Builder
         */
        public Builder unsetCurrentCycle() {
            currentCycle = null;
            return this;
        }

        /**
         * Setter for paymentMethod.
         * @param  paymentMethod  String value for paymentMethod.
         * @return Builder
         */
        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = OptionalNullable.of(paymentMethod);
            return this;
        }

        /**
         * UnSetter for paymentMethod.
         * @return Builder
         */
        public Builder unsetPaymentMethod() {
            paymentMethod = null;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = OptionalNullable.of(currency);
            return this;
        }

        /**
         * UnSetter for currency.
         * @return Builder
         */
        public Builder unsetCurrency() {
            currency = null;
            return this;
        }

        /**
         * Setter for installments.
         * @param  installments  Integer value for installments.
         * @return Builder
         */
        public Builder installments(Integer installments) {
            this.installments = OptionalNullable.of(installments);
            return this;
        }

        /**
         * UnSetter for installments.
         * @return Builder
         */
        public Builder unsetInstallments() {
            installments = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = OptionalNullable.of(updatedAt);
            return this;
        }

        /**
         * UnSetter for updatedAt.
         * @return Builder
         */
        public Builder unsetUpdatedAt() {
            updatedAt = null;
            return this;
        }

        /**
         * Setter for customer.
         * @param  customer  GetCustomerResponse value for customer.
         * @return Builder
         */
        public Builder customer(GetCustomerResponse customer) {
            this.customer = OptionalNullable.of(customer);
            return this;
        }

        /**
         * UnSetter for customer.
         * @return Builder
         */
        public Builder unsetCustomer() {
            customer = null;
            return this;
        }

        /**
         * Setter for card.
         * @param  card  GetCardResponse value for card.
         * @return Builder
         */
        public Builder card(GetCardResponse card) {
            this.card = OptionalNullable.of(card);
            return this;
        }

        /**
         * UnSetter for card.
         * @return Builder
         */
        public Builder unsetCard() {
            card = null;
            return this;
        }

        /**
         * Setter for items.
         * @param  items  List of GetSubscriptionItemResponse value for items.
         * @return Builder
         */
        public Builder items(List<GetSubscriptionItemResponse> items) {
            this.items = OptionalNullable.of(items);
            return this;
        }

        /**
         * UnSetter for items.
         * @return Builder
         */
        public Builder unsetItems() {
            items = null;
            return this;
        }

        /**
         * Setter for statementDescriptor.
         * @param  statementDescriptor  String value for statementDescriptor.
         * @return Builder
         */
        public Builder statementDescriptor(String statementDescriptor) {
            this.statementDescriptor = OptionalNullable.of(statementDescriptor);
            return this;
        }

        /**
         * UnSetter for statementDescriptor.
         * @return Builder
         */
        public Builder unsetStatementDescriptor() {
            statementDescriptor = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = OptionalNullable.of(metadata);
            return this;
        }

        /**
         * UnSetter for metadata.
         * @return Builder
         */
        public Builder unsetMetadata() {
            metadata = null;
            return this;
        }

        /**
         * Setter for setup.
         * @param  setup  GetSetupResponse value for setup.
         * @return Builder
         */
        public Builder setup(GetSetupResponse setup) {
            this.setup = OptionalNullable.of(setup);
            return this;
        }

        /**
         * UnSetter for setup.
         * @return Builder
         */
        public Builder unsetSetup() {
            setup = null;
            return this;
        }

        /**
         * Setter for gatewayAffiliationId.
         * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
         * @return Builder
         */
        public Builder gatewayAffiliationId(String gatewayAffiliationId) {
            this.gatewayAffiliationId = OptionalNullable.of(gatewayAffiliationId);
            return this;
        }

        /**
         * UnSetter for gatewayAffiliationId.
         * @return Builder
         */
        public Builder unsetGatewayAffiliationId() {
            gatewayAffiliationId = null;
            return this;
        }

        /**
         * Setter for nextBillingAt.
         * @param  nextBillingAt  LocalDateTime value for nextBillingAt.
         * @return Builder
         */
        public Builder nextBillingAt(LocalDateTime nextBillingAt) {
            this.nextBillingAt = OptionalNullable.of(nextBillingAt);
            return this;
        }

        /**
         * UnSetter for nextBillingAt.
         * @return Builder
         */
        public Builder unsetNextBillingAt() {
            nextBillingAt = null;
            return this;
        }

        /**
         * Setter for billingDay.
         * @param  billingDay  Integer value for billingDay.
         * @return Builder
         */
        public Builder billingDay(Integer billingDay) {
            this.billingDay = OptionalNullable.of(billingDay);
            return this;
        }

        /**
         * UnSetter for billingDay.
         * @return Builder
         */
        public Builder unsetBillingDay() {
            billingDay = null;
            return this;
        }

        /**
         * Setter for minimumPrice.
         * @param  minimumPrice  Integer value for minimumPrice.
         * @return Builder
         */
        public Builder minimumPrice(Integer minimumPrice) {
            this.minimumPrice = OptionalNullable.of(minimumPrice);
            return this;
        }

        /**
         * UnSetter for minimumPrice.
         * @return Builder
         */
        public Builder unsetMinimumPrice() {
            minimumPrice = null;
            return this;
        }

        /**
         * Setter for canceledAt.
         * @param  canceledAt  LocalDateTime value for canceledAt.
         * @return Builder
         */
        public Builder canceledAt(LocalDateTime canceledAt) {
            this.canceledAt = OptionalNullable.of(canceledAt);
            return this;
        }

        /**
         * UnSetter for canceledAt.
         * @return Builder
         */
        public Builder unsetCanceledAt() {
            canceledAt = null;
            return this;
        }

        /**
         * Setter for discounts.
         * @param  discounts  List of GetDiscountResponse value for discounts.
         * @return Builder
         */
        public Builder discounts(List<GetDiscountResponse> discounts) {
            this.discounts = OptionalNullable.of(discounts);
            return this;
        }

        /**
         * UnSetter for discounts.
         * @return Builder
         */
        public Builder unsetDiscounts() {
            discounts = null;
            return this;
        }

        /**
         * Setter for increments.
         * @param  increments  List of GetIncrementResponse value for increments.
         * @return Builder
         */
        public Builder increments(List<GetIncrementResponse> increments) {
            this.increments = OptionalNullable.of(increments);
            return this;
        }

        /**
         * UnSetter for increments.
         * @return Builder
         */
        public Builder unsetIncrements() {
            increments = null;
            return this;
        }

        /**
         * Setter for boletoDueDays.
         * @param  boletoDueDays  Integer value for boletoDueDays.
         * @return Builder
         */
        public Builder boletoDueDays(Integer boletoDueDays) {
            this.boletoDueDays = OptionalNullable.of(boletoDueDays);
            return this;
        }

        /**
         * UnSetter for boletoDueDays.
         * @return Builder
         */
        public Builder unsetBoletoDueDays() {
            boletoDueDays = null;
            return this;
        }

        /**
         * Setter for split.
         * @param  split  GetSubscriptionSplitResponse value for split.
         * @return Builder
         */
        public Builder split(GetSubscriptionSplitResponse split) {
            this.split = OptionalNullable.of(split);
            return this;
        }

        /**
         * UnSetter for split.
         * @return Builder
         */
        public Builder unsetSplit() {
            split = null;
            return this;
        }

        /**
         * Setter for boleto.
         * @param  boleto  GetSubscriptionBoletoResponse value for boleto.
         * @return Builder
         */
        public Builder boleto(GetSubscriptionBoletoResponse boleto) {
            this.boleto = OptionalNullable.of(boleto);
            return this;
        }

        /**
         * UnSetter for boleto.
         * @return Builder
         */
        public Builder unsetBoleto() {
            boleto = null;
            return this;
        }

        /**
         * Setter for manualBilling.
         * @param  manualBilling  Boolean value for manualBilling.
         * @return Builder
         */
        public Builder manualBilling(Boolean manualBilling) {
            this.manualBilling = OptionalNullable.of(manualBilling);
            return this;
        }

        /**
         * UnSetter for manualBilling.
         * @return Builder
         */
        public Builder unsetManualBilling() {
            manualBilling = null;
            return this;
        }

        /**
         * Builds a new {@link GetSubscriptionResponse} object using the set fields.
         * @return {@link GetSubscriptionResponse}
         */
        public GetSubscriptionResponse build() {
            return new GetSubscriptionResponse(id, code, startAt, interval, intervalCount,
                    billingType, currentCycle, paymentMethod, currency, installments, status,
                    createdAt, updatedAt, customer, card, items, statementDescriptor, metadata,
                    setup, gatewayAffiliationId, nextBillingAt, billingDay, minimumPrice,
                    canceledAt, discounts, increments, boletoDueDays, split, boleto, manualBilling);
        }
    }
}
