/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.Map;

/**
 * This is a model class for CreateRecipientRequest type.
 */
public class CreateRecipientRequest {
    private OptionalNullable<String> name;
    private OptionalNullable<String> email;
    private OptionalNullable<String> description;
    private OptionalNullable<String> document;
    private OptionalNullable<String> type;
    private CreateBankAccountRequest defaultBankAccount;
    private Map<String, String> metadata;
    private CreateTransferSettingsRequest transferSettings;
    private String code;
    private String paymentMode;
    private OptionalNullable<CreateRegisterInformationBaseRequest> registerInformation;

    /**
     * Default constructor.
     */
    public CreateRecipientRequest() {
        paymentMode = "bank_transfer";
    }

    /**
     * Initialization constructor.
     * @param  defaultBankAccount  CreateBankAccountRequest value for defaultBankAccount.
     * @param  metadata  Map of String, value for metadata.
     * @param  code  String value for code.
     * @param  paymentMode  String value for paymentMode.
     * @param  name  String value for name.
     * @param  email  String value for email.
     * @param  description  String value for description.
     * @param  document  String value for document.
     * @param  type  String value for type.
     * @param  transferSettings  CreateTransferSettingsRequest value for transferSettings.
     * @param  registerInformation  CreateRegisterInformationBaseRequest value for
     *         registerInformation.
     */
    public CreateRecipientRequest(
            CreateBankAccountRequest defaultBankAccount,
            Map<String, String> metadata,
            String code,
            String paymentMode,
            String name,
            String email,
            String description,
            String document,
            String type,
            CreateTransferSettingsRequest transferSettings,
            CreateRegisterInformationBaseRequest registerInformation) {
        this.name = OptionalNullable.of(name);
        this.email = OptionalNullable.of(email);
        this.description = OptionalNullable.of(description);
        this.document = OptionalNullable.of(document);
        this.type = OptionalNullable.of(type);
        this.defaultBankAccount = defaultBankAccount;
        this.metadata = metadata;
        this.transferSettings = transferSettings;
        this.code = code;
        this.paymentMode = paymentMode;
        this.registerInformation = OptionalNullable.of(registerInformation);
    }

    /**
     * Initialization constructor.
     * @param  defaultBankAccount  CreateBankAccountRequest value for defaultBankAccount.
     * @param  metadata  Map of String, value for metadata.
     * @param  code  String value for code.
     * @param  paymentMode  String value for paymentMode.
     * @param  name  String value for name.
     * @param  email  String value for email.
     * @param  description  String value for description.
     * @param  document  String value for document.
     * @param  type  String value for type.
     * @param  transferSettings  CreateTransferSettingsRequest value for transferSettings.
     * @param  registerInformation  CreateRegisterInformationBaseRequest value for
     *         registerInformation.
     */

    protected CreateRecipientRequest(CreateBankAccountRequest defaultBankAccount,
            Map<String, String> metadata, String code, String paymentMode,
            OptionalNullable<String> name, OptionalNullable<String> email,
            OptionalNullable<String> description, OptionalNullable<String> document,
            OptionalNullable<String> type, CreateTransferSettingsRequest transferSettings,
            OptionalNullable<CreateRegisterInformationBaseRequest> registerInformation) {
        this.name = name;
        this.email = email;
        this.description = description;
        this.document = document;
        this.type = type;
        this.defaultBankAccount = defaultBankAccount;
        this.metadata = metadata;
        this.transferSettings = transferSettings;
        this.code = code;
        this.paymentMode = paymentMode;
        this.registerInformation = registerInformation;
    }

    /**
     * Internal Getter for Name.
     * Recipient name. Required if the register_information field isn't populated.
     * @return Returns the Internal String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetName() {
        return this.name;
    }

    /**
     * Getter for Name.
     * Recipient name. Required if the register_information field isn't populated.
     * @return Returns the String
     */
    public String getName() {
        return OptionalNullable.getFrom(name);
    }

    /**
     * Setter for Name.
     * Recipient name. Required if the register_information field isn't populated.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = OptionalNullable.of(name);
    }

    /**
     * UnSetter for Name.
     * Recipient name. Required if the register_information field isn't populated.
     */
    public void unsetName() {
        name = null;
    }

    /**
     * Internal Getter for Email.
     * Recipient email. Required if the register_information field isn't populated.
     * @return Returns the Internal String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmail() {
        return this.email;
    }

    /**
     * Getter for Email.
     * Recipient email. Required if the register_information field isn't populated.
     * @return Returns the String
     */
    public String getEmail() {
        return OptionalNullable.getFrom(email);
    }

    /**
     * Setter for Email.
     * Recipient email. Required if the register_information field isn't populated.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = OptionalNullable.of(email);
    }

    /**
     * UnSetter for Email.
     * Recipient email. Required if the register_information field isn't populated.
     */
    public void unsetEmail() {
        email = null;
    }

    /**
     * Internal Getter for Description.
     * Recipient description
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * Recipient description
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * Recipient description
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * Recipient description
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Internal Getter for Document.
     * Recipient document number. Required if the register_information field isn't populated.
     * @return Returns the Internal String
     */
    @JsonGetter("document")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDocument() {
        return this.document;
    }

    /**
     * Getter for Document.
     * Recipient document number. Required if the register_information field isn't populated.
     * @return Returns the String
     */
    public String getDocument() {
        return OptionalNullable.getFrom(document);
    }

    /**
     * Setter for Document.
     * Recipient document number. Required if the register_information field isn't populated.
     * @param document Value for String
     */
    @JsonSetter("document")
    public void setDocument(String document) {
        this.document = OptionalNullable.of(document);
    }

    /**
     * UnSetter for Document.
     * Recipient document number. Required if the register_information field isn't populated.
     */
    public void unsetDocument() {
        document = null;
    }

    /**
     * Internal Getter for Type.
     * Recipient type. Required if the register_information field isn't populated.
     * @return Returns the Internal String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * Recipient type. Required if the register_information field isn't populated.
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * Recipient type. Required if the register_information field isn't populated.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * Recipient type. Required if the register_information field isn't populated.
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Getter for DefaultBankAccount.
     * Bank account
     * @return Returns the CreateBankAccountRequest
     */
    @JsonGetter("default_bank_account")
    public CreateBankAccountRequest getDefaultBankAccount() {
        return defaultBankAccount;
    }

    /**
     * Setter for DefaultBankAccount.
     * Bank account
     * @param defaultBankAccount Value for CreateBankAccountRequest
     */
    @JsonSetter("default_bank_account")
    public void setDefaultBankAccount(CreateBankAccountRequest defaultBankAccount) {
        this.defaultBankAccount = defaultBankAccount;
    }

    /**
     * Getter for Metadata.
     * Metadata
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Metadata
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for TransferSettings.
     * Receiver Transfer Information
     * @return Returns the CreateTransferSettingsRequest
     */
    @JsonGetter("transfer_settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreateTransferSettingsRequest getTransferSettings() {
        return transferSettings;
    }

    /**
     * Setter for TransferSettings.
     * Receiver Transfer Information
     * @param transferSettings Value for CreateTransferSettingsRequest
     */
    @JsonSetter("transfer_settings")
    public void setTransferSettings(CreateTransferSettingsRequest transferSettings) {
        this.transferSettings = transferSettings;
    }

    /**
     * Getter for Code.
     * Recipient code
     * @return Returns the String
     */
    @JsonGetter("code")
    public String getCode() {
        return code;
    }

    /**
     * Setter for Code.
     * Recipient code
     * @param code Value for String
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Getter for PaymentMode.
     * Payment mode
     * @return Returns the String
     */
    @JsonGetter("payment_mode")
    public String getPaymentMode() {
        return paymentMode;
    }

    /**
     * Setter for PaymentMode.
     * Payment mode
     * @param paymentMode Value for String
     */
    @JsonSetter("payment_mode")
    public void setPaymentMode(String paymentMode) {
        this.paymentMode = paymentMode;
    }

    /**
     * Internal Getter for RegisterInformation.
     * Register Information
     * @return Returns the Internal CreateRegisterInformationBaseRequest
     */
    @JsonGetter("register_information")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<CreateRegisterInformationBaseRequest> internalGetRegisterInformation() {
        return this.registerInformation;
    }

    /**
     * Getter for RegisterInformation.
     * Register Information
     * @return Returns the CreateRegisterInformationBaseRequest
     */
    public CreateRegisterInformationBaseRequest getRegisterInformation() {
        return OptionalNullable.getFrom(registerInformation);
    }

    /**
     * Setter for RegisterInformation.
     * Register Information
     * @param registerInformation Value for CreateRegisterInformationBaseRequest
     */
    @JsonSetter("register_information")
    public void setRegisterInformation(CreateRegisterInformationBaseRequest registerInformation) {
        this.registerInformation = OptionalNullable.of(registerInformation);
    }

    /**
     * UnSetter for RegisterInformation.
     * Register Information
     */
    public void unsetRegisterInformation() {
        registerInformation = null;
    }

    /**
     * Converts this CreateRecipientRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreateRecipientRequest [" + "defaultBankAccount=" + defaultBankAccount
                + ", metadata=" + metadata + ", code=" + code + ", paymentMode=" + paymentMode
                + ", name=" + name + ", email=" + email + ", description=" + description
                + ", document=" + document + ", type=" + type + ", transferSettings="
                + transferSettings + ", registerInformation=" + registerInformation + "]";
    }

    /**
     * Builds a new {@link CreateRecipientRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreateRecipientRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(defaultBankAccount, metadata, code, paymentMode)
                .transferSettings(getTransferSettings());
        builder.name = internalGetName();
        builder.email = internalGetEmail();
        builder.description = internalGetDescription();
        builder.document = internalGetDocument();
        builder.type = internalGetType();
        builder.registerInformation = internalGetRegisterInformation();
        return builder;
    }

    /**
     * Class to build instances of {@link CreateRecipientRequest}.
     */
    public static class Builder {
        private CreateBankAccountRequest defaultBankAccount;
        private Map<String, String> metadata;
        private String code;
        private String paymentMode = "bank_transfer";
        private OptionalNullable<String> name;
        private OptionalNullable<String> email;
        private OptionalNullable<String> description;
        private OptionalNullable<String> document;
        private OptionalNullable<String> type;
        private CreateTransferSettingsRequest transferSettings;
        private OptionalNullable<CreateRegisterInformationBaseRequest> registerInformation;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  defaultBankAccount  CreateBankAccountRequest value for defaultBankAccount.
         * @param  metadata  Map of String, value for metadata.
         * @param  code  String value for code.
         * @param  paymentMode  String value for paymentMode.
         */
        public Builder(CreateBankAccountRequest defaultBankAccount, Map<String, String> metadata,
                String code, String paymentMode) {
            this.defaultBankAccount = defaultBankAccount;
            this.metadata = metadata;
            this.code = code;
            this.paymentMode = paymentMode;
        }

        /**
         * Setter for defaultBankAccount.
         * @param  defaultBankAccount  CreateBankAccountRequest value for defaultBankAccount.
         * @return Builder
         */
        public Builder defaultBankAccount(CreateBankAccountRequest defaultBankAccount) {
            this.defaultBankAccount = defaultBankAccount;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for code.
         * @param  code  String value for code.
         * @return Builder
         */
        public Builder code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Setter for paymentMode.
         * @param  paymentMode  String value for paymentMode.
         * @return Builder
         */
        public Builder paymentMode(String paymentMode) {
            this.paymentMode = paymentMode;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = OptionalNullable.of(name);
            return this;
        }

        /**
         * UnSetter for name.
         * @return Builder
         */
        public Builder unsetName() {
            name = null;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = OptionalNullable.of(email);
            return this;
        }

        /**
         * UnSetter for email.
         * @return Builder
         */
        public Builder unsetEmail() {
            email = null;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for document.
         * @param  document  String value for document.
         * @return Builder
         */
        public Builder document(String document) {
            this.document = OptionalNullable.of(document);
            return this;
        }

        /**
         * UnSetter for document.
         * @return Builder
         */
        public Builder unsetDocument() {
            document = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for transferSettings.
         * @param  transferSettings  CreateTransferSettingsRequest value for transferSettings.
         * @return Builder
         */
        public Builder transferSettings(CreateTransferSettingsRequest transferSettings) {
            this.transferSettings = transferSettings;
            return this;
        }

        /**
         * Setter for registerInformation.
         * @param  registerInformation  CreateRegisterInformationBaseRequest value for
         *         registerInformation.
         * @return Builder
         */
        public Builder registerInformation(
                CreateRegisterInformationBaseRequest registerInformation) {
            this.registerInformation = OptionalNullable.of(registerInformation);
            return this;
        }

        /**
         * UnSetter for registerInformation.
         * @return Builder
         */
        public Builder unsetRegisterInformation() {
            registerInformation = null;
            return this;
        }

        /**
         * Builds a new {@link CreateRecipientRequest} object using the set fields.
         * @return {@link CreateRecipientRequest}
         */
        public CreateRecipientRequest build() {
            return new CreateRecipientRequest(defaultBankAccount, metadata, code, paymentMode, name,
                    email, description, document, type, transferSettings, registerInformation);
        }
    }
}
