/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for GetOrderItemResponse type.
 */
public class GetOrderItemResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<Integer> amount;
    private OptionalNullable<String> description;
    private OptionalNullable<Integer> quantity;
    private OptionalNullable<String> category;
    private OptionalNullable<String> code;

    /**
     * Default constructor.
     */
    public GetOrderItemResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  amount  Integer value for amount.
     * @param  description  String value for description.
     * @param  quantity  Integer value for quantity.
     * @param  category  String value for category.
     * @param  code  String value for code.
     */
    public GetOrderItemResponse(
            String id,
            Integer amount,
            String description,
            Integer quantity,
            String category,
            String code) {
        this.id = OptionalNullable.of(id);
        this.amount = OptionalNullable.of(amount);
        this.description = OptionalNullable.of(description);
        this.quantity = OptionalNullable.of(quantity);
        this.category = OptionalNullable.of(category);
        this.code = OptionalNullable.of(code);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetOrderItemResponse(OptionalNullable<String> id, OptionalNullable<Integer> amount,
            OptionalNullable<String> description, OptionalNullable<Integer> quantity,
            OptionalNullable<String> category, OptionalNullable<String> code) {
        this.id = id;
        this.amount = amount;
        this.description = description;
        this.quantity = quantity;
        this.category = category;
        this.code = code;
    }

    /**
     * Internal Getter for Id.
     * Id
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * Id
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * Id
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     * Id
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for Amount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Internal Getter for Description.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Internal Getter for Quantity.
     * @return Returns the Internal Integer
     */
    @JsonGetter("quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetQuantity() {
        return this.quantity;
    }

    /**
     * Getter for Quantity.
     * @return Returns the Integer
     */
    public Integer getQuantity() {
        return OptionalNullable.getFrom(quantity);
    }

    /**
     * Setter for Quantity.
     * @param quantity Value for Integer
     */
    @JsonSetter("quantity")
    public void setQuantity(Integer quantity) {
        this.quantity = OptionalNullable.of(quantity);
    }

    /**
     * UnSetter for Quantity.
     */
    public void unsetQuantity() {
        quantity = null;
    }

    /**
     * Internal Getter for Category.
     * Category
     * @return Returns the Internal String
     */
    @JsonGetter("category")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCategory() {
        return this.category;
    }

    /**
     * Getter for Category.
     * Category
     * @return Returns the String
     */
    public String getCategory() {
        return OptionalNullable.getFrom(category);
    }

    /**
     * Setter for Category.
     * Category
     * @param category Value for String
     */
    @JsonSetter("category")
    public void setCategory(String category) {
        this.category = OptionalNullable.of(category);
    }

    /**
     * UnSetter for Category.
     * Category
     */
    public void unsetCategory() {
        category = null;
    }

    /**
     * Internal Getter for Code.
     * Code
     * @return Returns the Internal String
     */
    @JsonGetter("code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCode() {
        return this.code;
    }

    /**
     * Getter for Code.
     * Code
     * @return Returns the String
     */
    public String getCode() {
        return OptionalNullable.getFrom(code);
    }

    /**
     * Setter for Code.
     * Code
     * @param code Value for String
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = OptionalNullable.of(code);
    }

    /**
     * UnSetter for Code.
     * Code
     */
    public void unsetCode() {
        code = null;
    }

    /**
     * Converts this GetOrderItemResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetOrderItemResponse [" + "id=" + id + ", amount=" + amount + ", description="
                + description + ", quantity=" + quantity + ", category=" + category + ", code="
                + code + "]";
    }

    /**
     * Builds a new {@link GetOrderItemResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetOrderItemResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.amount = internalGetAmount();
        builder.description = internalGetDescription();
        builder.quantity = internalGetQuantity();
        builder.category = internalGetCategory();
        builder.code = internalGetCode();
        return builder;
    }

    /**
     * Class to build instances of {@link GetOrderItemResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<Integer> amount;
        private OptionalNullable<String> description;
        private OptionalNullable<Integer> quantity;
        private OptionalNullable<String> category;
        private OptionalNullable<String> code;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Integer value for quantity.
         * @return Builder
         */
        public Builder quantity(Integer quantity) {
            this.quantity = OptionalNullable.of(quantity);
            return this;
        }

        /**
         * UnSetter for quantity.
         * @return Builder
         */
        public Builder unsetQuantity() {
            quantity = null;
            return this;
        }

        /**
         * Setter for category.
         * @param  category  String value for category.
         * @return Builder
         */
        public Builder category(String category) {
            this.category = OptionalNullable.of(category);
            return this;
        }

        /**
         * UnSetter for category.
         * @return Builder
         */
        public Builder unsetCategory() {
            category = null;
            return this;
        }

        /**
         * Setter for code.
         * @param  code  String value for code.
         * @return Builder
         */
        public Builder code(String code) {
            this.code = OptionalNullable.of(code);
            return this;
        }

        /**
         * UnSetter for code.
         * @return Builder
         */
        public Builder unsetCode() {
            code = null;
            return this;
        }

        /**
         * Builds a new {@link GetOrderItemResponse} object using the set fields.
         * @return {@link GetOrderItemResponse}
         */
        public GetOrderItemResponse build() {
            return new GetOrderItemResponse(id, amount, description, quantity, category, code);
        }
    }
}
