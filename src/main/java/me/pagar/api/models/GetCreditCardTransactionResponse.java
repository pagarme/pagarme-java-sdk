/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetCreditCardTransactionResponse type.
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "transaction_type",
        defaultImpl = GetCreditCardTransactionResponse.class,
        visible = true)
@JsonInclude(Include.ALWAYS)
public class GetCreditCardTransactionResponse
        extends GetTransactionResponse {
    private OptionalNullable<String> statementDescriptor;
    private String acquirerName;
    private OptionalNullable<String> acquirerAffiliationCode;
    private String acquirerTid;
    private String acquirerNsu;
    private OptionalNullable<String> acquirerAuthCode;
    private OptionalNullable<String> operationType;
    private OptionalNullable<GetCardResponse> card;
    private OptionalNullable<String> acquirerMessage;
    private OptionalNullable<String> acquirerReturnCode;
    private OptionalNullable<Integer> installments;
    private OptionalNullable<String> threedAuthenticationUrl;
    private OptionalNullable<String> fundingSource;
    private OptionalNullable<GetRetryTransactionInformationResponse> retryInfo;

    /**
     * Default constructor.
     */
    public GetCreditCardTransactionResponse() {
        super();
        setTransactionType("credit_card");
    }

    /**
     * Initialization constructor.
     * @param  gatewayId  String value for gatewayId.
     * @param  amount  Integer value for amount.
     * @param  status  String value for status.
     * @param  success  Boolean value for success.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  attemptCount  Integer value for attemptCount.
     * @param  maxAttempts  Integer value for maxAttempts.
     * @param  splits  List of GetSplitResponse value for splits.
     * @param  nextAttempt  LocalDateTime value for nextAttempt.
     * @param  transactionType  String value for transactionType.
     * @param  id  String value for id.
     * @param  gatewayResponse  GetGatewayResponseResponse value for gatewayResponse.
     * @param  antifraudResponse  GetAntifraudResponse value for antifraudResponse.
     * @param  metadata  Map of String, value for metadata.
     * @param  split  List of GetSplitResponse value for split.
     * @param  interest  GetInterestResponse value for interest.
     * @param  fine  GetFineResponse value for fine.
     * @param  maxDaysToPayPastDue  Integer value for maxDaysToPayPastDue.
     * @param  statementDescriptor  String value for statementDescriptor.
     * @param  acquirerName  String value for acquirerName.
     * @param  acquirerAffiliationCode  String value for acquirerAffiliationCode.
     * @param  acquirerTid  String value for acquirerTid.
     * @param  acquirerNsu  String value for acquirerNsu.
     * @param  acquirerAuthCode  String value for acquirerAuthCode.
     * @param  operationType  String value for operationType.
     * @param  card  GetCardResponse value for card.
     * @param  acquirerMessage  String value for acquirerMessage.
     * @param  acquirerReturnCode  String value for acquirerReturnCode.
     * @param  installments  Integer value for installments.
     * @param  threedAuthenticationUrl  String value for threedAuthenticationUrl.
     * @param  fundingSource  String value for fundingSource.
     * @param  retryInfo  GetRetryTransactionInformationResponse value for retryInfo.
     */
    public GetCreditCardTransactionResponse(
            String gatewayId,
            Integer amount,
            String status,
            Boolean success,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            Integer attemptCount,
            Integer maxAttempts,
            List<GetSplitResponse> splits,
            LocalDateTime nextAttempt,
            String transactionType,
            String id,
            GetGatewayResponseResponse gatewayResponse,
            GetAntifraudResponse antifraudResponse,
            Map<String, String> metadata,
            List<GetSplitResponse> split,
            GetInterestResponse interest,
            GetFineResponse fine,
            Integer maxDaysToPayPastDue,
            String statementDescriptor,
            String acquirerName,
            String acquirerAffiliationCode,
            String acquirerTid,
            String acquirerNsu,
            String acquirerAuthCode,
            String operationType,
            GetCardResponse card,
            String acquirerMessage,
            String acquirerReturnCode,
            Integer installments,
            String threedAuthenticationUrl,
            String fundingSource,
            GetRetryTransactionInformationResponse retryInfo) {
        super(gatewayId, amount, status, success, createdAt, updatedAt, attemptCount, maxAttempts,
                splits, nextAttempt, transactionType, id, gatewayResponse, antifraudResponse,
                metadata, split, interest, fine, maxDaysToPayPastDue);
        this.statementDescriptor = OptionalNullable.of(statementDescriptor);
        this.acquirerName = acquirerName;
        this.acquirerAffiliationCode = OptionalNullable.of(acquirerAffiliationCode);
        this.acquirerTid = acquirerTid;
        this.acquirerNsu = acquirerNsu;
        this.acquirerAuthCode = OptionalNullable.of(acquirerAuthCode);
        this.operationType = OptionalNullable.of(operationType);
        this.card = OptionalNullable.of(card);
        this.acquirerMessage = OptionalNullable.of(acquirerMessage);
        this.acquirerReturnCode = OptionalNullable.of(acquirerReturnCode);
        this.installments = OptionalNullable.of(installments);
        this.threedAuthenticationUrl = OptionalNullable.of(threedAuthenticationUrl);
        this.fundingSource = OptionalNullable.of(fundingSource);
        this.retryInfo = OptionalNullable.of(retryInfo);
    }

    /**
     * Initialization constructor.
     * @param  gatewayId  String value for gatewayId.
     * @param  amount  Integer value for amount.
     * @param  status  String value for status.
     * @param  success  Boolean value for success.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  attemptCount  Integer value for attemptCount.
     * @param  maxAttempts  Integer value for maxAttempts.
     * @param  splits  List of GetSplitResponse value for splits.
     * @param  nextAttempt  LocalDateTime value for nextAttempt.
     * @param  transactionType  String value for transactionType.
     * @param  id  String value for id.
     * @param  gatewayResponse  GetGatewayResponseResponse value for gatewayResponse.
     * @param  antifraudResponse  GetAntifraudResponse value for antifraudResponse.
     * @param  metadata  Map of String, value for metadata.
     * @param  split  List of GetSplitResponse value for split.
     * @param  interest  GetInterestResponse value for interest.
     * @param  fine  GetFineResponse value for fine.
     * @param  maxDaysToPayPastDue  Integer value for maxDaysToPayPastDue.
     * @param  statementDescriptor  String value for statementDescriptor.
     * @param  acquirerName  String value for acquirerName.
     * @param  acquirerAffiliationCode  String value for acquirerAffiliationCode.
     * @param  acquirerTid  String value for acquirerTid.
     * @param  acquirerNsu  String value for acquirerNsu.
     * @param  acquirerAuthCode  String value for acquirerAuthCode.
     * @param  operationType  String value for operationType.
     * @param  card  GetCardResponse value for card.
     * @param  acquirerMessage  String value for acquirerMessage.
     * @param  acquirerReturnCode  String value for acquirerReturnCode.
     * @param  installments  Integer value for installments.
     * @param  threedAuthenticationUrl  String value for threedAuthenticationUrl.
     * @param  fundingSource  String value for fundingSource.
     * @param  retryInfo  GetRetryTransactionInformationResponse value for retryInfo.
     */

    protected GetCreditCardTransactionResponse(OptionalNullable<String> gatewayId,
            OptionalNullable<Integer> amount, OptionalNullable<String> status,
            OptionalNullable<Boolean> success, OptionalNullable<LocalDateTime> createdAt,
            OptionalNullable<LocalDateTime> updatedAt, OptionalNullable<Integer> attemptCount,
            OptionalNullable<Integer> maxAttempts, OptionalNullable<List<GetSplitResponse>> splits,
            OptionalNullable<LocalDateTime> nextAttempt, String transactionType,
            OptionalNullable<String> id,
            OptionalNullable<GetGatewayResponseResponse> gatewayResponse,
            OptionalNullable<GetAntifraudResponse> antifraudResponse,
            OptionalNullable<Map<String, String>> metadata,
            OptionalNullable<List<GetSplitResponse>> split,
            OptionalNullable<GetInterestResponse> interest, OptionalNullable<GetFineResponse> fine,
            OptionalNullable<Integer> maxDaysToPayPastDue,
            OptionalNullable<String> statementDescriptor, String acquirerName,
            OptionalNullable<String> acquirerAffiliationCode, String acquirerTid,
            String acquirerNsu, OptionalNullable<String> acquirerAuthCode,
            OptionalNullable<String> operationType, OptionalNullable<GetCardResponse> card,
            OptionalNullable<String> acquirerMessage, OptionalNullable<String> acquirerReturnCode,
            OptionalNullable<Integer> installments,
            OptionalNullable<String> threedAuthenticationUrl,
            OptionalNullable<String> fundingSource,
            OptionalNullable<GetRetryTransactionInformationResponse> retryInfo) {
        super(gatewayId, amount, status, success, createdAt, updatedAt, attemptCount, maxAttempts,
                splits, nextAttempt, transactionType, id, gatewayResponse, antifraudResponse,
                metadata, split, interest, fine, maxDaysToPayPastDue);
        this.statementDescriptor = statementDescriptor;
        this.acquirerName = acquirerName;
        this.acquirerAffiliationCode = acquirerAffiliationCode;
        this.acquirerTid = acquirerTid;
        this.acquirerNsu = acquirerNsu;
        this.acquirerAuthCode = acquirerAuthCode;
        this.operationType = operationType;
        this.card = card;
        this.acquirerMessage = acquirerMessage;
        this.acquirerReturnCode = acquirerReturnCode;
        this.installments = installments;
        this.threedAuthenticationUrl = threedAuthenticationUrl;
        this.fundingSource = fundingSource;
        this.retryInfo = retryInfo;
    }

    /**
     * Internal Getter for StatementDescriptor.
     * Text that will appear on the credit card's statement
     * @return Returns the Internal String
     */
    @JsonGetter("statement_descriptor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementDescriptor() {
        return this.statementDescriptor;
    }

    /**
     * Getter for StatementDescriptor.
     * Text that will appear on the credit card's statement
     * @return Returns the String
     */
    public String getStatementDescriptor() {
        return OptionalNullable.getFrom(statementDescriptor);
    }

    /**
     * Setter for StatementDescriptor.
     * Text that will appear on the credit card's statement
     * @param statementDescriptor Value for String
     */
    @JsonSetter("statement_descriptor")
    public void setStatementDescriptor(String statementDescriptor) {
        this.statementDescriptor = OptionalNullable.of(statementDescriptor);
    }

    /**
     * UnSetter for StatementDescriptor.
     * Text that will appear on the credit card's statement
     */
    public void unsetStatementDescriptor() {
        statementDescriptor = null;
    }

    /**
     * Getter for AcquirerName.
     * Acquirer name
     * @return Returns the String
     */
    @JsonGetter("acquirer_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAcquirerName() {
        return acquirerName;
    }

    /**
     * Setter for AcquirerName.
     * Acquirer name
     * @param acquirerName Value for String
     */
    @JsonSetter("acquirer_name")
    public void setAcquirerName(String acquirerName) {
        this.acquirerName = acquirerName;
    }

    /**
     * Internal Getter for AcquirerAffiliationCode.
     * Aquirer affiliation code
     * @return Returns the Internal String
     */
    @JsonGetter("acquirer_affiliation_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAcquirerAffiliationCode() {
        return this.acquirerAffiliationCode;
    }

    /**
     * Getter for AcquirerAffiliationCode.
     * Aquirer affiliation code
     * @return Returns the String
     */
    public String getAcquirerAffiliationCode() {
        return OptionalNullable.getFrom(acquirerAffiliationCode);
    }

    /**
     * Setter for AcquirerAffiliationCode.
     * Aquirer affiliation code
     * @param acquirerAffiliationCode Value for String
     */
    @JsonSetter("acquirer_affiliation_code")
    public void setAcquirerAffiliationCode(String acquirerAffiliationCode) {
        this.acquirerAffiliationCode = OptionalNullable.of(acquirerAffiliationCode);
    }

    /**
     * UnSetter for AcquirerAffiliationCode.
     * Aquirer affiliation code
     */
    public void unsetAcquirerAffiliationCode() {
        acquirerAffiliationCode = null;
    }

    /**
     * Getter for AcquirerTid.
     * Acquirer TID
     * @return Returns the String
     */
    @JsonGetter("acquirer_tid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAcquirerTid() {
        return acquirerTid;
    }

    /**
     * Setter for AcquirerTid.
     * Acquirer TID
     * @param acquirerTid Value for String
     */
    @JsonSetter("acquirer_tid")
    public void setAcquirerTid(String acquirerTid) {
        this.acquirerTid = acquirerTid;
    }

    /**
     * Getter for AcquirerNsu.
     * Acquirer NSU
     * @return Returns the String
     */
    @JsonGetter("acquirer_nsu")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAcquirerNsu() {
        return acquirerNsu;
    }

    /**
     * Setter for AcquirerNsu.
     * Acquirer NSU
     * @param acquirerNsu Value for String
     */
    @JsonSetter("acquirer_nsu")
    public void setAcquirerNsu(String acquirerNsu) {
        this.acquirerNsu = acquirerNsu;
    }

    /**
     * Internal Getter for AcquirerAuthCode.
     * Acquirer authorization code
     * @return Returns the Internal String
     */
    @JsonGetter("acquirer_auth_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAcquirerAuthCode() {
        return this.acquirerAuthCode;
    }

    /**
     * Getter for AcquirerAuthCode.
     * Acquirer authorization code
     * @return Returns the String
     */
    public String getAcquirerAuthCode() {
        return OptionalNullable.getFrom(acquirerAuthCode);
    }

    /**
     * Setter for AcquirerAuthCode.
     * Acquirer authorization code
     * @param acquirerAuthCode Value for String
     */
    @JsonSetter("acquirer_auth_code")
    public void setAcquirerAuthCode(String acquirerAuthCode) {
        this.acquirerAuthCode = OptionalNullable.of(acquirerAuthCode);
    }

    /**
     * UnSetter for AcquirerAuthCode.
     * Acquirer authorization code
     */
    public void unsetAcquirerAuthCode() {
        acquirerAuthCode = null;
    }

    /**
     * Internal Getter for OperationType.
     * Operation type
     * @return Returns the Internal String
     */
    @JsonGetter("operation_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOperationType() {
        return this.operationType;
    }

    /**
     * Getter for OperationType.
     * Operation type
     * @return Returns the String
     */
    public String getOperationType() {
        return OptionalNullable.getFrom(operationType);
    }

    /**
     * Setter for OperationType.
     * Operation type
     * @param operationType Value for String
     */
    @JsonSetter("operation_type")
    public void setOperationType(String operationType) {
        this.operationType = OptionalNullable.of(operationType);
    }

    /**
     * UnSetter for OperationType.
     * Operation type
     */
    public void unsetOperationType() {
        operationType = null;
    }

    /**
     * Internal Getter for Card.
     * Card data
     * @return Returns the Internal GetCardResponse
     */
    @JsonGetter("card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetCardResponse> internalGetCard() {
        return this.card;
    }

    /**
     * Getter for Card.
     * Card data
     * @return Returns the GetCardResponse
     */
    public GetCardResponse getCard() {
        return OptionalNullable.getFrom(card);
    }

    /**
     * Setter for Card.
     * Card data
     * @param card Value for GetCardResponse
     */
    @JsonSetter("card")
    public void setCard(GetCardResponse card) {
        this.card = OptionalNullable.of(card);
    }

    /**
     * UnSetter for Card.
     * Card data
     */
    public void unsetCard() {
        card = null;
    }

    /**
     * Internal Getter for AcquirerMessage.
     * Acquirer message
     * @return Returns the Internal String
     */
    @JsonGetter("acquirer_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAcquirerMessage() {
        return this.acquirerMessage;
    }

    /**
     * Getter for AcquirerMessage.
     * Acquirer message
     * @return Returns the String
     */
    public String getAcquirerMessage() {
        return OptionalNullable.getFrom(acquirerMessage);
    }

    /**
     * Setter for AcquirerMessage.
     * Acquirer message
     * @param acquirerMessage Value for String
     */
    @JsonSetter("acquirer_message")
    public void setAcquirerMessage(String acquirerMessage) {
        this.acquirerMessage = OptionalNullable.of(acquirerMessage);
    }

    /**
     * UnSetter for AcquirerMessage.
     * Acquirer message
     */
    public void unsetAcquirerMessage() {
        acquirerMessage = null;
    }

    /**
     * Internal Getter for AcquirerReturnCode.
     * Acquirer Return Code
     * @return Returns the Internal String
     */
    @JsonGetter("acquirer_return_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAcquirerReturnCode() {
        return this.acquirerReturnCode;
    }

    /**
     * Getter for AcquirerReturnCode.
     * Acquirer Return Code
     * @return Returns the String
     */
    public String getAcquirerReturnCode() {
        return OptionalNullable.getFrom(acquirerReturnCode);
    }

    /**
     * Setter for AcquirerReturnCode.
     * Acquirer Return Code
     * @param acquirerReturnCode Value for String
     */
    @JsonSetter("acquirer_return_code")
    public void setAcquirerReturnCode(String acquirerReturnCode) {
        this.acquirerReturnCode = OptionalNullable.of(acquirerReturnCode);
    }

    /**
     * UnSetter for AcquirerReturnCode.
     * Acquirer Return Code
     */
    public void unsetAcquirerReturnCode() {
        acquirerReturnCode = null;
    }

    /**
     * Internal Getter for Installments.
     * Number of installments
     * @return Returns the Internal Integer
     */
    @JsonGetter("installments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInstallments() {
        return this.installments;
    }

    /**
     * Getter for Installments.
     * Number of installments
     * @return Returns the Integer
     */
    public Integer getInstallments() {
        return OptionalNullable.getFrom(installments);
    }

    /**
     * Setter for Installments.
     * Number of installments
     * @param installments Value for Integer
     */
    @JsonSetter("installments")
    public void setInstallments(Integer installments) {
        this.installments = OptionalNullable.of(installments);
    }

    /**
     * UnSetter for Installments.
     * Number of installments
     */
    public void unsetInstallments() {
        installments = null;
    }

    /**
     * Internal Getter for ThreedAuthenticationUrl.
     * 3D-S authentication Url
     * @return Returns the Internal String
     */
    @JsonGetter("threed_authentication_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetThreedAuthenticationUrl() {
        return this.threedAuthenticationUrl;
    }

    /**
     * Getter for ThreedAuthenticationUrl.
     * 3D-S authentication Url
     * @return Returns the String
     */
    public String getThreedAuthenticationUrl() {
        return OptionalNullable.getFrom(threedAuthenticationUrl);
    }

    /**
     * Setter for ThreedAuthenticationUrl.
     * 3D-S authentication Url
     * @param threedAuthenticationUrl Value for String
     */
    @JsonSetter("threed_authentication_url")
    public void setThreedAuthenticationUrl(String threedAuthenticationUrl) {
        this.threedAuthenticationUrl = OptionalNullable.of(threedAuthenticationUrl);
    }

    /**
     * UnSetter for ThreedAuthenticationUrl.
     * 3D-S authentication Url
     */
    public void unsetThreedAuthenticationUrl() {
        threedAuthenticationUrl = null;
    }

    /**
     * Internal Getter for FundingSource.
     * Identify when a card is prepaid, credit or debit.
     * @return Returns the Internal String
     */
    @JsonGetter("funding_source")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFundingSource() {
        return this.fundingSource;
    }

    /**
     * Getter for FundingSource.
     * Identify when a card is prepaid, credit or debit.
     * @return Returns the String
     */
    public String getFundingSource() {
        return OptionalNullable.getFrom(fundingSource);
    }

    /**
     * Setter for FundingSource.
     * Identify when a card is prepaid, credit or debit.
     * @param fundingSource Value for String
     */
    @JsonSetter("funding_source")
    public void setFundingSource(String fundingSource) {
        this.fundingSource = OptionalNullable.of(fundingSource);
    }

    /**
     * UnSetter for FundingSource.
     * Identify when a card is prepaid, credit or debit.
     */
    public void unsetFundingSource() {
        fundingSource = null;
    }

    /**
     * Internal Getter for RetryInfo.
     * Retry transaction information
     * @return Returns the Internal GetRetryTransactionInformationResponse
     */
    @JsonGetter("retry_info")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetRetryTransactionInformationResponse> internalGetRetryInfo() {
        return this.retryInfo;
    }

    /**
     * Getter for RetryInfo.
     * Retry transaction information
     * @return Returns the GetRetryTransactionInformationResponse
     */
    public GetRetryTransactionInformationResponse getRetryInfo() {
        return OptionalNullable.getFrom(retryInfo);
    }

    /**
     * Setter for RetryInfo.
     * Retry transaction information
     * @param retryInfo Value for GetRetryTransactionInformationResponse
     */
    @JsonSetter("retry_info")
    public void setRetryInfo(GetRetryTransactionInformationResponse retryInfo) {
        this.retryInfo = OptionalNullable.of(retryInfo);
    }

    /**
     * UnSetter for RetryInfo.
     * Retry transaction information
     */
    public void unsetRetryInfo() {
        retryInfo = null;
    }

    /**
     * Converts this GetCreditCardTransactionResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetCreditCardTransactionResponse [" + "statementDescriptor=" + statementDescriptor
                + ", acquirerName=" + acquirerName + ", acquirerAffiliationCode="
                + acquirerAffiliationCode + ", acquirerTid=" + acquirerTid + ", acquirerNsu="
                + acquirerNsu + ", acquirerAuthCode=" + acquirerAuthCode + ", operationType="
                + operationType + ", card=" + card + ", acquirerMessage=" + acquirerMessage
                + ", acquirerReturnCode=" + acquirerReturnCode + ", installments=" + installments
                + ", threedAuthenticationUrl=" + threedAuthenticationUrl + ", fundingSource="
                + fundingSource + ", retryInfo=" + retryInfo + ", gatewayId=" + getGatewayId()
                + ", amount=" + getAmount() + ", status=" + getStatus() + ", success="
                + getSuccess() + ", createdAt=" + getCreatedAt() + ", updatedAt=" + getUpdatedAt()
                + ", attemptCount=" + getAttemptCount() + ", maxAttempts=" + getMaxAttempts()
                + ", splits=" + getSplits() + ", nextAttempt=" + getNextAttempt()
                + ", transactionType=" + getTransactionType() + ", id=" + getId()
                + ", gatewayResponse=" + getGatewayResponse() + ", antifraudResponse="
                + getAntifraudResponse() + ", metadata=" + getMetadata() + ", split=" + getSplit()
                + ", interest=" + getInterest() + ", fine=" + getFine() + ", maxDaysToPayPastDue="
                + getMaxDaysToPayPastDue() + "]";
    }

    /**
     * Builds a new {@link GetCreditCardTransactionResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetCreditCardTransactionResponse.Builder} object
     */
    public Builder toGetCreditCardTransactionResponseBuilder() {
        Builder builder = new Builder()
                .acquirerName(getAcquirerName())
                .acquirerTid(getAcquirerTid())
                .acquirerNsu(getAcquirerNsu())
                .transactionType(getTransactionType());
        builder.statementDescriptor = internalGetStatementDescriptor();
        builder.acquirerAffiliationCode = internalGetAcquirerAffiliationCode();
        builder.acquirerAuthCode = internalGetAcquirerAuthCode();
        builder.operationType = internalGetOperationType();
        builder.card = internalGetCard();
        builder.acquirerMessage = internalGetAcquirerMessage();
        builder.acquirerReturnCode = internalGetAcquirerReturnCode();
        builder.installments = internalGetInstallments();
        builder.threedAuthenticationUrl = internalGetThreedAuthenticationUrl();
        builder.fundingSource = internalGetFundingSource();
        builder.retryInfo = internalGetRetryInfo();
        builder.gatewayId = internalGetGatewayId();
        builder.amount = internalGetAmount();
        builder.status = internalGetStatus();
        builder.success = internalGetSuccess();
        builder.createdAt = internalGetCreatedAt();
        builder.updatedAt = internalGetUpdatedAt();
        builder.attemptCount = internalGetAttemptCount();
        builder.maxAttempts = internalGetMaxAttempts();
        builder.splits = internalGetSplits();
        builder.nextAttempt = internalGetNextAttempt();
        builder.id = internalGetId();
        builder.gatewayResponse = internalGetGatewayResponse();
        builder.antifraudResponse = internalGetAntifraudResponse();
        builder.metadata = internalGetMetadata();
        builder.split = internalGetSplit();
        builder.interest = internalGetInterest();
        builder.fine = internalGetFine();
        builder.maxDaysToPayPastDue = internalGetMaxDaysToPayPastDue();
        return builder;
    }

    /**
     * Class to build instances of {@link GetCreditCardTransactionResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> gatewayId;
        private OptionalNullable<Integer> amount;
        private OptionalNullable<String> status;
        private OptionalNullable<Boolean> success;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<LocalDateTime> updatedAt;
        private OptionalNullable<Integer> attemptCount;
        private OptionalNullable<Integer> maxAttempts;
        private OptionalNullable<List<GetSplitResponse>> splits;
        private OptionalNullable<LocalDateTime> nextAttempt;
        private String transactionType = "credit_card";
        private OptionalNullable<String> id;
        private OptionalNullable<GetGatewayResponseResponse> gatewayResponse;
        private OptionalNullable<GetAntifraudResponse> antifraudResponse;
        private OptionalNullable<Map<String, String>> metadata;
        private OptionalNullable<List<GetSplitResponse>> split;
        private OptionalNullable<GetInterestResponse> interest;
        private OptionalNullable<GetFineResponse> fine;
        private OptionalNullable<Integer> maxDaysToPayPastDue;
        private OptionalNullable<String> statementDescriptor;
        private String acquirerName;
        private OptionalNullable<String> acquirerAffiliationCode;
        private String acquirerTid;
        private String acquirerNsu;
        private OptionalNullable<String> acquirerAuthCode;
        private OptionalNullable<String> operationType;
        private OptionalNullable<GetCardResponse> card;
        private OptionalNullable<String> acquirerMessage;
        private OptionalNullable<String> acquirerReturnCode;
        private OptionalNullable<Integer> installments;
        private OptionalNullable<String> threedAuthenticationUrl;
        private OptionalNullable<String> fundingSource;
        private OptionalNullable<GetRetryTransactionInformationResponse> retryInfo;



        /**
         * Setter for gatewayId.
         * @param  gatewayId  String value for gatewayId.
         * @return Builder
         */
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = OptionalNullable.of(gatewayId);
            return this;
        }

        /**
         * UnSetter for gatewayId.
         * @return Builder
         */
        public Builder unsetGatewayId() {
            gatewayId = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for success.
         * @param  success  Boolean value for success.
         * @return Builder
         */
        public Builder success(Boolean success) {
            this.success = OptionalNullable.of(success);
            return this;
        }

        /**
         * UnSetter for success.
         * @return Builder
         */
        public Builder unsetSuccess() {
            success = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = OptionalNullable.of(updatedAt);
            return this;
        }

        /**
         * UnSetter for updatedAt.
         * @return Builder
         */
        public Builder unsetUpdatedAt() {
            updatedAt = null;
            return this;
        }

        /**
         * Setter for attemptCount.
         * @param  attemptCount  Integer value for attemptCount.
         * @return Builder
         */
        public Builder attemptCount(Integer attemptCount) {
            this.attemptCount = OptionalNullable.of(attemptCount);
            return this;
        }

        /**
         * UnSetter for attemptCount.
         * @return Builder
         */
        public Builder unsetAttemptCount() {
            attemptCount = null;
            return this;
        }

        /**
         * Setter for maxAttempts.
         * @param  maxAttempts  Integer value for maxAttempts.
         * @return Builder
         */
        public Builder maxAttempts(Integer maxAttempts) {
            this.maxAttempts = OptionalNullable.of(maxAttempts);
            return this;
        }

        /**
         * UnSetter for maxAttempts.
         * @return Builder
         */
        public Builder unsetMaxAttempts() {
            maxAttempts = null;
            return this;
        }

        /**
         * Setter for splits.
         * @param  splits  List of GetSplitResponse value for splits.
         * @return Builder
         */
        public Builder splits(List<GetSplitResponse> splits) {
            this.splits = OptionalNullable.of(splits);
            return this;
        }

        /**
         * UnSetter for splits.
         * @return Builder
         */
        public Builder unsetSplits() {
            splits = null;
            return this;
        }

        /**
         * Setter for nextAttempt.
         * @param  nextAttempt  LocalDateTime value for nextAttempt.
         * @return Builder
         */
        public Builder nextAttempt(LocalDateTime nextAttempt) {
            this.nextAttempt = OptionalNullable.of(nextAttempt);
            return this;
        }

        /**
         * UnSetter for nextAttempt.
         * @return Builder
         */
        public Builder unsetNextAttempt() {
            nextAttempt = null;
            return this;
        }

        /**
         * Setter for transactionType.
         * @param  transactionType  String value for transactionType.
         * @return Builder
         */
        public Builder transactionType(String transactionType) {
            this.transactionType = transactionType;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for gatewayResponse.
         * @param  gatewayResponse  GetGatewayResponseResponse value for gatewayResponse.
         * @return Builder
         */
        public Builder gatewayResponse(GetGatewayResponseResponse gatewayResponse) {
            this.gatewayResponse = OptionalNullable.of(gatewayResponse);
            return this;
        }

        /**
         * UnSetter for gatewayResponse.
         * @return Builder
         */
        public Builder unsetGatewayResponse() {
            gatewayResponse = null;
            return this;
        }

        /**
         * Setter for antifraudResponse.
         * @param  antifraudResponse  GetAntifraudResponse value for antifraudResponse.
         * @return Builder
         */
        public Builder antifraudResponse(GetAntifraudResponse antifraudResponse) {
            this.antifraudResponse = OptionalNullable.of(antifraudResponse);
            return this;
        }

        /**
         * UnSetter for antifraudResponse.
         * @return Builder
         */
        public Builder unsetAntifraudResponse() {
            antifraudResponse = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = OptionalNullable.of(metadata);
            return this;
        }

        /**
         * UnSetter for metadata.
         * @return Builder
         */
        public Builder unsetMetadata() {
            metadata = null;
            return this;
        }

        /**
         * Setter for split.
         * @param  split  List of GetSplitResponse value for split.
         * @return Builder
         */
        public Builder split(List<GetSplitResponse> split) {
            this.split = OptionalNullable.of(split);
            return this;
        }

        /**
         * UnSetter for split.
         * @return Builder
         */
        public Builder unsetSplit() {
            split = null;
            return this;
        }

        /**
         * Setter for interest.
         * @param  interest  GetInterestResponse value for interest.
         * @return Builder
         */
        public Builder interest(GetInterestResponse interest) {
            this.interest = OptionalNullable.of(interest);
            return this;
        }

        /**
         * UnSetter for interest.
         * @return Builder
         */
        public Builder unsetInterest() {
            interest = null;
            return this;
        }

        /**
         * Setter for fine.
         * @param  fine  GetFineResponse value for fine.
         * @return Builder
         */
        public Builder fine(GetFineResponse fine) {
            this.fine = OptionalNullable.of(fine);
            return this;
        }

        /**
         * UnSetter for fine.
         * @return Builder
         */
        public Builder unsetFine() {
            fine = null;
            return this;
        }

        /**
         * Setter for maxDaysToPayPastDue.
         * @param  maxDaysToPayPastDue  Integer value for maxDaysToPayPastDue.
         * @return Builder
         */
        public Builder maxDaysToPayPastDue(Integer maxDaysToPayPastDue) {
            this.maxDaysToPayPastDue = OptionalNullable.of(maxDaysToPayPastDue);
            return this;
        }

        /**
         * UnSetter for maxDaysToPayPastDue.
         * @return Builder
         */
        public Builder unsetMaxDaysToPayPastDue() {
            maxDaysToPayPastDue = null;
            return this;
        }

        /**
         * Setter for statementDescriptor.
         * @param  statementDescriptor  String value for statementDescriptor.
         * @return Builder
         */
        public Builder statementDescriptor(String statementDescriptor) {
            this.statementDescriptor = OptionalNullable.of(statementDescriptor);
            return this;
        }

        /**
         * UnSetter for statementDescriptor.
         * @return Builder
         */
        public Builder unsetStatementDescriptor() {
            statementDescriptor = null;
            return this;
        }

        /**
         * Setter for acquirerName.
         * @param  acquirerName  String value for acquirerName.
         * @return Builder
         */
        public Builder acquirerName(String acquirerName) {
            this.acquirerName = acquirerName;
            return this;
        }

        /**
         * Setter for acquirerAffiliationCode.
         * @param  acquirerAffiliationCode  String value for acquirerAffiliationCode.
         * @return Builder
         */
        public Builder acquirerAffiliationCode(String acquirerAffiliationCode) {
            this.acquirerAffiliationCode = OptionalNullable.of(acquirerAffiliationCode);
            return this;
        }

        /**
         * UnSetter for acquirerAffiliationCode.
         * @return Builder
         */
        public Builder unsetAcquirerAffiliationCode() {
            acquirerAffiliationCode = null;
            return this;
        }

        /**
         * Setter for acquirerTid.
         * @param  acquirerTid  String value for acquirerTid.
         * @return Builder
         */
        public Builder acquirerTid(String acquirerTid) {
            this.acquirerTid = acquirerTid;
            return this;
        }

        /**
         * Setter for acquirerNsu.
         * @param  acquirerNsu  String value for acquirerNsu.
         * @return Builder
         */
        public Builder acquirerNsu(String acquirerNsu) {
            this.acquirerNsu = acquirerNsu;
            return this;
        }

        /**
         * Setter for acquirerAuthCode.
         * @param  acquirerAuthCode  String value for acquirerAuthCode.
         * @return Builder
         */
        public Builder acquirerAuthCode(String acquirerAuthCode) {
            this.acquirerAuthCode = OptionalNullable.of(acquirerAuthCode);
            return this;
        }

        /**
         * UnSetter for acquirerAuthCode.
         * @return Builder
         */
        public Builder unsetAcquirerAuthCode() {
            acquirerAuthCode = null;
            return this;
        }

        /**
         * Setter for operationType.
         * @param  operationType  String value for operationType.
         * @return Builder
         */
        public Builder operationType(String operationType) {
            this.operationType = OptionalNullable.of(operationType);
            return this;
        }

        /**
         * UnSetter for operationType.
         * @return Builder
         */
        public Builder unsetOperationType() {
            operationType = null;
            return this;
        }

        /**
         * Setter for card.
         * @param  card  GetCardResponse value for card.
         * @return Builder
         */
        public Builder card(GetCardResponse card) {
            this.card = OptionalNullable.of(card);
            return this;
        }

        /**
         * UnSetter for card.
         * @return Builder
         */
        public Builder unsetCard() {
            card = null;
            return this;
        }

        /**
         * Setter for acquirerMessage.
         * @param  acquirerMessage  String value for acquirerMessage.
         * @return Builder
         */
        public Builder acquirerMessage(String acquirerMessage) {
            this.acquirerMessage = OptionalNullable.of(acquirerMessage);
            return this;
        }

        /**
         * UnSetter for acquirerMessage.
         * @return Builder
         */
        public Builder unsetAcquirerMessage() {
            acquirerMessage = null;
            return this;
        }

        /**
         * Setter for acquirerReturnCode.
         * @param  acquirerReturnCode  String value for acquirerReturnCode.
         * @return Builder
         */
        public Builder acquirerReturnCode(String acquirerReturnCode) {
            this.acquirerReturnCode = OptionalNullable.of(acquirerReturnCode);
            return this;
        }

        /**
         * UnSetter for acquirerReturnCode.
         * @return Builder
         */
        public Builder unsetAcquirerReturnCode() {
            acquirerReturnCode = null;
            return this;
        }

        /**
         * Setter for installments.
         * @param  installments  Integer value for installments.
         * @return Builder
         */
        public Builder installments(Integer installments) {
            this.installments = OptionalNullable.of(installments);
            return this;
        }

        /**
         * UnSetter for installments.
         * @return Builder
         */
        public Builder unsetInstallments() {
            installments = null;
            return this;
        }

        /**
         * Setter for threedAuthenticationUrl.
         * @param  threedAuthenticationUrl  String value for threedAuthenticationUrl.
         * @return Builder
         */
        public Builder threedAuthenticationUrl(String threedAuthenticationUrl) {
            this.threedAuthenticationUrl = OptionalNullable.of(threedAuthenticationUrl);
            return this;
        }

        /**
         * UnSetter for threedAuthenticationUrl.
         * @return Builder
         */
        public Builder unsetThreedAuthenticationUrl() {
            threedAuthenticationUrl = null;
            return this;
        }

        /**
         * Setter for fundingSource.
         * @param  fundingSource  String value for fundingSource.
         * @return Builder
         */
        public Builder fundingSource(String fundingSource) {
            this.fundingSource = OptionalNullable.of(fundingSource);
            return this;
        }

        /**
         * UnSetter for fundingSource.
         * @return Builder
         */
        public Builder unsetFundingSource() {
            fundingSource = null;
            return this;
        }

        /**
         * Setter for retryInfo.
         * @param  retryInfo  GetRetryTransactionInformationResponse value for retryInfo.
         * @return Builder
         */
        public Builder retryInfo(GetRetryTransactionInformationResponse retryInfo) {
            this.retryInfo = OptionalNullable.of(retryInfo);
            return this;
        }

        /**
         * UnSetter for retryInfo.
         * @return Builder
         */
        public Builder unsetRetryInfo() {
            retryInfo = null;
            return this;
        }

        /**
         * Builds a new {@link GetCreditCardTransactionResponse} object using the set fields.
         * @return {@link GetCreditCardTransactionResponse}
         */
        public GetCreditCardTransactionResponse build() {
            return new GetCreditCardTransactionResponse(gatewayId, amount, status, success,
                    createdAt, updatedAt, attemptCount, maxAttempts, splits, nextAttempt,
                    transactionType, id, gatewayResponse, antifraudResponse, metadata, split,
                    interest, fine, maxDaysToPayPastDue, statementDescriptor, acquirerName,
                    acquirerAffiliationCode, acquirerTid, acquirerNsu, acquirerAuthCode,
                    operationType, card, acquirerMessage, acquirerReturnCode, installments,
                    threedAuthenticationUrl, fundingSource, retryInfo);
        }
    }
}
