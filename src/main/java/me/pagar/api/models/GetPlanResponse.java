/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetPlanResponse type.
 */
public class GetPlanResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<String> name;
    private OptionalNullable<String> description;
    private OptionalNullable<String> url;
    private OptionalNullable<String> statementDescriptor;
    private OptionalNullable<String> interval;
    private OptionalNullable<Integer> intervalCount;
    private OptionalNullable<String> billingType;
    private OptionalNullable<List<String>> paymentMethods;
    private OptionalNullable<List<Integer>> installments;
    private OptionalNullable<String> status;
    private OptionalNullable<String> currency;
    private OptionalNullable<LocalDateTime> createdAt;
    private OptionalNullable<LocalDateTime> updatedAt;
    private OptionalNullable<List<GetPlanItemResponse>> items;
    private OptionalNullable<List<Integer>> billingDays;
    private OptionalNullable<Boolean> shippable;
    private OptionalNullable<Map<String, String>> metadata;
    private OptionalNullable<Integer> trialPeriodDays;
    private OptionalNullable<Integer> minimumPrice;
    private OptionalNullable<LocalDateTime> deletedAt;

    /**
     * Default constructor.
     */
    public GetPlanResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  url  String value for url.
     * @param  statementDescriptor  String value for statementDescriptor.
     * @param  interval  String value for interval.
     * @param  intervalCount  Integer value for intervalCount.
     * @param  billingType  String value for billingType.
     * @param  paymentMethods  List of String value for paymentMethods.
     * @param  installments  List of Integer value for installments.
     * @param  status  String value for status.
     * @param  currency  String value for currency.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  items  List of GetPlanItemResponse value for items.
     * @param  billingDays  List of Integer value for billingDays.
     * @param  shippable  Boolean value for shippable.
     * @param  metadata  Map of String, value for metadata.
     * @param  trialPeriodDays  Integer value for trialPeriodDays.
     * @param  minimumPrice  Integer value for minimumPrice.
     * @param  deletedAt  LocalDateTime value for deletedAt.
     */
    public GetPlanResponse(
            String id,
            String name,
            String description,
            String url,
            String statementDescriptor,
            String interval,
            Integer intervalCount,
            String billingType,
            List<String> paymentMethods,
            List<Integer> installments,
            String status,
            String currency,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            List<GetPlanItemResponse> items,
            List<Integer> billingDays,
            Boolean shippable,
            Map<String, String> metadata,
            Integer trialPeriodDays,
            Integer minimumPrice,
            LocalDateTime deletedAt) {
        this.id = OptionalNullable.of(id);
        this.name = OptionalNullable.of(name);
        this.description = OptionalNullable.of(description);
        this.url = OptionalNullable.of(url);
        this.statementDescriptor = OptionalNullable.of(statementDescriptor);
        this.interval = OptionalNullable.of(interval);
        this.intervalCount = OptionalNullable.of(intervalCount);
        this.billingType = OptionalNullable.of(billingType);
        this.paymentMethods = OptionalNullable.of(paymentMethods);
        this.installments = OptionalNullable.of(installments);
        this.status = OptionalNullable.of(status);
        this.currency = OptionalNullable.of(currency);
        this.createdAt = OptionalNullable.of(createdAt);
        this.updatedAt = OptionalNullable.of(updatedAt);
        this.items = OptionalNullable.of(items);
        this.billingDays = OptionalNullable.of(billingDays);
        this.shippable = OptionalNullable.of(shippable);
        this.metadata = OptionalNullable.of(metadata);
        this.trialPeriodDays = OptionalNullable.of(trialPeriodDays);
        this.minimumPrice = OptionalNullable.of(minimumPrice);
        this.deletedAt = OptionalNullable.of(deletedAt);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetPlanResponse(OptionalNullable<String> id, OptionalNullable<String> name,
            OptionalNullable<String> description, OptionalNullable<String> url,
            OptionalNullable<String> statementDescriptor, OptionalNullable<String> interval,
            OptionalNullable<Integer> intervalCount, OptionalNullable<String> billingType,
            OptionalNullable<List<String>> paymentMethods,
            OptionalNullable<List<Integer>> installments, OptionalNullable<String> status,
            OptionalNullable<String> currency, OptionalNullable<LocalDateTime> createdAt,
            OptionalNullable<LocalDateTime> updatedAt,
            OptionalNullable<List<GetPlanItemResponse>> items,
            OptionalNullable<List<Integer>> billingDays, OptionalNullable<Boolean> shippable,
            OptionalNullable<Map<String, String>> metadata,
            OptionalNullable<Integer> trialPeriodDays, OptionalNullable<Integer> minimumPrice,
            OptionalNullable<LocalDateTime> deletedAt) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.url = url;
        this.statementDescriptor = statementDescriptor;
        this.interval = interval;
        this.intervalCount = intervalCount;
        this.billingType = billingType;
        this.paymentMethods = paymentMethods;
        this.installments = installments;
        this.status = status;
        this.currency = currency;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.items = items;
        this.billingDays = billingDays;
        this.shippable = shippable;
        this.metadata = metadata;
        this.trialPeriodDays = trialPeriodDays;
        this.minimumPrice = minimumPrice;
        this.deletedAt = deletedAt;
    }

    /**
     * Internal Getter for Id.
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for Name.
     * @return Returns the Internal String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetName() {
        return this.name;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    public String getName() {
        return OptionalNullable.getFrom(name);
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = OptionalNullable.of(name);
    }

    /**
     * UnSetter for Name.
     */
    public void unsetName() {
        name = null;
    }

    /**
     * Internal Getter for Description.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Internal Getter for Url.
     * @return Returns the Internal String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUrl() {
        return this.url;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    public String getUrl() {
        return OptionalNullable.getFrom(url);
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = OptionalNullable.of(url);
    }

    /**
     * UnSetter for Url.
     */
    public void unsetUrl() {
        url = null;
    }

    /**
     * Internal Getter for StatementDescriptor.
     * @return Returns the Internal String
     */
    @JsonGetter("statement_descriptor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementDescriptor() {
        return this.statementDescriptor;
    }

    /**
     * Getter for StatementDescriptor.
     * @return Returns the String
     */
    public String getStatementDescriptor() {
        return OptionalNullable.getFrom(statementDescriptor);
    }

    /**
     * Setter for StatementDescriptor.
     * @param statementDescriptor Value for String
     */
    @JsonSetter("statement_descriptor")
    public void setStatementDescriptor(String statementDescriptor) {
        this.statementDescriptor = OptionalNullable.of(statementDescriptor);
    }

    /**
     * UnSetter for StatementDescriptor.
     */
    public void unsetStatementDescriptor() {
        statementDescriptor = null;
    }

    /**
     * Internal Getter for Interval.
     * @return Returns the Internal String
     */
    @JsonGetter("interval")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInterval() {
        return this.interval;
    }

    /**
     * Getter for Interval.
     * @return Returns the String
     */
    public String getInterval() {
        return OptionalNullable.getFrom(interval);
    }

    /**
     * Setter for Interval.
     * @param interval Value for String
     */
    @JsonSetter("interval")
    public void setInterval(String interval) {
        this.interval = OptionalNullable.of(interval);
    }

    /**
     * UnSetter for Interval.
     */
    public void unsetInterval() {
        interval = null;
    }

    /**
     * Internal Getter for IntervalCount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("interval_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIntervalCount() {
        return this.intervalCount;
    }

    /**
     * Getter for IntervalCount.
     * @return Returns the Integer
     */
    public Integer getIntervalCount() {
        return OptionalNullable.getFrom(intervalCount);
    }

    /**
     * Setter for IntervalCount.
     * @param intervalCount Value for Integer
     */
    @JsonSetter("interval_count")
    public void setIntervalCount(Integer intervalCount) {
        this.intervalCount = OptionalNullable.of(intervalCount);
    }

    /**
     * UnSetter for IntervalCount.
     */
    public void unsetIntervalCount() {
        intervalCount = null;
    }

    /**
     * Internal Getter for BillingType.
     * @return Returns the Internal String
     */
    @JsonGetter("billing_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingType() {
        return this.billingType;
    }

    /**
     * Getter for BillingType.
     * @return Returns the String
     */
    public String getBillingType() {
        return OptionalNullable.getFrom(billingType);
    }

    /**
     * Setter for BillingType.
     * @param billingType Value for String
     */
    @JsonSetter("billing_type")
    public void setBillingType(String billingType) {
        this.billingType = OptionalNullable.of(billingType);
    }

    /**
     * UnSetter for BillingType.
     */
    public void unsetBillingType() {
        billingType = null;
    }

    /**
     * Internal Getter for PaymentMethods.
     * @return Returns the Internal List of String
     */
    @JsonGetter("payment_methods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetPaymentMethods() {
        return this.paymentMethods;
    }

    /**
     * Getter for PaymentMethods.
     * @return Returns the List of String
     */
    public List<String> getPaymentMethods() {
        return OptionalNullable.getFrom(paymentMethods);
    }

    /**
     * Setter for PaymentMethods.
     * @param paymentMethods Value for List of String
     */
    @JsonSetter("payment_methods")
    public void setPaymentMethods(List<String> paymentMethods) {
        this.paymentMethods = OptionalNullable.of(paymentMethods);
    }

    /**
     * UnSetter for PaymentMethods.
     */
    public void unsetPaymentMethods() {
        paymentMethods = null;
    }

    /**
     * Internal Getter for Installments.
     * @return Returns the Internal List of Integer
     */
    @JsonGetter("installments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<Integer>> internalGetInstallments() {
        return this.installments;
    }

    /**
     * Getter for Installments.
     * @return Returns the List of Integer
     */
    public List<Integer> getInstallments() {
        return OptionalNullable.getFrom(installments);
    }

    /**
     * Setter for Installments.
     * @param installments Value for List of Integer
     */
    @JsonSetter("installments")
    public void setInstallments(List<Integer> installments) {
        this.installments = OptionalNullable.of(installments);
    }

    /**
     * UnSetter for Installments.
     */
    public void unsetInstallments() {
        installments = null;
    }

    /**
     * Internal Getter for Status.
     * @return Returns the Internal String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for Currency.
     * @return Returns the Internal String
     */
    @JsonGetter("currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrency() {
        return this.currency;
    }

    /**
     * Getter for Currency.
     * @return Returns the String
     */
    public String getCurrency() {
        return OptionalNullable.getFrom(currency);
    }

    /**
     * Setter for Currency.
     * @param currency Value for String
     */
    @JsonSetter("currency")
    public void setCurrency(String currency) {
        this.currency = OptionalNullable.of(currency);
    }

    /**
     * UnSetter for Currency.
     */
    public void unsetCurrency() {
        currency = null;
    }

    /**
     * Internal Getter for CreatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCreatedAt() {
        return OptionalNullable.getFrom(createdAt);
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = OptionalNullable.of(createdAt);
    }

    /**
     * UnSetter for CreatedAt.
     */
    public void unsetCreatedAt() {
        createdAt = null;
    }

    /**
     * Internal Getter for UpdatedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getUpdatedAt() {
        return OptionalNullable.getFrom(updatedAt);
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = OptionalNullable.of(updatedAt);
    }

    /**
     * UnSetter for UpdatedAt.
     */
    public void unsetUpdatedAt() {
        updatedAt = null;
    }

    /**
     * Internal Getter for Items.
     * @return Returns the Internal List of GetPlanItemResponse
     */
    @JsonGetter("items")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<GetPlanItemResponse>> internalGetItems() {
        return this.items;
    }

    /**
     * Getter for Items.
     * @return Returns the List of GetPlanItemResponse
     */
    public List<GetPlanItemResponse> getItems() {
        return OptionalNullable.getFrom(items);
    }

    /**
     * Setter for Items.
     * @param items Value for List of GetPlanItemResponse
     */
    @JsonSetter("items")
    public void setItems(List<GetPlanItemResponse> items) {
        this.items = OptionalNullable.of(items);
    }

    /**
     * UnSetter for Items.
     */
    public void unsetItems() {
        items = null;
    }

    /**
     * Internal Getter for BillingDays.
     * @return Returns the Internal List of Integer
     */
    @JsonGetter("billing_days")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<Integer>> internalGetBillingDays() {
        return this.billingDays;
    }

    /**
     * Getter for BillingDays.
     * @return Returns the List of Integer
     */
    public List<Integer> getBillingDays() {
        return OptionalNullable.getFrom(billingDays);
    }

    /**
     * Setter for BillingDays.
     * @param billingDays Value for List of Integer
     */
    @JsonSetter("billing_days")
    public void setBillingDays(List<Integer> billingDays) {
        this.billingDays = OptionalNullable.of(billingDays);
    }

    /**
     * UnSetter for BillingDays.
     */
    public void unsetBillingDays() {
        billingDays = null;
    }

    /**
     * Internal Getter for Shippable.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("shippable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetShippable() {
        return this.shippable;
    }

    /**
     * Getter for Shippable.
     * @return Returns the Boolean
     */
    public Boolean getShippable() {
        return OptionalNullable.getFrom(shippable);
    }

    /**
     * Setter for Shippable.
     * @param shippable Value for Boolean
     */
    @JsonSetter("shippable")
    public void setShippable(Boolean shippable) {
        this.shippable = OptionalNullable.of(shippable);
    }

    /**
     * UnSetter for Shippable.
     */
    public void unsetShippable() {
        shippable = null;
    }

    /**
     * Internal Getter for Metadata.
     * @return Returns the Internal Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Map<String, String>> internalGetMetadata() {
        return this.metadata;
    }

    /**
     * Getter for Metadata.
     * @return Returns the Map of String, String
     */
    public Map<String, String> getMetadata() {
        return OptionalNullable.getFrom(metadata);
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = OptionalNullable.of(metadata);
    }

    /**
     * UnSetter for Metadata.
     */
    public void unsetMetadata() {
        metadata = null;
    }

    /**
     * Internal Getter for TrialPeriodDays.
     * @return Returns the Internal Integer
     */
    @JsonGetter("trial_period_days")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTrialPeriodDays() {
        return this.trialPeriodDays;
    }

    /**
     * Getter for TrialPeriodDays.
     * @return Returns the Integer
     */
    public Integer getTrialPeriodDays() {
        return OptionalNullable.getFrom(trialPeriodDays);
    }

    /**
     * Setter for TrialPeriodDays.
     * @param trialPeriodDays Value for Integer
     */
    @JsonSetter("trial_period_days")
    public void setTrialPeriodDays(Integer trialPeriodDays) {
        this.trialPeriodDays = OptionalNullable.of(trialPeriodDays);
    }

    /**
     * UnSetter for TrialPeriodDays.
     */
    public void unsetTrialPeriodDays() {
        trialPeriodDays = null;
    }

    /**
     * Internal Getter for MinimumPrice.
     * @return Returns the Internal Integer
     */
    @JsonGetter("minimum_price")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMinimumPrice() {
        return this.minimumPrice;
    }

    /**
     * Getter for MinimumPrice.
     * @return Returns the Integer
     */
    public Integer getMinimumPrice() {
        return OptionalNullable.getFrom(minimumPrice);
    }

    /**
     * Setter for MinimumPrice.
     * @param minimumPrice Value for Integer
     */
    @JsonSetter("minimum_price")
    public void setMinimumPrice(Integer minimumPrice) {
        this.minimumPrice = OptionalNullable.of(minimumPrice);
    }

    /**
     * UnSetter for MinimumPrice.
     */
    public void unsetMinimumPrice() {
        minimumPrice = null;
    }

    /**
     * Internal Getter for DeletedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("deleted_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetDeletedAt() {
        return this.deletedAt;
    }

    /**
     * Getter for DeletedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getDeletedAt() {
        return OptionalNullable.getFrom(deletedAt);
    }

    /**
     * Setter for DeletedAt.
     * @param deletedAt Value for LocalDateTime
     */
    @JsonSetter("deleted_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDeletedAt(LocalDateTime deletedAt) {
        this.deletedAt = OptionalNullable.of(deletedAt);
    }

    /**
     * UnSetter for DeletedAt.
     */
    public void unsetDeletedAt() {
        deletedAt = null;
    }

    /**
     * Converts this GetPlanResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetPlanResponse [" + "id=" + id + ", name=" + name + ", description=" + description
                + ", url=" + url + ", statementDescriptor=" + statementDescriptor + ", interval="
                + interval + ", intervalCount=" + intervalCount + ", billingType=" + billingType
                + ", paymentMethods=" + paymentMethods + ", installments=" + installments
                + ", status=" + status + ", currency=" + currency + ", createdAt=" + createdAt
                + ", updatedAt=" + updatedAt + ", items=" + items + ", billingDays=" + billingDays
                + ", shippable=" + shippable + ", metadata=" + metadata + ", trialPeriodDays="
                + trialPeriodDays + ", minimumPrice=" + minimumPrice + ", deletedAt=" + deletedAt
                + "]";
    }

    /**
     * Builds a new {@link GetPlanResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetPlanResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.name = internalGetName();
        builder.description = internalGetDescription();
        builder.url = internalGetUrl();
        builder.statementDescriptor = internalGetStatementDescriptor();
        builder.interval = internalGetInterval();
        builder.intervalCount = internalGetIntervalCount();
        builder.billingType = internalGetBillingType();
        builder.paymentMethods = internalGetPaymentMethods();
        builder.installments = internalGetInstallments();
        builder.status = internalGetStatus();
        builder.currency = internalGetCurrency();
        builder.createdAt = internalGetCreatedAt();
        builder.updatedAt = internalGetUpdatedAt();
        builder.items = internalGetItems();
        builder.billingDays = internalGetBillingDays();
        builder.shippable = internalGetShippable();
        builder.metadata = internalGetMetadata();
        builder.trialPeriodDays = internalGetTrialPeriodDays();
        builder.minimumPrice = internalGetMinimumPrice();
        builder.deletedAt = internalGetDeletedAt();
        return builder;
    }

    /**
     * Class to build instances of {@link GetPlanResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<String> name;
        private OptionalNullable<String> description;
        private OptionalNullable<String> url;
        private OptionalNullable<String> statementDescriptor;
        private OptionalNullable<String> interval;
        private OptionalNullable<Integer> intervalCount;
        private OptionalNullable<String> billingType;
        private OptionalNullable<List<String>> paymentMethods;
        private OptionalNullable<List<Integer>> installments;
        private OptionalNullable<String> status;
        private OptionalNullable<String> currency;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<LocalDateTime> updatedAt;
        private OptionalNullable<List<GetPlanItemResponse>> items;
        private OptionalNullable<List<Integer>> billingDays;
        private OptionalNullable<Boolean> shippable;
        private OptionalNullable<Map<String, String>> metadata;
        private OptionalNullable<Integer> trialPeriodDays;
        private OptionalNullable<Integer> minimumPrice;
        private OptionalNullable<LocalDateTime> deletedAt;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = OptionalNullable.of(name);
            return this;
        }

        /**
         * UnSetter for name.
         * @return Builder
         */
        public Builder unsetName() {
            name = null;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = OptionalNullable.of(url);
            return this;
        }

        /**
         * UnSetter for url.
         * @return Builder
         */
        public Builder unsetUrl() {
            url = null;
            return this;
        }

        /**
         * Setter for statementDescriptor.
         * @param  statementDescriptor  String value for statementDescriptor.
         * @return Builder
         */
        public Builder statementDescriptor(String statementDescriptor) {
            this.statementDescriptor = OptionalNullable.of(statementDescriptor);
            return this;
        }

        /**
         * UnSetter for statementDescriptor.
         * @return Builder
         */
        public Builder unsetStatementDescriptor() {
            statementDescriptor = null;
            return this;
        }

        /**
         * Setter for interval.
         * @param  interval  String value for interval.
         * @return Builder
         */
        public Builder interval(String interval) {
            this.interval = OptionalNullable.of(interval);
            return this;
        }

        /**
         * UnSetter for interval.
         * @return Builder
         */
        public Builder unsetInterval() {
            interval = null;
            return this;
        }

        /**
         * Setter for intervalCount.
         * @param  intervalCount  Integer value for intervalCount.
         * @return Builder
         */
        public Builder intervalCount(Integer intervalCount) {
            this.intervalCount = OptionalNullable.of(intervalCount);
            return this;
        }

        /**
         * UnSetter for intervalCount.
         * @return Builder
         */
        public Builder unsetIntervalCount() {
            intervalCount = null;
            return this;
        }

        /**
         * Setter for billingType.
         * @param  billingType  String value for billingType.
         * @return Builder
         */
        public Builder billingType(String billingType) {
            this.billingType = OptionalNullable.of(billingType);
            return this;
        }

        /**
         * UnSetter for billingType.
         * @return Builder
         */
        public Builder unsetBillingType() {
            billingType = null;
            return this;
        }

        /**
         * Setter for paymentMethods.
         * @param  paymentMethods  List of String value for paymentMethods.
         * @return Builder
         */
        public Builder paymentMethods(List<String> paymentMethods) {
            this.paymentMethods = OptionalNullable.of(paymentMethods);
            return this;
        }

        /**
         * UnSetter for paymentMethods.
         * @return Builder
         */
        public Builder unsetPaymentMethods() {
            paymentMethods = null;
            return this;
        }

        /**
         * Setter for installments.
         * @param  installments  List of Integer value for installments.
         * @return Builder
         */
        public Builder installments(List<Integer> installments) {
            this.installments = OptionalNullable.of(installments);
            return this;
        }

        /**
         * UnSetter for installments.
         * @return Builder
         */
        public Builder unsetInstallments() {
            installments = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = OptionalNullable.of(currency);
            return this;
        }

        /**
         * UnSetter for currency.
         * @return Builder
         */
        public Builder unsetCurrency() {
            currency = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = OptionalNullable.of(updatedAt);
            return this;
        }

        /**
         * UnSetter for updatedAt.
         * @return Builder
         */
        public Builder unsetUpdatedAt() {
            updatedAt = null;
            return this;
        }

        /**
         * Setter for items.
         * @param  items  List of GetPlanItemResponse value for items.
         * @return Builder
         */
        public Builder items(List<GetPlanItemResponse> items) {
            this.items = OptionalNullable.of(items);
            return this;
        }

        /**
         * UnSetter for items.
         * @return Builder
         */
        public Builder unsetItems() {
            items = null;
            return this;
        }

        /**
         * Setter for billingDays.
         * @param  billingDays  List of Integer value for billingDays.
         * @return Builder
         */
        public Builder billingDays(List<Integer> billingDays) {
            this.billingDays = OptionalNullable.of(billingDays);
            return this;
        }

        /**
         * UnSetter for billingDays.
         * @return Builder
         */
        public Builder unsetBillingDays() {
            billingDays = null;
            return this;
        }

        /**
         * Setter for shippable.
         * @param  shippable  Boolean value for shippable.
         * @return Builder
         */
        public Builder shippable(Boolean shippable) {
            this.shippable = OptionalNullable.of(shippable);
            return this;
        }

        /**
         * UnSetter for shippable.
         * @return Builder
         */
        public Builder unsetShippable() {
            shippable = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = OptionalNullable.of(metadata);
            return this;
        }

        /**
         * UnSetter for metadata.
         * @return Builder
         */
        public Builder unsetMetadata() {
            metadata = null;
            return this;
        }

        /**
         * Setter for trialPeriodDays.
         * @param  trialPeriodDays  Integer value for trialPeriodDays.
         * @return Builder
         */
        public Builder trialPeriodDays(Integer trialPeriodDays) {
            this.trialPeriodDays = OptionalNullable.of(trialPeriodDays);
            return this;
        }

        /**
         * UnSetter for trialPeriodDays.
         * @return Builder
         */
        public Builder unsetTrialPeriodDays() {
            trialPeriodDays = null;
            return this;
        }

        /**
         * Setter for minimumPrice.
         * @param  minimumPrice  Integer value for minimumPrice.
         * @return Builder
         */
        public Builder minimumPrice(Integer minimumPrice) {
            this.minimumPrice = OptionalNullable.of(minimumPrice);
            return this;
        }

        /**
         * UnSetter for minimumPrice.
         * @return Builder
         */
        public Builder unsetMinimumPrice() {
            minimumPrice = null;
            return this;
        }

        /**
         * Setter for deletedAt.
         * @param  deletedAt  LocalDateTime value for deletedAt.
         * @return Builder
         */
        public Builder deletedAt(LocalDateTime deletedAt) {
            this.deletedAt = OptionalNullable.of(deletedAt);
            return this;
        }

        /**
         * UnSetter for deletedAt.
         * @return Builder
         */
        public Builder unsetDeletedAt() {
            deletedAt = null;
            return this;
        }

        /**
         * Builds a new {@link GetPlanResponse} object using the set fields.
         * @return {@link GetPlanResponse}
         */
        public GetPlanResponse build() {
            return new GetPlanResponse(id, name, description, url, statementDescriptor, interval,
                    intervalCount, billingType, paymentMethods, installments, status, currency,
                    createdAt, updatedAt, items, billingDays, shippable, metadata, trialPeriodDays,
                    minimumPrice, deletedAt);
        }
    }
}
