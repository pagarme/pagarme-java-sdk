/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for GetMovementObjectTransferResponse type.
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "object",
        defaultImpl = GetMovementObjectTransferResponse.class,
        visible = true)
@JsonInclude(Include.ALWAYS)
public class GetMovementObjectTransferResponse
        extends GetMovementObjectBaseResponse {
    private OptionalNullable<String> sourceType;
    private OptionalNullable<String> sourceId;
    private OptionalNullable<String> targetType;
    private OptionalNullable<String> targetId;
    private OptionalNullable<String> fee;
    private OptionalNullable<String> fundingDate;
    private OptionalNullable<String> fundingEstimatedDate;
    private OptionalNullable<String> bankAccount;

    /**
     * Default constructor.
     */
    public GetMovementObjectTransferResponse() {
        super();
        setObject("transfer");
    }

    /**
     * Initialization constructor.
     * @param  object  String value for object.
     * @param  id  String value for id.
     * @param  status  String value for status.
     * @param  amount  String value for amount.
     * @param  createdAt  String value for createdAt.
     * @param  type  String value for type.
     * @param  chargeId  String value for chargeId.
     * @param  gatewayId  String value for gatewayId.
     * @param  sourceType  String value for sourceType.
     * @param  sourceId  String value for sourceId.
     * @param  targetType  String value for targetType.
     * @param  targetId  String value for targetId.
     * @param  fee  String value for fee.
     * @param  fundingDate  String value for fundingDate.
     * @param  fundingEstimatedDate  String value for fundingEstimatedDate.
     * @param  bankAccount  String value for bankAccount.
     */
    public GetMovementObjectTransferResponse(
            String object,
            String id,
            String status,
            String amount,
            String createdAt,
            String type,
            String chargeId,
            String gatewayId,
            String sourceType,
            String sourceId,
            String targetType,
            String targetId,
            String fee,
            String fundingDate,
            String fundingEstimatedDate,
            String bankAccount) {
        super(object, id, status, amount, createdAt, type, chargeId, gatewayId);
        this.sourceType = OptionalNullable.of(sourceType);
        this.sourceId = OptionalNullable.of(sourceId);
        this.targetType = OptionalNullable.of(targetType);
        this.targetId = OptionalNullable.of(targetId);
        this.fee = OptionalNullable.of(fee);
        this.fundingDate = OptionalNullable.of(fundingDate);
        this.fundingEstimatedDate = OptionalNullable.of(fundingEstimatedDate);
        this.bankAccount = OptionalNullable.of(bankAccount);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetMovementObjectTransferResponse(String object, OptionalNullable<String> id,
            OptionalNullable<String> status, OptionalNullable<String> amount,
            OptionalNullable<String> createdAt, OptionalNullable<String> type,
            OptionalNullable<String> chargeId, OptionalNullable<String> gatewayId,
            OptionalNullable<String> sourceType, OptionalNullable<String> sourceId,
            OptionalNullable<String> targetType, OptionalNullable<String> targetId,
            OptionalNullable<String> fee, OptionalNullable<String> fundingDate,
            OptionalNullable<String> fundingEstimatedDate, OptionalNullable<String> bankAccount) {
        super(object, id, status, amount, createdAt, type, chargeId, gatewayId);
        this.sourceType = sourceType;
        this.sourceId = sourceId;
        this.targetType = targetType;
        this.targetId = targetId;
        this.fee = fee;
        this.fundingDate = fundingDate;
        this.fundingEstimatedDate = fundingEstimatedDate;
        this.bankAccount = bankAccount;
    }

    /**
     * Internal Getter for SourceType.
     * @return Returns the Internal String
     */
    @JsonGetter("source_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSourceType() {
        return this.sourceType;
    }

    /**
     * Getter for SourceType.
     * @return Returns the String
     */
    public String getSourceType() {
        return OptionalNullable.getFrom(sourceType);
    }

    /**
     * Setter for SourceType.
     * @param sourceType Value for String
     */
    @JsonSetter("source_type")
    public void setSourceType(String sourceType) {
        this.sourceType = OptionalNullable.of(sourceType);
    }

    /**
     * UnSetter for SourceType.
     */
    public void unsetSourceType() {
        sourceType = null;
    }

    /**
     * Internal Getter for SourceId.
     * @return Returns the Internal String
     */
    @JsonGetter("source_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSourceId() {
        return this.sourceId;
    }

    /**
     * Getter for SourceId.
     * @return Returns the String
     */
    public String getSourceId() {
        return OptionalNullable.getFrom(sourceId);
    }

    /**
     * Setter for SourceId.
     * @param sourceId Value for String
     */
    @JsonSetter("source_id")
    public void setSourceId(String sourceId) {
        this.sourceId = OptionalNullable.of(sourceId);
    }

    /**
     * UnSetter for SourceId.
     */
    public void unsetSourceId() {
        sourceId = null;
    }

    /**
     * Internal Getter for TargetType.
     * @return Returns the Internal String
     */
    @JsonGetter("target_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTargetType() {
        return this.targetType;
    }

    /**
     * Getter for TargetType.
     * @return Returns the String
     */
    public String getTargetType() {
        return OptionalNullable.getFrom(targetType);
    }

    /**
     * Setter for TargetType.
     * @param targetType Value for String
     */
    @JsonSetter("target_type")
    public void setTargetType(String targetType) {
        this.targetType = OptionalNullable.of(targetType);
    }

    /**
     * UnSetter for TargetType.
     */
    public void unsetTargetType() {
        targetType = null;
    }

    /**
     * Internal Getter for TargetId.
     * @return Returns the Internal String
     */
    @JsonGetter("target_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTargetId() {
        return this.targetId;
    }

    /**
     * Getter for TargetId.
     * @return Returns the String
     */
    public String getTargetId() {
        return OptionalNullable.getFrom(targetId);
    }

    /**
     * Setter for TargetId.
     * @param targetId Value for String
     */
    @JsonSetter("target_id")
    public void setTargetId(String targetId) {
        this.targetId = OptionalNullable.of(targetId);
    }

    /**
     * UnSetter for TargetId.
     */
    public void unsetTargetId() {
        targetId = null;
    }

    /**
     * Internal Getter for Fee.
     * @return Returns the Internal String
     */
    @JsonGetter("fee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFee() {
        return this.fee;
    }

    /**
     * Getter for Fee.
     * @return Returns the String
     */
    public String getFee() {
        return OptionalNullable.getFrom(fee);
    }

    /**
     * Setter for Fee.
     * @param fee Value for String
     */
    @JsonSetter("fee")
    public void setFee(String fee) {
        this.fee = OptionalNullable.of(fee);
    }

    /**
     * UnSetter for Fee.
     */
    public void unsetFee() {
        fee = null;
    }

    /**
     * Internal Getter for FundingDate.
     * @return Returns the Internal String
     */
    @JsonGetter("funding_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFundingDate() {
        return this.fundingDate;
    }

    /**
     * Getter for FundingDate.
     * @return Returns the String
     */
    public String getFundingDate() {
        return OptionalNullable.getFrom(fundingDate);
    }

    /**
     * Setter for FundingDate.
     * @param fundingDate Value for String
     */
    @JsonSetter("funding_date")
    public void setFundingDate(String fundingDate) {
        this.fundingDate = OptionalNullable.of(fundingDate);
    }

    /**
     * UnSetter for FundingDate.
     */
    public void unsetFundingDate() {
        fundingDate = null;
    }

    /**
     * Internal Getter for FundingEstimatedDate.
     * @return Returns the Internal String
     */
    @JsonGetter("funding_estimated_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFundingEstimatedDate() {
        return this.fundingEstimatedDate;
    }

    /**
     * Getter for FundingEstimatedDate.
     * @return Returns the String
     */
    public String getFundingEstimatedDate() {
        return OptionalNullable.getFrom(fundingEstimatedDate);
    }

    /**
     * Setter for FundingEstimatedDate.
     * @param fundingEstimatedDate Value for String
     */
    @JsonSetter("funding_estimated_date")
    public void setFundingEstimatedDate(String fundingEstimatedDate) {
        this.fundingEstimatedDate = OptionalNullable.of(fundingEstimatedDate);
    }

    /**
     * UnSetter for FundingEstimatedDate.
     */
    public void unsetFundingEstimatedDate() {
        fundingEstimatedDate = null;
    }

    /**
     * Internal Getter for BankAccount.
     * @return Returns the Internal String
     */
    @JsonGetter("bank_account")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBankAccount() {
        return this.bankAccount;
    }

    /**
     * Getter for BankAccount.
     * @return Returns the String
     */
    public String getBankAccount() {
        return OptionalNullable.getFrom(bankAccount);
    }

    /**
     * Setter for BankAccount.
     * @param bankAccount Value for String
     */
    @JsonSetter("bank_account")
    public void setBankAccount(String bankAccount) {
        this.bankAccount = OptionalNullable.of(bankAccount);
    }

    /**
     * UnSetter for BankAccount.
     */
    public void unsetBankAccount() {
        bankAccount = null;
    }

    /**
     * Converts this GetMovementObjectTransferResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetMovementObjectTransferResponse [" + "sourceType=" + sourceType + ", sourceId="
                + sourceId + ", targetType=" + targetType + ", targetId=" + targetId + ", fee="
                + fee + ", fundingDate=" + fundingDate + ", fundingEstimatedDate="
                + fundingEstimatedDate + ", bankAccount=" + bankAccount + ", object=" + getObject()
                + ", id=" + getId() + ", status=" + getStatus() + ", amount=" + getAmount()
                + ", createdAt=" + getCreatedAt() + ", type=" + getType() + ", chargeId="
                + getChargeId() + ", gatewayId=" + getGatewayId() + "]";
    }

    /**
     * Builds a new {@link GetMovementObjectTransferResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetMovementObjectTransferResponse.Builder} object
     */
    public Builder toGetMovementObjectTransferResponseBuilder() {
        Builder builder = new Builder()
                .object(getObject());
        builder.sourceType = internalGetSourceType();
        builder.sourceId = internalGetSourceId();
        builder.targetType = internalGetTargetType();
        builder.targetId = internalGetTargetId();
        builder.fee = internalGetFee();
        builder.fundingDate = internalGetFundingDate();
        builder.fundingEstimatedDate = internalGetFundingEstimatedDate();
        builder.bankAccount = internalGetBankAccount();
        builder.id = internalGetId();
        builder.status = internalGetStatus();
        builder.amount = internalGetAmount();
        builder.createdAt = internalGetCreatedAt();
        builder.type = internalGetType();
        builder.chargeId = internalGetChargeId();
        builder.gatewayId = internalGetGatewayId();
        return builder;
    }

    /**
     * Class to build instances of {@link GetMovementObjectTransferResponse}.
     */
    public static class Builder {
        private String object = "transfer";
        private OptionalNullable<String> id;
        private OptionalNullable<String> status;
        private OptionalNullable<String> amount;
        private OptionalNullable<String> createdAt;
        private OptionalNullable<String> type;
        private OptionalNullable<String> chargeId;
        private OptionalNullable<String> gatewayId;
        private OptionalNullable<String> sourceType;
        private OptionalNullable<String> sourceId;
        private OptionalNullable<String> targetType;
        private OptionalNullable<String> targetId;
        private OptionalNullable<String> fee;
        private OptionalNullable<String> fundingDate;
        private OptionalNullable<String> fundingEstimatedDate;
        private OptionalNullable<String> bankAccount;



        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  String value for amount.
         * @return Builder
         */
        public Builder amount(String amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for chargeId.
         * @param  chargeId  String value for chargeId.
         * @return Builder
         */
        public Builder chargeId(String chargeId) {
            this.chargeId = OptionalNullable.of(chargeId);
            return this;
        }

        /**
         * UnSetter for chargeId.
         * @return Builder
         */
        public Builder unsetChargeId() {
            chargeId = null;
            return this;
        }

        /**
         * Setter for gatewayId.
         * @param  gatewayId  String value for gatewayId.
         * @return Builder
         */
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = OptionalNullable.of(gatewayId);
            return this;
        }

        /**
         * UnSetter for gatewayId.
         * @return Builder
         */
        public Builder unsetGatewayId() {
            gatewayId = null;
            return this;
        }

        /**
         * Setter for sourceType.
         * @param  sourceType  String value for sourceType.
         * @return Builder
         */
        public Builder sourceType(String sourceType) {
            this.sourceType = OptionalNullable.of(sourceType);
            return this;
        }

        /**
         * UnSetter for sourceType.
         * @return Builder
         */
        public Builder unsetSourceType() {
            sourceType = null;
            return this;
        }

        /**
         * Setter for sourceId.
         * @param  sourceId  String value for sourceId.
         * @return Builder
         */
        public Builder sourceId(String sourceId) {
            this.sourceId = OptionalNullable.of(sourceId);
            return this;
        }

        /**
         * UnSetter for sourceId.
         * @return Builder
         */
        public Builder unsetSourceId() {
            sourceId = null;
            return this;
        }

        /**
         * Setter for targetType.
         * @param  targetType  String value for targetType.
         * @return Builder
         */
        public Builder targetType(String targetType) {
            this.targetType = OptionalNullable.of(targetType);
            return this;
        }

        /**
         * UnSetter for targetType.
         * @return Builder
         */
        public Builder unsetTargetType() {
            targetType = null;
            return this;
        }

        /**
         * Setter for targetId.
         * @param  targetId  String value for targetId.
         * @return Builder
         */
        public Builder targetId(String targetId) {
            this.targetId = OptionalNullable.of(targetId);
            return this;
        }

        /**
         * UnSetter for targetId.
         * @return Builder
         */
        public Builder unsetTargetId() {
            targetId = null;
            return this;
        }

        /**
         * Setter for fee.
         * @param  fee  String value for fee.
         * @return Builder
         */
        public Builder fee(String fee) {
            this.fee = OptionalNullable.of(fee);
            return this;
        }

        /**
         * UnSetter for fee.
         * @return Builder
         */
        public Builder unsetFee() {
            fee = null;
            return this;
        }

        /**
         * Setter for fundingDate.
         * @param  fundingDate  String value for fundingDate.
         * @return Builder
         */
        public Builder fundingDate(String fundingDate) {
            this.fundingDate = OptionalNullable.of(fundingDate);
            return this;
        }

        /**
         * UnSetter for fundingDate.
         * @return Builder
         */
        public Builder unsetFundingDate() {
            fundingDate = null;
            return this;
        }

        /**
         * Setter for fundingEstimatedDate.
         * @param  fundingEstimatedDate  String value for fundingEstimatedDate.
         * @return Builder
         */
        public Builder fundingEstimatedDate(String fundingEstimatedDate) {
            this.fundingEstimatedDate = OptionalNullable.of(fundingEstimatedDate);
            return this;
        }

        /**
         * UnSetter for fundingEstimatedDate.
         * @return Builder
         */
        public Builder unsetFundingEstimatedDate() {
            fundingEstimatedDate = null;
            return this;
        }

        /**
         * Setter for bankAccount.
         * @param  bankAccount  String value for bankAccount.
         * @return Builder
         */
        public Builder bankAccount(String bankAccount) {
            this.bankAccount = OptionalNullable.of(bankAccount);
            return this;
        }

        /**
         * UnSetter for bankAccount.
         * @return Builder
         */
        public Builder unsetBankAccount() {
            bankAccount = null;
            return this;
        }

        /**
         * Builds a new {@link GetMovementObjectTransferResponse} object using the set fields.
         * @return {@link GetMovementObjectTransferResponse}
         */
        public GetMovementObjectTransferResponse build() {
            return new GetMovementObjectTransferResponse(object, id, status, amount, createdAt,
                    type, chargeId, gatewayId, sourceType, sourceId, targetType, targetId, fee,
                    fundingDate, fundingEstimatedDate, bankAccount);
        }
    }
}
