/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for CreateRegisterInformationIndividualRequest type.
 */
public class CreateRegisterInformationIndividualRequest
        extends CreateRegisterInformationBaseRequest {
    private String name;
    private OptionalNullable<String> motherName;
    private String birthdate;
    private String monthlyIncome;
    private String professionalOccupation;
    private CreateRegisterInformationAddressRequest address;

    /**
     * Default constructor.
     */
    public CreateRegisterInformationIndividualRequest() {
        super();
    }

    /**
     * Initialization constructor.
     * @param  email  String value for email.
     * @param  document  String value for document.
     * @param  type  String value for type.
     * @param  phoneNumbers  List of CreateRegisterInformationPhoneRequest value for phoneNumbers.
     * @param  name  String value for name.
     * @param  birthdate  String value for birthdate.
     * @param  monthlyIncome  String value for monthlyIncome.
     * @param  professionalOccupation  String value for professionalOccupation.
     * @param  address  CreateRegisterInformationAddressRequest value for address.
     * @param  siteUrl  String value for siteUrl.
     * @param  motherName  String value for motherName.
     */
    public CreateRegisterInformationIndividualRequest(
            String email,
            String document,
            String type,
            List<CreateRegisterInformationPhoneRequest> phoneNumbers,
            String name,
            String birthdate,
            String monthlyIncome,
            String professionalOccupation,
            CreateRegisterInformationAddressRequest address,
            String siteUrl,
            String motherName) {
        super(email, document, type, phoneNumbers, siteUrl);
        this.name = name;
        this.motherName = OptionalNullable.of(motherName);
        this.birthdate = birthdate;
        this.monthlyIncome = monthlyIncome;
        this.professionalOccupation = professionalOccupation;
        this.address = address;
    }

    /**
     * Initialization constructor.
     * @param  email  String value for email.
     * @param  document  String value for document.
     * @param  type  String value for type.
     * @param  phoneNumbers  List of CreateRegisterInformationPhoneRequest value for phoneNumbers.
     * @param  name  String value for name.
     * @param  birthdate  String value for birthdate.
     * @param  monthlyIncome  String value for monthlyIncome.
     * @param  professionalOccupation  String value for professionalOccupation.
     * @param  address  CreateRegisterInformationAddressRequest value for address.
     * @param  siteUrl  String value for siteUrl.
     * @param  motherName  String value for motherName.
     */

    protected CreateRegisterInformationIndividualRequest(String email, String document, String type,
            List<CreateRegisterInformationPhoneRequest> phoneNumbers, String name, String birthdate,
            String monthlyIncome, String professionalOccupation,
            CreateRegisterInformationAddressRequest address, OptionalNullable<String> siteUrl,
            OptionalNullable<String> motherName) {
        super(email, document, type, phoneNumbers, siteUrl);
        this.name = name;
        this.motherName = motherName;
        this.birthdate = birthdate;
        this.monthlyIncome = monthlyIncome;
        this.professionalOccupation = professionalOccupation;
        this.address = address;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Internal Getter for MotherName.
     * @return Returns the Internal String
     */
    @JsonGetter("mother_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMotherName() {
        return this.motherName;
    }

    /**
     * Getter for MotherName.
     * @return Returns the String
     */
    public String getMotherName() {
        return OptionalNullable.getFrom(motherName);
    }

    /**
     * Setter for MotherName.
     * @param motherName Value for String
     */
    @JsonSetter("mother_name")
    public void setMotherName(String motherName) {
        this.motherName = OptionalNullable.of(motherName);
    }

    /**
     * UnSetter for MotherName.
     */
    public void unsetMotherName() {
        motherName = null;
    }

    /**
     * Getter for Birthdate.
     * @return Returns the String
     */
    @JsonGetter("birthdate")
    public String getBirthdate() {
        return birthdate;
    }

    /**
     * Setter for Birthdate.
     * @param birthdate Value for String
     */
    @JsonSetter("birthdate")
    public void setBirthdate(String birthdate) {
        this.birthdate = birthdate;
    }

    /**
     * Getter for MonthlyIncome.
     * @return Returns the String
     */
    @JsonGetter("monthly_income")
    public String getMonthlyIncome() {
        return monthlyIncome;
    }

    /**
     * Setter for MonthlyIncome.
     * @param monthlyIncome Value for String
     */
    @JsonSetter("monthly_income")
    public void setMonthlyIncome(String monthlyIncome) {
        this.monthlyIncome = monthlyIncome;
    }

    /**
     * Getter for ProfessionalOccupation.
     * @return Returns the String
     */
    @JsonGetter("professional_occupation")
    public String getProfessionalOccupation() {
        return professionalOccupation;
    }

    /**
     * Setter for ProfessionalOccupation.
     * @param professionalOccupation Value for String
     */
    @JsonSetter("professional_occupation")
    public void setProfessionalOccupation(String professionalOccupation) {
        this.professionalOccupation = professionalOccupation;
    }

    /**
     * Getter for Address.
     * @return Returns the CreateRegisterInformationAddressRequest
     */
    @JsonGetter("address")
    public CreateRegisterInformationAddressRequest getAddress() {
        return address;
    }

    /**
     * Setter for Address.
     * @param address Value for CreateRegisterInformationAddressRequest
     */
    @JsonSetter("address")
    public void setAddress(CreateRegisterInformationAddressRequest address) {
        this.address = address;
    }

    /**
     * Converts this CreateRegisterInformationIndividualRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreateRegisterInformationIndividualRequest [" + "name=" + name + ", birthdate="
                + birthdate + ", monthlyIncome=" + monthlyIncome + ", professionalOccupation="
                + professionalOccupation + ", address=" + address + ", motherName=" + motherName
                + ", email=" + getEmail() + ", document=" + getDocument() + ", type=" + getType()
                + ", phoneNumbers=" + getPhoneNumbers() + ", siteUrl=" + getSiteUrl() + "]";
    }

    /**
     * Builds a new {@link CreateRegisterInformationIndividualRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreateRegisterInformationIndividualRequest.Builder} object
     */
    public Builder toCreateRegisterInformationIndividualRequestBuilder() {
        Builder builder = new Builder(getEmail(), getDocument(), getType(), getPhoneNumbers(), name,
                birthdate, monthlyIncome, professionalOccupation, address);
        builder.motherName = internalGetMotherName();
        builder.siteUrl = internalGetSiteUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link CreateRegisterInformationIndividualRequest}.
     */
    public static class Builder {
        private String email;
        private String document;
        private String type;
        private List<CreateRegisterInformationPhoneRequest> phoneNumbers;
        private String name;
        private String birthdate;
        private String monthlyIncome;
        private String professionalOccupation;
        private CreateRegisterInformationAddressRequest address;
        private OptionalNullable<String> siteUrl;
        private OptionalNullable<String> motherName;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  email  String value for email.
         * @param  document  String value for document.
         * @param  type  String value for type.
         * @param  phoneNumbers  List of CreateRegisterInformationPhoneRequest value for
         *         phoneNumbers.
         * @param  name  String value for name.
         * @param  birthdate  String value for birthdate.
         * @param  monthlyIncome  String value for monthlyIncome.
         * @param  professionalOccupation  String value for professionalOccupation.
         * @param  address  CreateRegisterInformationAddressRequest value for address.
         */
        public Builder(String email, String document, String type,
                List<CreateRegisterInformationPhoneRequest> phoneNumbers, String name,
                String birthdate, String monthlyIncome, String professionalOccupation,
                CreateRegisterInformationAddressRequest address) {
            this.email = email;
            this.document = document;
            this.type = type;
            this.phoneNumbers = phoneNumbers;
            this.name = name;
            this.birthdate = birthdate;
            this.monthlyIncome = monthlyIncome;
            this.professionalOccupation = professionalOccupation;
            this.address = address;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for document.
         * @param  document  String value for document.
         * @return Builder
         */
        public Builder document(String document) {
            this.document = document;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for phoneNumbers.
         * @param  phoneNumbers  List of CreateRegisterInformationPhoneRequest value for
         *         phoneNumbers.
         * @return Builder
         */
        public Builder phoneNumbers(List<CreateRegisterInformationPhoneRequest> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for birthdate.
         * @param  birthdate  String value for birthdate.
         * @return Builder
         */
        public Builder birthdate(String birthdate) {
            this.birthdate = birthdate;
            return this;
        }

        /**
         * Setter for monthlyIncome.
         * @param  monthlyIncome  String value for monthlyIncome.
         * @return Builder
         */
        public Builder monthlyIncome(String monthlyIncome) {
            this.monthlyIncome = monthlyIncome;
            return this;
        }

        /**
         * Setter for professionalOccupation.
         * @param  professionalOccupation  String value for professionalOccupation.
         * @return Builder
         */
        public Builder professionalOccupation(String professionalOccupation) {
            this.professionalOccupation = professionalOccupation;
            return this;
        }

        /**
         * Setter for address.
         * @param  address  CreateRegisterInformationAddressRequest value for address.
         * @return Builder
         */
        public Builder address(CreateRegisterInformationAddressRequest address) {
            this.address = address;
            return this;
        }

        /**
         * Setter for siteUrl.
         * @param  siteUrl  String value for siteUrl.
         * @return Builder
         */
        public Builder siteUrl(String siteUrl) {
            this.siteUrl = OptionalNullable.of(siteUrl);
            return this;
        }

        /**
         * UnSetter for siteUrl.
         * @return Builder
         */
        public Builder unsetSiteUrl() {
            siteUrl = null;
            return this;
        }

        /**
         * Setter for motherName.
         * @param  motherName  String value for motherName.
         * @return Builder
         */
        public Builder motherName(String motherName) {
            this.motherName = OptionalNullable.of(motherName);
            return this;
        }

        /**
         * UnSetter for motherName.
         * @return Builder
         */
        public Builder unsetMotherName() {
            motherName = null;
            return this;
        }

        /**
         * Builds a new {@link CreateRegisterInformationIndividualRequest} object using the set
         * fields.
         * @return {@link CreateRegisterInformationIndividualRequest}
         */
        public CreateRegisterInformationIndividualRequest build() {
            return new CreateRegisterInformationIndividualRequest(email, document, type,
                    phoneNumbers, name, birthdate, monthlyIncome, professionalOccupation, address,
                    siteUrl, motherName);
        }
    }
}
