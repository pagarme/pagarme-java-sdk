/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import me.pagar.api.DateTimeHelper;

/**
 * This is a model class for GetUsageResponse type.
 */
public class GetUsageResponse {
    private OptionalNullable<String> id;
    private OptionalNullable<Integer> quantity;
    private OptionalNullable<String> description;
    private OptionalNullable<LocalDateTime> usedAt;
    private OptionalNullable<LocalDateTime> createdAt;
    private OptionalNullable<String> status;
    private OptionalNullable<LocalDateTime> deletedAt;
    private OptionalNullable<GetSubscriptionItemResponse> subscriptionItem;
    private OptionalNullable<String> code;
    private OptionalNullable<String> group;
    private OptionalNullable<Integer> amount;

    /**
     * Default constructor.
     */
    public GetUsageResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  quantity  Integer value for quantity.
     * @param  description  String value for description.
     * @param  usedAt  LocalDateTime value for usedAt.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  status  String value for status.
     * @param  deletedAt  LocalDateTime value for deletedAt.
     * @param  subscriptionItem  GetSubscriptionItemResponse value for subscriptionItem.
     * @param  code  String value for code.
     * @param  group  String value for group.
     * @param  amount  Integer value for amount.
     */
    public GetUsageResponse(
            String id,
            Integer quantity,
            String description,
            LocalDateTime usedAt,
            LocalDateTime createdAt,
            String status,
            LocalDateTime deletedAt,
            GetSubscriptionItemResponse subscriptionItem,
            String code,
            String group,
            Integer amount) {
        this.id = OptionalNullable.of(id);
        this.quantity = OptionalNullable.of(quantity);
        this.description = OptionalNullable.of(description);
        this.usedAt = OptionalNullable.of(usedAt);
        this.createdAt = OptionalNullable.of(createdAt);
        this.status = OptionalNullable.of(status);
        this.deletedAt = OptionalNullable.of(deletedAt);
        this.subscriptionItem = OptionalNullable.of(subscriptionItem);
        this.code = OptionalNullable.of(code);
        this.group = OptionalNullable.of(group);
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * Internal initialization constructor.
     */
    protected GetUsageResponse(OptionalNullable<String> id, OptionalNullable<Integer> quantity,
            OptionalNullable<String> description, OptionalNullable<LocalDateTime> usedAt,
            OptionalNullable<LocalDateTime> createdAt, OptionalNullable<String> status,
            OptionalNullable<LocalDateTime> deletedAt,
            OptionalNullable<GetSubscriptionItemResponse> subscriptionItem,
            OptionalNullable<String> code, OptionalNullable<String> group,
            OptionalNullable<Integer> amount) {
        this.id = id;
        this.quantity = quantity;
        this.description = description;
        this.usedAt = usedAt;
        this.createdAt = createdAt;
        this.status = status;
        this.deletedAt = deletedAt;
        this.subscriptionItem = subscriptionItem;
        this.code = code;
        this.group = group;
        this.amount = amount;
    }

    /**
     * Internal Getter for Id.
     * Id
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * Id
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * Id
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     * Id
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Internal Getter for Quantity.
     * Quantity
     * @return Returns the Internal Integer
     */
    @JsonGetter("quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetQuantity() {
        return this.quantity;
    }

    /**
     * Getter for Quantity.
     * Quantity
     * @return Returns the Integer
     */
    public Integer getQuantity() {
        return OptionalNullable.getFrom(quantity);
    }

    /**
     * Setter for Quantity.
     * Quantity
     * @param quantity Value for Integer
     */
    @JsonSetter("quantity")
    public void setQuantity(Integer quantity) {
        this.quantity = OptionalNullable.of(quantity);
    }

    /**
     * UnSetter for Quantity.
     * Quantity
     */
    public void unsetQuantity() {
        quantity = null;
    }

    /**
     * Internal Getter for Description.
     * Description
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * Description
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * Description
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * Description
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Internal Getter for UsedAt.
     * Used at
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("used_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetUsedAt() {
        return this.usedAt;
    }

    /**
     * Getter for UsedAt.
     * Used at
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getUsedAt() {
        return OptionalNullable.getFrom(usedAt);
    }

    /**
     * Setter for UsedAt.
     * Used at
     * @param usedAt Value for LocalDateTime
     */
    @JsonSetter("used_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUsedAt(LocalDateTime usedAt) {
        this.usedAt = OptionalNullable.of(usedAt);
    }

    /**
     * UnSetter for UsedAt.
     * Used at
     */
    public void unsetUsedAt() {
        usedAt = null;
    }

    /**
     * Internal Getter for CreatedAt.
     * Creation date
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for CreatedAt.
     * Creation date
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCreatedAt() {
        return OptionalNullable.getFrom(createdAt);
    }

    /**
     * Setter for CreatedAt.
     * Creation date
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = OptionalNullable.of(createdAt);
    }

    /**
     * UnSetter for CreatedAt.
     * Creation date
     */
    public void unsetCreatedAt() {
        createdAt = null;
    }

    /**
     * Internal Getter for Status.
     * Status
     * @return Returns the Internal String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * Status
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * Status
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     * Status
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for DeletedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("deleted_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetDeletedAt() {
        return this.deletedAt;
    }

    /**
     * Getter for DeletedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getDeletedAt() {
        return OptionalNullable.getFrom(deletedAt);
    }

    /**
     * Setter for DeletedAt.
     * @param deletedAt Value for LocalDateTime
     */
    @JsonSetter("deleted_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDeletedAt(LocalDateTime deletedAt) {
        this.deletedAt = OptionalNullable.of(deletedAt);
    }

    /**
     * UnSetter for DeletedAt.
     */
    public void unsetDeletedAt() {
        deletedAt = null;
    }

    /**
     * Internal Getter for SubscriptionItem.
     * Subscription item
     * @return Returns the Internal GetSubscriptionItemResponse
     */
    @JsonGetter("subscription_item")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<GetSubscriptionItemResponse> internalGetSubscriptionItem() {
        return this.subscriptionItem;
    }

    /**
     * Getter for SubscriptionItem.
     * Subscription item
     * @return Returns the GetSubscriptionItemResponse
     */
    public GetSubscriptionItemResponse getSubscriptionItem() {
        return OptionalNullable.getFrom(subscriptionItem);
    }

    /**
     * Setter for SubscriptionItem.
     * Subscription item
     * @param subscriptionItem Value for GetSubscriptionItemResponse
     */
    @JsonSetter("subscription_item")
    public void setSubscriptionItem(GetSubscriptionItemResponse subscriptionItem) {
        this.subscriptionItem = OptionalNullable.of(subscriptionItem);
    }

    /**
     * UnSetter for SubscriptionItem.
     * Subscription item
     */
    public void unsetSubscriptionItem() {
        subscriptionItem = null;
    }

    /**
     * Internal Getter for Code.
     * Identification code in the client system
     * @return Returns the Internal String
     */
    @JsonGetter("code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCode() {
        return this.code;
    }

    /**
     * Getter for Code.
     * Identification code in the client system
     * @return Returns the String
     */
    public String getCode() {
        return OptionalNullable.getFrom(code);
    }

    /**
     * Setter for Code.
     * Identification code in the client system
     * @param code Value for String
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = OptionalNullable.of(code);
    }

    /**
     * UnSetter for Code.
     * Identification code in the client system
     */
    public void unsetCode() {
        code = null;
    }

    /**
     * Internal Getter for Group.
     * Identification group in the client system
     * @return Returns the Internal String
     */
    @JsonGetter("group")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGroup() {
        return this.group;
    }

    /**
     * Getter for Group.
     * Identification group in the client system
     * @return Returns the String
     */
    public String getGroup() {
        return OptionalNullable.getFrom(group);
    }

    /**
     * Setter for Group.
     * Identification group in the client system
     * @param group Value for String
     */
    @JsonSetter("group")
    public void setGroup(String group) {
        this.group = OptionalNullable.of(group);
    }

    /**
     * UnSetter for Group.
     * Identification group in the client system
     */
    public void unsetGroup() {
        group = null;
    }

    /**
     * Internal Getter for Amount.
     * Field used in item scheme type 'Percent'
     * @return Returns the Internal Integer
     */
    @JsonGetter("amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * Field used in item scheme type 'Percent'
     * @return Returns the Integer
     */
    public Integer getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * Field used in item scheme type 'Percent'
     * @param amount Value for Integer
     */
    @JsonSetter("amount")
    public void setAmount(Integer amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     * Field used in item scheme type 'Percent'
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Converts this GetUsageResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GetUsageResponse [" + "id=" + id + ", quantity=" + quantity + ", description="
                + description + ", usedAt=" + usedAt + ", createdAt=" + createdAt + ", status="
                + status + ", deletedAt=" + deletedAt + ", subscriptionItem=" + subscriptionItem
                + ", code=" + code + ", group=" + group + ", amount=" + amount + "]";
    }

    /**
     * Builds a new {@link GetUsageResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GetUsageResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.id = internalGetId();
        builder.quantity = internalGetQuantity();
        builder.description = internalGetDescription();
        builder.usedAt = internalGetUsedAt();
        builder.createdAt = internalGetCreatedAt();
        builder.status = internalGetStatus();
        builder.deletedAt = internalGetDeletedAt();
        builder.subscriptionItem = internalGetSubscriptionItem();
        builder.code = internalGetCode();
        builder.group = internalGetGroup();
        builder.amount = internalGetAmount();
        return builder;
    }

    /**
     * Class to build instances of {@link GetUsageResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private OptionalNullable<Integer> quantity;
        private OptionalNullable<String> description;
        private OptionalNullable<LocalDateTime> usedAt;
        private OptionalNullable<LocalDateTime> createdAt;
        private OptionalNullable<String> status;
        private OptionalNullable<LocalDateTime> deletedAt;
        private OptionalNullable<GetSubscriptionItemResponse> subscriptionItem;
        private OptionalNullable<String> code;
        private OptionalNullable<String> group;
        private OptionalNullable<Integer> amount;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Integer value for quantity.
         * @return Builder
         */
        public Builder quantity(Integer quantity) {
            this.quantity = OptionalNullable.of(quantity);
            return this;
        }

        /**
         * UnSetter for quantity.
         * @return Builder
         */
        public Builder unsetQuantity() {
            quantity = null;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for usedAt.
         * @param  usedAt  LocalDateTime value for usedAt.
         * @return Builder
         */
        public Builder usedAt(LocalDateTime usedAt) {
            this.usedAt = OptionalNullable.of(usedAt);
            return this;
        }

        /**
         * UnSetter for usedAt.
         * @return Builder
         */
        public Builder unsetUsedAt() {
            usedAt = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = OptionalNullable.of(createdAt);
            return this;
        }

        /**
         * UnSetter for createdAt.
         * @return Builder
         */
        public Builder unsetCreatedAt() {
            createdAt = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for deletedAt.
         * @param  deletedAt  LocalDateTime value for deletedAt.
         * @return Builder
         */
        public Builder deletedAt(LocalDateTime deletedAt) {
            this.deletedAt = OptionalNullable.of(deletedAt);
            return this;
        }

        /**
         * UnSetter for deletedAt.
         * @return Builder
         */
        public Builder unsetDeletedAt() {
            deletedAt = null;
            return this;
        }

        /**
         * Setter for subscriptionItem.
         * @param  subscriptionItem  GetSubscriptionItemResponse value for subscriptionItem.
         * @return Builder
         */
        public Builder subscriptionItem(GetSubscriptionItemResponse subscriptionItem) {
            this.subscriptionItem = OptionalNullable.of(subscriptionItem);
            return this;
        }

        /**
         * UnSetter for subscriptionItem.
         * @return Builder
         */
        public Builder unsetSubscriptionItem() {
            subscriptionItem = null;
            return this;
        }

        /**
         * Setter for code.
         * @param  code  String value for code.
         * @return Builder
         */
        public Builder code(String code) {
            this.code = OptionalNullable.of(code);
            return this;
        }

        /**
         * UnSetter for code.
         * @return Builder
         */
        public Builder unsetCode() {
            code = null;
            return this;
        }

        /**
         * Setter for group.
         * @param  group  String value for group.
         * @return Builder
         */
        public Builder group(String group) {
            this.group = OptionalNullable.of(group);
            return this;
        }

        /**
         * UnSetter for group.
         * @return Builder
         */
        public Builder unsetGroup() {
            group = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Integer value for amount.
         * @return Builder
         */
        public Builder amount(Integer amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Builds a new {@link GetUsageResponse} object using the set fields.
         * @return {@link GetUsageResponse}
         */
        public GetUsageResponse build() {
            return new GetUsageResponse(id, quantity, description, usedAt, createdAt, status,
                    deletedAt, subscriptionItem, code, group, amount);
        }
    }
}
