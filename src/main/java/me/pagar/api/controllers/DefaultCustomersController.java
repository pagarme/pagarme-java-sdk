/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import me.pagar.api.ApiHelper;
import me.pagar.api.AuthManager;
import me.pagar.api.Configuration;
import me.pagar.api.exceptions.ApiException;
import me.pagar.api.http.Headers;
import me.pagar.api.http.client.HttpClient;
import me.pagar.api.http.client.HttpContext;
import me.pagar.api.http.request.HttpRequest;
import me.pagar.api.http.response.HttpResponse;
import me.pagar.api.http.response.HttpStringResponse;
import me.pagar.api.models.CreateAccessTokenRequest;
import me.pagar.api.models.CreateAddressRequest;
import me.pagar.api.models.CreateCardRequest;
import me.pagar.api.models.CreateCustomerRequest;
import me.pagar.api.models.GetAccessTokenResponse;
import me.pagar.api.models.GetAddressResponse;
import me.pagar.api.models.GetCardResponse;
import me.pagar.api.models.GetCustomerResponse;
import me.pagar.api.models.ListAccessTokensResponse;
import me.pagar.api.models.ListAddressesResponse;
import me.pagar.api.models.ListCardsResponse;
import me.pagar.api.models.ListCustomersResponse;
import me.pagar.api.models.UpdateAddressRequest;
import me.pagar.api.models.UpdateCardRequest;
import me.pagar.api.models.UpdateCustomerRequest;
import me.pagar.api.models.UpdateMetadataRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultCustomersController extends BaseController implements CustomersController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DefaultCustomersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Updates a card.
     * @param  customerId  Required parameter: Customer Id
     * @param  cardId  Required parameter: Card id
     * @param  request  Required parameter: Request for updating a card
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse updateCard(
            final String customerId,
            final String cardId,
            final UpdateCardRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateCardRequest(customerId, cardId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateCardResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateCard.
     */
    private HttpRequest buildUpdateCardRequest(
            final String customerId,
            final String cardId,
            final UpdateCardRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/cards/{card_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().putBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateCard.
     * @return An object of type GetCardResponse
     */
    private GetCardResponse handleUpdateCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCardResponse result = ApiHelper.deserialize(responseBody,
                GetCardResponse.class);

        return result;
    }

    /**
     * Updates an address.
     * @param  customerId  Required parameter: Customer Id
     * @param  addressId  Required parameter: Address Id
     * @param  request  Required parameter: Request for updating an address
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse updateAddress(
            final String customerId,
            final String addressId,
            final UpdateAddressRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateAddressRequest(customerId, addressId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateAddressResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateAddress.
     */
    private HttpRequest buildUpdateAddressRequest(
            final String customerId,
            final String addressId,
            final UpdateAddressRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/addresses/{address_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("address_id",
                new SimpleEntry<Object, Boolean>(addressId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().putBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateAddress.
     * @return An object of type GetAddressResponse
     */
    private GetAddressResponse handleUpdateAddressResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAddressResponse result = ApiHelper.deserialize(responseBody,
                GetAddressResponse.class);

        return result;
    }

    /**
     * Delete a customer's access token.
     * @param  customerId  Required parameter: Customer Id
     * @param  tokenId  Required parameter: Token Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAccessTokenResponse deleteAccessToken(
            final String customerId,
            final String tokenId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteAccessTokenRequest(customerId, tokenId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteAccessTokenResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteAccessToken.
     */
    private HttpRequest buildDeleteAccessTokenRequest(
            final String customerId,
            final String tokenId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/access-tokens/{token_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("token_id",
                new SimpleEntry<Object, Boolean>(tokenId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteAccessToken.
     * @return An object of type GetAccessTokenResponse
     */
    private GetAccessTokenResponse handleDeleteAccessTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAccessTokenResponse result = ApiHelper.deserialize(responseBody,
                GetAccessTokenResponse.class);

        return result;
    }

    /**
     * Creates a new address for a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  request  Required parameter: Request for creating an address
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse createAddress(
            final String customerId,
            final CreateAddressRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateAddressRequest(customerId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateAddressResponse(context);
    }

    /**
     * Builds the HttpRequest object for createAddress.
     */
    private HttpRequest buildCreateAddressRequest(
            final String customerId,
            final CreateAddressRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/addresses");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createAddress.
     * @return An object of type GetAddressResponse
     */
    private GetAddressResponse handleCreateAddressResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAddressResponse result = ApiHelper.deserialize(responseBody,
                GetAddressResponse.class);

        return result;
    }

    /**
     * Creates a new customer.
     * @param  request  Required parameter: Request for creating a customer
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse createCustomer(
            final CreateCustomerRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateCustomerRequest(request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateCustomerResponse(context);
    }

    /**
     * Builds the HttpRequest object for createCustomer.
     */
    private HttpRequest buildCreateCustomerRequest(
            final CreateCustomerRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createCustomer.
     * @return An object of type GetCustomerResponse
     */
    private GetCustomerResponse handleCreateCustomerResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCustomerResponse result = ApiHelper.deserialize(responseBody,
                GetCustomerResponse.class);

        return result;
    }

    /**
     * Creates a new card for a customer.
     * @param  customerId  Required parameter: Customer id
     * @param  request  Required parameter: Request for creating a card
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse createCard(
            final String customerId,
            final CreateCardRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateCardRequest(customerId, request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateCardResponse(context);
    }

    /**
     * Builds the HttpRequest object for createCard.
     */
    private HttpRequest buildCreateCardRequest(
            final String customerId,
            final CreateCardRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/cards");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createCard.
     * @return An object of type GetCardResponse
     */
    private GetCardResponse handleCreateCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCardResponse result = ApiHelper.deserialize(responseBody,
                GetCardResponse.class);

        return result;
    }

    /**
     * Get all cards from a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListCardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListCardsResponse getCards(
            final String customerId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildGetCardsRequest(customerId, page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCardsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getCards.
     */
    private HttpRequest buildGetCardsRequest(
            final String customerId,
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/cards");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getCards.
     * @return An object of type ListCardsResponse
     */
    private ListCardsResponse handleGetCardsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListCardsResponse result = ApiHelper.deserialize(responseBody,
                ListCardsResponse.class);

        return result;
    }

    /**
     * Renew a card.
     * @param  customerId  Required parameter: Customer id
     * @param  cardId  Required parameter: Card Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse renewCard(
            final String customerId,
            final String cardId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildRenewCardRequest(customerId, cardId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRenewCardResponse(context);
    }

    /**
     * Builds the HttpRequest object for renewCard.
     */
    private HttpRequest buildRenewCardRequest(
            final String customerId,
            final String cardId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/cards/{card_id}/renew");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for renewCard.
     * @return An object of type GetCardResponse
     */
    private GetCardResponse handleRenewCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCardResponse result = ApiHelper.deserialize(responseBody,
                GetCardResponse.class);

        return result;
    }

    /**
     * Get a customer's address.
     * @param  customerId  Required parameter: Customer id
     * @param  addressId  Required parameter: Address Id
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse getAddress(
            final String customerId,
            final String addressId) throws ApiException, IOException {
        HttpRequest request = buildGetAddressRequest(customerId, addressId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAddressResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAddress.
     */
    private HttpRequest buildGetAddressRequest(
            final String customerId,
            final String addressId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/addresses/{address_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("address_id",
                new SimpleEntry<Object, Boolean>(addressId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getAddress.
     * @return An object of type GetAddressResponse
     */
    private GetAddressResponse handleGetAddressResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAddressResponse result = ApiHelper.deserialize(responseBody,
                GetAddressResponse.class);

        return result;
    }

    /**
     * Delete a Customer's address.
     * @param  customerId  Required parameter: Customer Id
     * @param  addressId  Required parameter: Address Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse deleteAddress(
            final String customerId,
            final String addressId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteAddressRequest(customerId, addressId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteAddressResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteAddress.
     */
    private HttpRequest buildDeleteAddressRequest(
            final String customerId,
            final String addressId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/addresses/{address_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("address_id",
                new SimpleEntry<Object, Boolean>(addressId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteAddress.
     * @return An object of type GetAddressResponse
     */
    private GetAddressResponse handleDeleteAddressResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAddressResponse result = ApiHelper.deserialize(responseBody,
                GetAddressResponse.class);

        return result;
    }

    /**
     * Get a Customer's access token.
     * @param  customerId  Required parameter: Customer Id
     * @param  tokenId  Required parameter: Token Id
     * @return    Returns the GetAccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAccessTokenResponse getAccessToken(
            final String customerId,
            final String tokenId) throws ApiException, IOException {
        HttpRequest request = buildGetAccessTokenRequest(customerId, tokenId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAccessTokenResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAccessToken.
     */
    private HttpRequest buildGetAccessTokenRequest(
            final String customerId,
            final String tokenId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/access-tokens/{token_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("token_id",
                new SimpleEntry<Object, Boolean>(tokenId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getAccessToken.
     * @return An object of type GetAccessTokenResponse
     */
    private GetAccessTokenResponse handleGetAccessTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAccessTokenResponse result = ApiHelper.deserialize(responseBody,
                GetAccessTokenResponse.class);

        return result;
    }

    /**
     * Updates the metadata a customer.
     * @param  customerId  Required parameter: The customer id
     * @param  request  Required parameter: Request for updating the customer metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse updateCustomerMetadata(
            final String customerId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateCustomerMetadataRequest(customerId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateCustomerMetadataResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateCustomerMetadata.
     */
    private HttpRequest buildUpdateCustomerMetadataRequest(
            final String customerId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/Customers/{customer_id}/metadata");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateCustomerMetadata.
     * @return An object of type GetCustomerResponse
     */
    private GetCustomerResponse handleUpdateCustomerMetadataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCustomerResponse result = ApiHelper.deserialize(responseBody,
                GetCustomerResponse.class);

        return result;
    }

    /**
     * Get a customer's card.
     * @param  customerId  Required parameter: Customer id
     * @param  cardId  Required parameter: Card id
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse getCard(
            final String customerId,
            final String cardId) throws ApiException, IOException {
        HttpRequest request = buildGetCardRequest(customerId, cardId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCardResponse(context);
    }

    /**
     * Builds the HttpRequest object for getCard.
     */
    private HttpRequest buildGetCardRequest(
            final String customerId,
            final String cardId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/cards/{card_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getCard.
     * @return An object of type GetCardResponse
     */
    private GetCardResponse handleGetCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCardResponse result = ApiHelper.deserialize(responseBody,
                GetCardResponse.class);

        return result;
    }

    /**
     * Delete a Customer's access tokens.
     * @param  customerId  Required parameter: Customer Id
     * @return    Returns the ListAccessTokensResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAccessTokensResponse deleteAccessTokens(
            final String customerId) throws ApiException, IOException {
        HttpRequest request = buildDeleteAccessTokensRequest(customerId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteAccessTokensResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteAccessTokens.
     */
    private HttpRequest buildDeleteAccessTokensRequest(
            final String customerId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/access-tokens/");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteAccessTokens.
     * @return An object of type ListAccessTokensResponse
     */
    private ListAccessTokensResponse handleDeleteAccessTokensResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListAccessTokensResponse result = ApiHelper.deserialize(responseBody,
                ListAccessTokensResponse.class);

        return result;
    }

    /**
     * Creates a access token for a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  request  Required parameter: Request for creating a access token
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAccessTokenResponse createAccessToken(
            final String customerId,
            final CreateAccessTokenRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateAccessTokenRequest(customerId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateAccessTokenResponse(context);
    }

    /**
     * Builds the HttpRequest object for createAccessToken.
     */
    private HttpRequest buildCreateAccessTokenRequest(
            final String customerId,
            final CreateAccessTokenRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/access-tokens");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createAccessToken.
     * @return An object of type GetAccessTokenResponse
     */
    private GetAccessTokenResponse handleCreateAccessTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAccessTokenResponse result = ApiHelper.deserialize(responseBody,
                GetAccessTokenResponse.class);

        return result;
    }

    /**
     * Get all access tokens from a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListAccessTokensResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAccessTokensResponse getAccessTokens(
            final String customerId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildGetAccessTokensRequest(customerId, page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAccessTokensResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAccessTokens.
     */
    private HttpRequest buildGetAccessTokensRequest(
            final String customerId,
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/access-tokens");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getAccessTokens.
     * @return An object of type ListAccessTokensResponse
     */
    private ListAccessTokensResponse handleGetAccessTokensResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListAccessTokensResponse result = ApiHelper.deserialize(responseBody,
                ListAccessTokensResponse.class);

        return result;
    }

    /**
     * Get all Customers.
     * @param  name  Optional parameter: Name of the Customer
     * @param  document  Optional parameter: Document of the Customer
     * @param  page  Optional parameter: Current page the the search
     * @param  size  Optional parameter: Quantity pages of the search
     * @param  email  Optional parameter: Customer's email
     * @param  code  Optional parameter: Customer's code
     * @return    Returns the ListCustomersResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListCustomersResponse getCustomers(
            final String name,
            final String document,
            final Integer page,
            final Integer size,
            final String email,
            final String code) throws ApiException, IOException {
        HttpRequest request = buildGetCustomersRequest(name, document, page, size, email, code);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCustomersResponse(context);
    }

    /**
     * Builds the HttpRequest object for getCustomers.
     */
    private HttpRequest buildGetCustomersRequest(
            final String name,
            final String document,
            final Integer page,
            final Integer size,
            final String email,
            final String code) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("document", document);
        queryParameters.put("page",
                (page != null) ? page : 1);
        queryParameters.put("size",
                (size != null) ? size : 10);
        queryParameters.put("email", email);
        queryParameters.put("Code", code);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getCustomers.
     * @return An object of type ListCustomersResponse
     */
    private ListCustomersResponse handleGetCustomersResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListCustomersResponse result = ApiHelper.deserialize(responseBody,
                ListCustomersResponse.class);

        return result;
    }

    /**
     * Updates a customer.
     * @param  customerId  Required parameter: Customer id
     * @param  request  Required parameter: Request for updating a customer
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse updateCustomer(
            final String customerId,
            final UpdateCustomerRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateCustomerRequest(customerId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateCustomerResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateCustomer.
     */
    private HttpRequest buildUpdateCustomerRequest(
            final String customerId,
            final UpdateCustomerRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().putBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateCustomer.
     * @return An object of type GetCustomerResponse
     */
    private GetCustomerResponse handleUpdateCustomerResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCustomerResponse result = ApiHelper.deserialize(responseBody,
                GetCustomerResponse.class);

        return result;
    }

    /**
     * Delete a customer's card.
     * @param  customerId  Required parameter: Customer Id
     * @param  cardId  Required parameter: Card Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse deleteCard(
            final String customerId,
            final String cardId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteCardRequest(customerId, cardId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteCardResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteCard.
     */
    private HttpRequest buildDeleteCardRequest(
            final String customerId,
            final String cardId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/cards/{card_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteCard.
     * @return An object of type GetCardResponse
     */
    private GetCardResponse handleDeleteCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCardResponse result = ApiHelper.deserialize(responseBody,
                GetCardResponse.class);

        return result;
    }

    /**
     * Gets all adressess from a customer.
     * @param  customerId  Required parameter: Customer id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListAddressesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAddressesResponse getAddresses(
            final String customerId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildGetAddressesRequest(customerId, page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAddressesResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAddresses.
     */
    private HttpRequest buildGetAddressesRequest(
            final String customerId,
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}/addresses");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getAddresses.
     * @return An object of type ListAddressesResponse
     */
    private ListAddressesResponse handleGetAddressesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListAddressesResponse result = ApiHelper.deserialize(responseBody,
                ListAddressesResponse.class);

        return result;
    }

    /**
     * Get a customer.
     * @param  customerId  Required parameter: Customer Id
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse getCustomer(
            final String customerId) throws ApiException, IOException {
        HttpRequest request = buildGetCustomerRequest(customerId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCustomerResponse(context);
    }

    /**
     * Builds the HttpRequest object for getCustomer.
     */
    private HttpRequest buildGetCustomerRequest(
            final String customerId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/customers/{customer_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("customer_id",
                new SimpleEntry<Object, Boolean>(customerId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getCustomer.
     * @return An object of type GetCustomerResponse
     */
    private GetCustomerResponse handleGetCustomerResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetCustomerResponse result = ApiHelper.deserialize(responseBody,
                GetCustomerResponse.class);

        return result;
    }

}