/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import me.pagar.api.ApiHelper;
import me.pagar.api.AuthManager;
import me.pagar.api.Configuration;
import me.pagar.api.DateTimeHelper;
import me.pagar.api.exceptions.ApiException;
import me.pagar.api.http.Headers;
import me.pagar.api.http.client.HttpClient;
import me.pagar.api.http.client.HttpContext;
import me.pagar.api.http.request.HttpRequest;
import me.pagar.api.http.response.HttpResponse;
import me.pagar.api.http.response.HttpStringResponse;
import me.pagar.api.models.CreateInvoiceRequest;
import me.pagar.api.models.GetInvoiceResponse;
import me.pagar.api.models.ListInvoicesResponse;
import me.pagar.api.models.UpdateInvoiceStatusRequest;
import me.pagar.api.models.UpdateMetadataRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultInvoicesController extends BaseController implements InvoicesController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DefaultInvoicesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Create an Invoice.
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  cycleId  Required parameter: Cycle Id
     * @param  request  Optional parameter: Example:
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetInvoiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetInvoiceResponse createInvoice(
            final String subscriptionId,
            final String cycleId,
            final CreateInvoiceRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateInvoiceRequest(subscriptionId, cycleId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateInvoiceResponse(context);
    }

    /**
     * Builds the HttpRequest object for createInvoice.
     */
    private HttpRequest buildCreateInvoiceRequest(
            final String subscriptionId,
            final String cycleId,
            final CreateInvoiceRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/cycles/{cycle_id}/pay");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("cycle_id",
                new SimpleEntry<Object, Boolean>(cycleId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createInvoice.
     * @return An object of type GetInvoiceResponse
     */
    private GetInvoiceResponse handleCreateInvoiceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetInvoiceResponse result = ApiHelper.deserialize(responseBody,
                GetInvoiceResponse.class);

        return result;
    }

    /**
     * Gets all invoices.
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  code  Optional parameter: Filter for Invoice's code
     * @param  customerId  Optional parameter: Filter for Invoice's customer id
     * @param  subscriptionId  Optional parameter: Filter for Invoice's subscription id
     * @param  createdSince  Optional parameter: Filter for Invoice's creation date start range
     * @param  createdUntil  Optional parameter: Filter for Invoices creation date end range
     * @param  status  Optional parameter: Filter for Invoice's status
     * @param  dueSince  Optional parameter: Filter for Invoice's due date start range
     * @param  dueUntil  Optional parameter: Filter for Invoice's due date end range
     * @param  customerDocument  Optional parameter: Example:
     * @return    Returns the ListInvoicesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListInvoicesResponse getInvoices(
            final Integer page,
            final Integer size,
            final String code,
            final String customerId,
            final String subscriptionId,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil,
            final String status,
            final LocalDateTime dueSince,
            final LocalDateTime dueUntil,
            final String customerDocument) throws ApiException, IOException {
        HttpRequest request = buildGetInvoicesRequest(page, size, code, customerId, subscriptionId,
                createdSince, createdUntil, status, dueSince, dueUntil, customerDocument);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetInvoicesResponse(context);
    }

    /**
     * Builds the HttpRequest object for getInvoices.
     */
    private HttpRequest buildGetInvoicesRequest(
            final Integer page,
            final Integer size,
            final String code,
            final String customerId,
            final String subscriptionId,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil,
            final String status,
            final LocalDateTime dueSince,
            final LocalDateTime dueUntil,
            final String customerDocument) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/invoices");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("code", code);
        queryParameters.put("customer_id", customerId);
        queryParameters.put("subscription_id", subscriptionId);
        queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));
        queryParameters.put("status", status);
        queryParameters.put("due_since", DateTimeHelper.toRfc8601DateTime(dueSince));
        queryParameters.put("due_until", DateTimeHelper.toRfc8601DateTime(dueUntil));
        queryParameters.put("customer_document", customerDocument);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getInvoices.
     * @return An object of type ListInvoicesResponse
     */
    private ListInvoicesResponse handleGetInvoicesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListInvoicesResponse result = ApiHelper.deserialize(responseBody,
                ListInvoicesResponse.class);

        return result;
    }

    /**
     * Cancels an invoice.
     * @param  invoiceId  Required parameter: Invoice id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetInvoiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetInvoiceResponse cancelInvoice(
            final String invoiceId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildCancelInvoiceRequest(invoiceId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCancelInvoiceResponse(context);
    }

    /**
     * Builds the HttpRequest object for cancelInvoice.
     */
    private HttpRequest buildCancelInvoiceRequest(
            final String invoiceId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/invoices/{invoice_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("invoice_id",
                new SimpleEntry<Object, Boolean>(invoiceId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for cancelInvoice.
     * @return An object of type GetInvoiceResponse
     */
    private GetInvoiceResponse handleCancelInvoiceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetInvoiceResponse result = ApiHelper.deserialize(responseBody,
                GetInvoiceResponse.class);

        return result;
    }

    /**
     * Updates the metadata from an invoice.
     * @param  invoiceId  Required parameter: The invoice id
     * @param  request  Required parameter: Request for updating the invoice metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetInvoiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetInvoiceResponse updateInvoiceMetadata(
            final String invoiceId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateInvoiceMetadataRequest(invoiceId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateInvoiceMetadataResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateInvoiceMetadata.
     */
    private HttpRequest buildUpdateInvoiceMetadataRequest(
            final String invoiceId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/invoices/{invoice_id}/metadata");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("invoice_id",
                new SimpleEntry<Object, Boolean>(invoiceId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateInvoiceMetadata.
     * @return An object of type GetInvoiceResponse
     */
    private GetInvoiceResponse handleUpdateInvoiceMetadataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetInvoiceResponse result = ApiHelper.deserialize(responseBody,
                GetInvoiceResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: Subscription Id
     * @return    Returns the GetInvoiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetInvoiceResponse getPartialInvoice(
            final String subscriptionId) throws ApiException, IOException {
        HttpRequest request = buildGetPartialInvoiceRequest(subscriptionId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetPartialInvoiceResponse(context);
    }

    /**
     * Builds the HttpRequest object for getPartialInvoice.
     */
    private HttpRequest buildGetPartialInvoiceRequest(
            final String subscriptionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/partial-invoice");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getPartialInvoice.
     * @return An object of type GetInvoiceResponse
     */
    private GetInvoiceResponse handleGetPartialInvoiceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetInvoiceResponse result = ApiHelper.deserialize(responseBody,
                GetInvoiceResponse.class);

        return result;
    }

    /**
     * Updates the status from an invoice.
     * @param  invoiceId  Required parameter: Invoice Id
     * @param  request  Required parameter: Request for updating an invoice's status
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetInvoiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetInvoiceResponse updateInvoiceStatus(
            final String invoiceId,
            final UpdateInvoiceStatusRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateInvoiceStatusRequest(invoiceId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateInvoiceStatusResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateInvoiceStatus.
     */
    private HttpRequest buildUpdateInvoiceStatusRequest(
            final String invoiceId,
            final UpdateInvoiceStatusRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/invoices/{invoice_id}/status");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("invoice_id",
                new SimpleEntry<Object, Boolean>(invoiceId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateInvoiceStatus.
     * @return An object of type GetInvoiceResponse
     */
    private GetInvoiceResponse handleUpdateInvoiceStatusResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetInvoiceResponse result = ApiHelper.deserialize(responseBody,
                GetInvoiceResponse.class);

        return result;
    }

    /**
     * Gets an invoice.
     * @param  invoiceId  Required parameter: Invoice Id
     * @return    Returns the GetInvoiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetInvoiceResponse getInvoice(
            final String invoiceId) throws ApiException, IOException {
        HttpRequest request = buildGetInvoiceRequest(invoiceId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetInvoiceResponse(context);
    }

    /**
     * Builds the HttpRequest object for getInvoice.
     */
    private HttpRequest buildGetInvoiceRequest(
            final String invoiceId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/invoices/{invoice_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("invoice_id",
                new SimpleEntry<Object, Boolean>(invoiceId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getInvoice.
     * @return An object of type GetInvoiceResponse
     */
    private GetInvoiceResponse handleGetInvoiceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetInvoiceResponse result = ApiHelper.deserialize(responseBody,
                GetInvoiceResponse.class);

        return result;
    }

}