/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import me.pagar.api.ApiHelper;
import me.pagar.api.AuthManager;
import me.pagar.api.Configuration;
import me.pagar.api.DateTimeHelper;
import me.pagar.api.exceptions.ApiException;
import me.pagar.api.http.Headers;
import me.pagar.api.http.client.HttpClient;
import me.pagar.api.http.client.HttpContext;
import me.pagar.api.http.request.HttpRequest;
import me.pagar.api.http.response.HttpResponse;
import me.pagar.api.http.response.HttpStringResponse;
import me.pagar.api.models.CreateAnticipationRequest;
import me.pagar.api.models.CreateRecipientRequest;
import me.pagar.api.models.CreateTransferRequest;
import me.pagar.api.models.CreateWithdrawRequest;
import me.pagar.api.models.GetAnticipationLimitResponse;
import me.pagar.api.models.GetAnticipationResponse;
import me.pagar.api.models.GetBalanceResponse;
import me.pagar.api.models.GetRecipientResponse;
import me.pagar.api.models.GetTransferResponse;
import me.pagar.api.models.GetWithdrawResponse;
import me.pagar.api.models.ListAnticipationResponse;
import me.pagar.api.models.ListRecipientResponse;
import me.pagar.api.models.ListTransferResponse;
import me.pagar.api.models.ListWithdrawals;
import me.pagar.api.models.UpdateAutomaticAnticipationSettingsRequest;
import me.pagar.api.models.UpdateMetadataRequest;
import me.pagar.api.models.UpdateRecipientBankAccountRequest;
import me.pagar.api.models.UpdateRecipientRequest;
import me.pagar.api.models.UpdateTransferSettingsRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultRecipientsController extends BaseController implements RecipientsController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DefaultRecipientsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Updates a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Recipient data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipient(
            final String recipientId,
            final UpdateRecipientRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateRecipientRequest(recipientId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateRecipientResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateRecipient.
     */
    private HttpRequest buildUpdateRecipientRequest(
            final String recipientId,
            final UpdateRecipientRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().putBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateRecipient.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleUpdateRecipientResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * Creates an anticipation.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Anticipation data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAnticipationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnticipationResponse createAnticipation(
            final String recipientId,
            final CreateAnticipationRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateAnticipationRequest(recipientId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateAnticipationResponse(context);
    }

    /**
     * Builds the HttpRequest object for createAnticipation.
     */
    private HttpRequest buildCreateAnticipationRequest(
            final String recipientId,
            final CreateAnticipationRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/anticipations");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createAnticipation.
     * @return An object of type GetAnticipationResponse
     */
    private GetAnticipationResponse handleCreateAnticipationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnticipationResponse result = ApiHelper.deserialize(responseBody,
                GetAnticipationResponse.class);

        return result;
    }

    /**
     * Gets the anticipation limits for a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  timeframe  Required parameter: Timeframe
     * @param  paymentDate  Required parameter: Anticipation payment date
     * @return    Returns the GetAnticipationLimitResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnticipationLimitResponse getAnticipationLimits(
            final String recipientId,
            final String timeframe,
            final LocalDateTime paymentDate) throws ApiException, IOException {
        HttpRequest request = buildGetAnticipationLimitsRequest(recipientId, timeframe,
                paymentDate);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnticipationLimitsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAnticipationLimits.
     */
    private HttpRequest buildGetAnticipationLimitsRequest(
            final String recipientId,
            final String timeframe,
            final LocalDateTime paymentDate) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/anticipation_limits");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("timeframe", timeframe);
        queryParameters.put("payment_date", DateTimeHelper.toRfc8601DateTime(paymentDate));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getAnticipationLimits.
     * @return An object of type GetAnticipationLimitResponse
     */
    private GetAnticipationLimitResponse handleGetAnticipationLimitsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnticipationLimitResponse result = ApiHelper.deserialize(responseBody,
                GetAnticipationLimitResponse.class);

        return result;
    }

    /**
     * Retrieves paginated recipients information.
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListRecipientResponse getRecipients(
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildGetRecipientsRequest(page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetRecipientsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getRecipients.
     */
    private HttpRequest buildGetRecipientsRequest(
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getRecipients.
     * @return An object of type ListRecipientResponse
     */
    private ListRecipientResponse handleGetRecipientsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListRecipientResponse result = ApiHelper.deserialize(responseBody,
                ListRecipientResponse.class);

        return result;
    }

    /**
     * Updates recipient metadata.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipientMetadata(
            final String recipientId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateRecipientMetadataRequest(recipientId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateRecipientMetadataResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateRecipientMetadata.
     */
    private HttpRequest buildUpdateRecipientMetadataRequest(
            final String recipientId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/metadata");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateRecipientMetadata.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleUpdateRecipientMetadataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * Gets a transfer.
     * @param  recipientId  Required parameter: Recipient id
     * @param  transferId  Required parameter: Transfer id
     * @return    Returns the GetTransferResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetTransferResponse getTransfer(
            final String recipientId,
            final String transferId) throws ApiException, IOException {
        HttpRequest request = buildGetTransferRequest(recipientId, transferId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTransferResponse(context);
    }

    /**
     * Builds the HttpRequest object for getTransfer.
     */
    private HttpRequest buildGetTransferRequest(
            final String recipientId,
            final String transferId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/transfers/{transfer_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        templateParameters.put("transfer_id",
                new SimpleEntry<Object, Boolean>(transferId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getTransfer.
     * @return An object of type GetTransferResponse
     */
    private GetTransferResponse handleGetTransferResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetTransferResponse result = ApiHelper.deserialize(responseBody,
                GetTransferResponse.class);

        return result;
    }

    /**
     * Gets an anticipation.
     * @param  recipientId  Required parameter: Recipient id
     * @param  anticipationId  Required parameter: Anticipation id
     * @return    Returns the GetAnticipationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnticipationResponse getAnticipation(
            final String recipientId,
            final String anticipationId) throws ApiException, IOException {
        HttpRequest request = buildGetAnticipationRequest(recipientId, anticipationId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnticipationResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAnticipation.
     */
    private HttpRequest buildGetAnticipationRequest(
            final String recipientId,
            final String anticipationId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/anticipations/{anticipation_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        templateParameters.put("anticipation_id",
                new SimpleEntry<Object, Boolean>(anticipationId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getAnticipation.
     * @return An object of type GetAnticipationResponse
     */
    private GetAnticipationResponse handleGetAnticipationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnticipationResponse result = ApiHelper.deserialize(responseBody,
                GetAnticipationResponse.class);

        return result;
    }

    /**
     * @param  recipientId  Required parameter: Recipient Identificator
     * @param  request  Required parameter: Example:
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipientTransferSettings(
            final String recipientId,
            final UpdateTransferSettingsRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateRecipientTransferSettingsRequest(recipientId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateRecipientTransferSettingsResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateRecipientTransferSettings.
     */
    private HttpRequest buildUpdateRecipientTransferSettingsRequest(
            final String recipientId,
            final UpdateTransferSettingsRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/transfer-settings");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateRecipientTransferSettings.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleUpdateRecipientTransferSettingsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * Retrieves a paginated list of anticipations from a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  status  Optional parameter: Filter for anticipation status
     * @param  timeframe  Optional parameter: Filter for anticipation timeframe
     * @param  paymentDateSince  Optional parameter: Filter for start range for anticipation payment
     *         date
     * @param  paymentDateUntil  Optional parameter: Filter for end range for anticipation payment
     *         date
     * @param  createdSince  Optional parameter: Filter for start range for anticipation creation
     *         date
     * @param  createdUntil  Optional parameter: Filter for end range for anticipation creation date
     * @return    Returns the ListAnticipationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAnticipationResponse getAnticipations(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final String timeframe,
            final LocalDateTime paymentDateSince,
            final LocalDateTime paymentDateUntil,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        HttpRequest request = buildGetAnticipationsRequest(recipientId, page, size, status,
                timeframe, paymentDateSince, paymentDateUntil, createdSince, createdUntil);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnticipationsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getAnticipations.
     */
    private HttpRequest buildGetAnticipationsRequest(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final String timeframe,
            final LocalDateTime paymentDateSince,
            final LocalDateTime paymentDateUntil,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/anticipations");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("status", status);
        queryParameters.put("timeframe", timeframe);
        queryParameters.put("payment_date_since", DateTimeHelper.toRfc8601DateTime(paymentDateSince));
        queryParameters.put("payment_date_until", DateTimeHelper.toRfc8601DateTime(paymentDateUntil));
        queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getAnticipations.
     * @return An object of type ListAnticipationResponse
     */
    private ListAnticipationResponse handleGetAnticipationsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListAnticipationResponse result = ApiHelper.deserialize(responseBody,
                ListAnticipationResponse.class);

        return result;
    }

    /**
     * Updates the default bank account from a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Bank account data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipientDefaultBankAccount(
            final String recipientId,
            final UpdateRecipientBankAccountRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateRecipientDefaultBankAccountRequest(recipientId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateRecipientDefaultBankAccountResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateRecipientDefaultBankAccount.
     */
    private HttpRequest buildUpdateRecipientDefaultBankAccountRequest(
            final String recipientId,
            final UpdateRecipientBankAccountRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/default-bank-account");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateRecipientDefaultBankAccount.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleUpdateRecipientDefaultBankAccountResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * @param  recipientId  Required parameter: Example:
     * @param  request  Required parameter: Example:
     * @return    Returns the GetWithdrawResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetWithdrawResponse createWithdraw(
            final String recipientId,
            final CreateWithdrawRequest request) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateWithdrawRequest(recipientId, request);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateWithdrawResponse(context);
    }

    /**
     * Builds the HttpRequest object for createWithdraw.
     */
    private HttpRequest buildCreateWithdrawRequest(
            final String recipientId,
            final CreateWithdrawRequest request) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/withdrawals");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createWithdraw.
     * @return An object of type GetWithdrawResponse
     */
    private GetWithdrawResponse handleCreateWithdrawResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetWithdrawResponse result = ApiHelper.deserialize(responseBody,
                GetWithdrawResponse.class);

        return result;
    }

    /**
     * Get balance information for a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @return    Returns the GetBalanceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetBalanceResponse getBalance(
            final String recipientId) throws ApiException, IOException {
        HttpRequest request = buildGetBalanceRequest(recipientId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetBalanceResponse(context);
    }

    /**
     * Builds the HttpRequest object for getBalance.
     */
    private HttpRequest buildGetBalanceRequest(
            final String recipientId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/balance");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getBalance.
     * @return An object of type GetBalanceResponse
     */
    private GetBalanceResponse handleGetBalanceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetBalanceResponse result = ApiHelper.deserialize(responseBody,
                GetBalanceResponse.class);

        return result;
    }

    /**
     * Creates a transfer for a recipient.
     * @param  recipientId  Required parameter: Recipient Id
     * @param  request  Required parameter: Transfer data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetTransferResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetTransferResponse createTransfer(
            final String recipientId,
            final CreateTransferRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateTransferRequest(recipientId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateTransferResponse(context);
    }

    /**
     * Builds the HttpRequest object for createTransfer.
     */
    private HttpRequest buildCreateTransferRequest(
            final String recipientId,
            final CreateTransferRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/transfers");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createTransfer.
     * @return An object of type GetTransferResponse
     */
    private GetTransferResponse handleCreateTransferResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetTransferResponse result = ApiHelper.deserialize(responseBody,
                GetTransferResponse.class);

        return result;
    }

    /**
     * Creates a new recipient.
     * @param  request  Required parameter: Recipient data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse createRecipient(
            final CreateRecipientRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateRecipientRequest(request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateRecipientResponse(context);
    }

    /**
     * Builds the HttpRequest object for createRecipient.
     */
    private HttpRequest buildCreateRecipientRequest(
            final CreateRecipientRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createRecipient.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleCreateRecipientResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * Updates recipient metadata.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateAutomaticAnticipationSettings(
            final String recipientId,
            final UpdateAutomaticAnticipationSettingsRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateAutomaticAnticipationSettingsRequest(recipientId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateAutomaticAnticipationSettingsResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateAutomaticAnticipationSettings.
     */
    private HttpRequest buildUpdateAutomaticAnticipationSettingsRequest(
            final String recipientId,
            final UpdateAutomaticAnticipationSettingsRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/automatic-anticipation-settings");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateAutomaticAnticipationSettings.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleUpdateAutomaticAnticipationSettingsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * Retrieves recipient information.
     * @param  recipientId  Required parameter: Recipiend id
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse getRecipient(
            final String recipientId) throws ApiException, IOException {
        HttpRequest request = buildGetRecipientRequest(recipientId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetRecipientResponse(context);
    }

    /**
     * Builds the HttpRequest object for getRecipient.
     */
    private HttpRequest buildGetRecipientRequest(
            final String recipientId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getRecipient.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleGetRecipientResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * Gets a paginated list of transfers for the recipient.
     * @param  recipientId  Required parameter: Example:
     * @param  page  Optional parameter: Example:
     * @param  size  Optional parameter: Example:
     * @param  status  Optional parameter: Example:
     * @param  createdSince  Optional parameter: Example:
     * @param  createdUntil  Optional parameter: Example:
     * @return    Returns the ListWithdrawals response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListWithdrawals getWithdrawals(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        HttpRequest request = buildGetWithdrawalsRequest(recipientId, page, size, status,
                createdSince, createdUntil);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetWithdrawalsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getWithdrawals.
     */
    private HttpRequest buildGetWithdrawalsRequest(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/withdrawals");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("status", status);
        queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getWithdrawals.
     * @return An object of type ListWithdrawals
     */
    private ListWithdrawals handleGetWithdrawalsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListWithdrawals result = ApiHelper.deserialize(responseBody,
                ListWithdrawals.class);

        return result;
    }

    /**
     * @param  recipientId  Required parameter: Example:
     * @param  withdrawalId  Required parameter: Example:
     * @return    Returns the GetWithdrawResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetWithdrawResponse getWithdrawById(
            final String recipientId,
            final String withdrawalId) throws ApiException, IOException {
        HttpRequest request = buildGetWithdrawByIdRequest(recipientId, withdrawalId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetWithdrawByIdResponse(context);
    }

    /**
     * Builds the HttpRequest object for getWithdrawById.
     */
    private HttpRequest buildGetWithdrawByIdRequest(
            final String recipientId,
            final String withdrawalId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/withdrawals/{withdrawal_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        templateParameters.put("withdrawal_id",
                new SimpleEntry<Object, Boolean>(withdrawalId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getWithdrawById.
     * @return An object of type GetWithdrawResponse
     */
    private GetWithdrawResponse handleGetWithdrawByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetWithdrawResponse result = ApiHelper.deserialize(responseBody,
                GetWithdrawResponse.class);

        return result;
    }

    /**
     * Gets a paginated list of transfers for the recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  status  Optional parameter: Filter for transfer status
     * @param  createdSince  Optional parameter: Filter for start range of transfer creation date
     * @param  createdUntil  Optional parameter: Filter for end range of transfer creation date
     * @return    Returns the ListTransferResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListTransferResponse getTransfers(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        HttpRequest request = buildGetTransfersRequest(recipientId, page, size, status,
                createdSince, createdUntil);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTransfersResponse(context);
    }

    /**
     * Builds the HttpRequest object for getTransfers.
     */
    private HttpRequest buildGetTransfersRequest(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{recipient_id}/transfers");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recipient_id",
                new SimpleEntry<Object, Boolean>(recipientId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("status", status);
        queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getTransfers.
     * @return An object of type ListTransferResponse
     */
    private ListTransferResponse handleGetTransfersResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListTransferResponse result = ApiHelper.deserialize(responseBody,
                ListTransferResponse.class);

        return result;
    }

    /**
     * Retrieves recipient information.
     * @param  code  Required parameter: Recipient code
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse getRecipientByCode(
            final String code) throws ApiException, IOException {
        HttpRequest request = buildGetRecipientByCodeRequest(code);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetRecipientByCodeResponse(context);
    }

    /**
     * Builds the HttpRequest object for getRecipientByCode.
     */
    private HttpRequest buildGetRecipientByCodeRequest(
            final String code) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/{code}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("code",
                new SimpleEntry<Object, Boolean>(code, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getRecipientByCode.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleGetRecipientByCodeResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

    /**
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse getDefaultRecipient() throws ApiException, IOException {
        HttpRequest request = buildGetDefaultRecipientRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetDefaultRecipientResponse(context);
    }

    /**
     * Builds the HttpRequest object for getDefaultRecipient.
     */
    private HttpRequest buildGetDefaultRecipientRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/recipients/default");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getDefaultRecipient.
     * @return An object of type GetRecipientResponse
     */
    private GetRecipientResponse handleGetDefaultRecipientResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetRecipientResponse result = ApiHelper.deserialize(responseBody,
                GetRecipientResponse.class);

        return result;
    }

}