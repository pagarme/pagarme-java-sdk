/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package me.pagar.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import me.pagar.api.ApiHelper;
import me.pagar.api.AuthManager;
import me.pagar.api.Configuration;
import me.pagar.api.DateTimeHelper;
import me.pagar.api.exceptions.ApiException;
import me.pagar.api.http.Headers;
import me.pagar.api.http.client.HttpClient;
import me.pagar.api.http.client.HttpContext;
import me.pagar.api.http.request.HttpRequest;
import me.pagar.api.http.response.HttpResponse;
import me.pagar.api.http.response.HttpStringResponse;
import me.pagar.api.models.CreateCancelSubscriptionRequest;
import me.pagar.api.models.CreateDiscountRequest;
import me.pagar.api.models.CreateIncrementRequest;
import me.pagar.api.models.CreateSubscriptionItemRequest;
import me.pagar.api.models.CreateSubscriptionRequest;
import me.pagar.api.models.CreateUsageRequest;
import me.pagar.api.models.GetDiscountResponse;
import me.pagar.api.models.GetIncrementResponse;
import me.pagar.api.models.GetPeriodResponse;
import me.pagar.api.models.GetSubscriptionItemResponse;
import me.pagar.api.models.GetSubscriptionResponse;
import me.pagar.api.models.GetUsageReportResponse;
import me.pagar.api.models.GetUsageResponse;
import me.pagar.api.models.ListCyclesResponse;
import me.pagar.api.models.ListDiscountsResponse;
import me.pagar.api.models.ListIncrementsResponse;
import me.pagar.api.models.ListSubscriptionItemsResponse;
import me.pagar.api.models.ListSubscriptionsResponse;
import me.pagar.api.models.ListUsagesResponse;
import me.pagar.api.models.UpdateCurrentCycleEndDateRequest;
import me.pagar.api.models.UpdateCurrentCycleStatusRequest;
import me.pagar.api.models.UpdateMetadataRequest;
import me.pagar.api.models.UpdateSubscriptionAffiliationIdRequest;
import me.pagar.api.models.UpdateSubscriptionBillingDateRequest;
import me.pagar.api.models.UpdateSubscriptionCardRequest;
import me.pagar.api.models.UpdateSubscriptionDueDaysRequest;
import me.pagar.api.models.UpdateSubscriptionItemRequest;
import me.pagar.api.models.UpdateSubscriptionMinimumPriceRequest;
import me.pagar.api.models.UpdateSubscriptionPaymentMethodRequest;
import me.pagar.api.models.UpdateSubscriptionSplitRequest;
import me.pagar.api.models.UpdateSubscriptionStartAtRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultSubscriptionsController extends BaseController implements SubscriptionsController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DefaultSubscriptionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  subscriptionId  Required parameter: Example:
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetPeriodResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetPeriodResponse renewSubscription(
            final String subscriptionId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildRenewSubscriptionRequest(subscriptionId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRenewSubscriptionResponse(context);
    }

    /**
     * Builds the HttpRequest object for renewSubscription.
     */
    private HttpRequest buildRenewSubscriptionRequest(
            final String subscriptionId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/cycles");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for renewSubscription.
     * @return An object of type GetPeriodResponse
     */
    private GetPeriodResponse handleRenewSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetPeriodResponse result = ApiHelper.deserialize(responseBody,
                GetPeriodResponse.class);

        return result;
    }

    /**
     * Deletes a discount.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  discountId  Required parameter: Discount Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetDiscountResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetDiscountResponse deleteDiscount(
            final String subscriptionId,
            final String discountId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteDiscountRequest(subscriptionId, discountId,
                idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteDiscountResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteDiscount.
     */
    private HttpRequest buildDeleteDiscountRequest(
            final String subscriptionId,
            final String discountId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/discounts/{discount_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("discount_id",
                new SimpleEntry<Object, Boolean>(discountId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteDiscount.
     * @return An object of type GetDiscountResponse
     */
    private GetDiscountResponse handleDeleteDiscountResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetDiscountResponse result = ApiHelper.deserialize(responseBody,
                GetDiscountResponse.class);

        return result;
    }

    /**
     * Gets all subscriptions.
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  code  Optional parameter: Filter for subscription's code
     * @param  billingType  Optional parameter: Filter for subscription's billing type
     * @param  customerId  Optional parameter: Filter for subscription's customer id
     * @param  planId  Optional parameter: Filter for subscription's plan id
     * @param  cardId  Optional parameter: Filter for subscription's card id
     * @param  status  Optional parameter: Filter for subscription's status
     * @param  nextBillingSince  Optional parameter: Filter for subscription's next billing date
     *         start range
     * @param  nextBillingUntil  Optional parameter: Filter for subscription's next billing date end
     *         range
     * @param  createdSince  Optional parameter: Filter for subscription's creation date start range
     * @param  createdUntil  Optional parameter: Filter for subscriptions creation date end range
     * @return    Returns the ListSubscriptionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListSubscriptionsResponse getSubscriptions(
            final Integer page,
            final Integer size,
            final String code,
            final String billingType,
            final String customerId,
            final String planId,
            final String cardId,
            final String status,
            final LocalDateTime nextBillingSince,
            final LocalDateTime nextBillingUntil,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        HttpRequest request = buildGetSubscriptionsRequest(page, size, code, billingType,
                customerId, planId, cardId, status, nextBillingSince, nextBillingUntil,
                createdSince, createdUntil);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSubscriptionsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getSubscriptions.
     */
    private HttpRequest buildGetSubscriptionsRequest(
            final Integer page,
            final Integer size,
            final String code,
            final String billingType,
            final String customerId,
            final String planId,
            final String cardId,
            final String status,
            final LocalDateTime nextBillingSince,
            final LocalDateTime nextBillingUntil,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("code", code);
        queryParameters.put("billing_type", billingType);
        queryParameters.put("customer_id", customerId);
        queryParameters.put("plan_id", planId);
        queryParameters.put("card_id", cardId);
        queryParameters.put("status", status);
        queryParameters.put("next_billing_since", DateTimeHelper.toRfc8601DateTime(nextBillingSince));
        queryParameters.put("next_billing_until", DateTimeHelper.toRfc8601DateTime(nextBillingUntil));
        queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getSubscriptions.
     * @return An object of type ListSubscriptionsResponse
     */
    private ListSubscriptionsResponse handleGetSubscriptionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListSubscriptionsResponse result = ApiHelper.deserialize(responseBody,
                ListSubscriptionsResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  discountId  Required parameter: Example:
     * @return    Returns the GetDiscountResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetDiscountResponse getDiscountById(
            final String subscriptionId,
            final String discountId) throws ApiException, IOException {
        HttpRequest request = buildGetDiscountByIdRequest(subscriptionId, discountId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetDiscountByIdResponse(context);
    }

    /**
     * Builds the HttpRequest object for getDiscountById.
     */
    private HttpRequest buildGetDiscountByIdRequest(
            final String subscriptionId,
            final String discountId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/discounts/{discountId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("discountId",
                new SimpleEntry<Object, Boolean>(discountId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getDiscountById.
     * @return An object of type GetDiscountResponse
     */
    private GetDiscountResponse handleGetDiscountByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetDiscountResponse result = ApiHelper.deserialize(responseBody,
                GetDiscountResponse.class);

        return result;
    }

    /**
     * Creates a new subscription.
     * @param  body  Required parameter: Request for creating a subscription
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse createSubscription(
            final CreateSubscriptionRequest body,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildCreateSubscriptionRequest(body, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateSubscriptionResponse(context);
    }

    /**
     * Builds the HttpRequest object for createSubscription.
     */
    private HttpRequest buildCreateSubscriptionRequest(
            final CreateSubscriptionRequest body,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createSubscription.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleCreateSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: The subscription Id
     * @param  incrementId  Required parameter: The increment Id
     * @return    Returns the GetIncrementResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetIncrementResponse getIncrementById(
            final String subscriptionId,
            final String incrementId) throws ApiException, IOException {
        HttpRequest request = buildGetIncrementByIdRequest(subscriptionId, incrementId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetIncrementByIdResponse(context);
    }

    /**
     * Builds the HttpRequest object for getIncrementById.
     */
    private HttpRequest buildGetIncrementByIdRequest(
            final String subscriptionId,
            final String incrementId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/increments/{increment_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("increment_id",
                new SimpleEntry<Object, Boolean>(incrementId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getIncrementById.
     * @return An object of type GetIncrementResponse
     */
    private GetIncrementResponse handleGetIncrementByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetIncrementResponse result = ApiHelper.deserialize(responseBody,
                GetIncrementResponse.class);

        return result;
    }

    /**
     * Updates the metadata from a subscription.
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  request  Required parameter: Request for updating the subscrption metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionMetadata(
            final String subscriptionId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionMetadataRequest(subscriptionId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionMetadataResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionMetadata.
     */
    private HttpRequest buildUpdateSubscriptionMetadataRequest(
            final String subscriptionId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/Subscriptions/{subscription_id}/metadata");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionMetadata.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionMetadataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * Deletes a increment.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  incrementId  Required parameter: Increment id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetIncrementResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetIncrementResponse deleteIncrement(
            final String subscriptionId,
            final String incrementId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteIncrementRequest(subscriptionId, incrementId,
                idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteIncrementResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteIncrement.
     */
    private HttpRequest buildDeleteIncrementRequest(
            final String subscriptionId,
            final String incrementId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/increments/{increment_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("increment_id",
                new SimpleEntry<Object, Boolean>(incrementId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteIncrement.
     * @return An object of type GetIncrementResponse
     */
    private GetIncrementResponse handleDeleteIncrementResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetIncrementResponse result = ApiHelper.deserialize(responseBody,
                GetIncrementResponse.class);

        return result;
    }

    /**
     * Gets a subscription.
     * @param  subscriptionId  Required parameter: Subscription id
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse getSubscription(
            final String subscriptionId) throws ApiException, IOException {
        HttpRequest request = buildGetSubscriptionRequest(subscriptionId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSubscriptionResponse(context);
    }

    /**
     * Builds the HttpRequest object for getSubscription.
     */
    private HttpRequest buildGetSubscriptionRequest(
            final String subscriptionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getSubscription.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleGetSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: Example:
     * @param  request  Required parameter: Request for updating the end date of the current
     *         signature cycle
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateLatestPeriodEndAt(
            final String subscriptionId,
            final UpdateCurrentCycleEndDateRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateLatestPeriodEndAtRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateLatestPeriodEndAtResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateLatestPeriodEndAt.
     */
    private HttpRequest buildUpdateLatestPeriodEndAtRequest(
            final String subscriptionId,
            final UpdateCurrentCycleEndDateRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/periods/latest/end-at");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateLatestPeriodEndAt.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateLatestPeriodEndAtResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  request  Required parameter: Request for updating the end date of the subscription
     *         current status
     * @param  idempotencyKey  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateCurrentCycleStatus(
            final String subscriptionId,
            final UpdateCurrentCycleStatusRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateCurrentCycleStatusRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        handleUpdateCurrentCycleStatusResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateCurrentCycleStatus.
     */
    private HttpRequest buildUpdateCurrentCycleStatusRequest(
            final String subscriptionId,
            final UpdateCurrentCycleStatusRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/cycle-status");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateCurrentCycleStatus.
     * @return An object of type void
     */
    private Void handleUpdateCurrentCycleStatusResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Get Subscription Items.
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  name  Optional parameter: The item name
     * @param  code  Optional parameter: Identification code in the client system
     * @param  status  Optional parameter: The item statis
     * @param  description  Optional parameter: The item description
     * @param  createdSince  Optional parameter: Filter for item's creation date start range
     * @param  createdUntil  Optional parameter: Filter for item's creation date end range
     * @return    Returns the ListSubscriptionItemsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListSubscriptionItemsResponse getSubscriptionItems(
            final String subscriptionId,
            final Integer page,
            final Integer size,
            final String name,
            final String code,
            final String status,
            final String description,
            final String createdSince,
            final String createdUntil) throws ApiException, IOException {
        HttpRequest request = buildGetSubscriptionItemsRequest(subscriptionId, page, size, name,
                code, status, description, createdSince, createdUntil);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSubscriptionItemsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionItems.
     */
    private HttpRequest buildGetSubscriptionItemsRequest(
            final String subscriptionId,
            final Integer page,
            final Integer size,
            final String name,
            final String code,
            final String status,
            final String description,
            final String createdSince,
            final String createdUntil) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("name", name);
        queryParameters.put("code", code);
        queryParameters.put("status", status);
        queryParameters.put("description", description);
        queryParameters.put("created_since", createdSince);
        queryParameters.put("created_until", createdUntil);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getSubscriptionItems.
     * @return An object of type ListSubscriptionItemsResponse
     */
    private ListSubscriptionItemsResponse handleGetSubscriptionItemsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListSubscriptionItemsResponse result = ApiHelper.deserialize(responseBody,
                ListSubscriptionItemsResponse.class);

        return result;
    }

    /**
     * Get Subscription Item.
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  itemId  Required parameter: Item id
     * @return    Returns the GetSubscriptionItemResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionItemResponse getSubscriptionItem(
            final String subscriptionId,
            final String itemId) throws ApiException, IOException {
        HttpRequest request = buildGetSubscriptionItemRequest(subscriptionId, itemId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSubscriptionItemResponse(context);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionItem.
     */
    private HttpRequest buildGetSubscriptionItemRequest(
            final String subscriptionId,
            final String itemId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{item_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("item_id",
                new SimpleEntry<Object, Boolean>(itemId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getSubscriptionItem.
     * @return An object of type GetSubscriptionItemResponse
     */
    private GetSubscriptionItemResponse handleGetSubscriptionItemResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionItemResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionItemResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: Example:
     * @param  request  Required parameter: Request for updating a subscription affiliation id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionAffiliationId(
            final String subscriptionId,
            final UpdateSubscriptionAffiliationIdRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionAffiliationIdRequest(subscriptionId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionAffiliationIdResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionAffiliationId.
     */
    private HttpRequest buildUpdateSubscriptionAffiliationIdRequest(
            final String subscriptionId,
            final UpdateSubscriptionAffiliationIdRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/gateway-affiliation-id");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionAffiliationId.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionAffiliationIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  page  Required parameter: Page number
     * @param  size  Required parameter: Page size
     * @return    Returns the ListDiscountsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListDiscountsResponse getDiscounts(
            final String subscriptionId,
            final int page,
            final int size) throws ApiException, IOException {
        HttpRequest request = buildGetDiscountsRequest(subscriptionId, page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetDiscountsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getDiscounts.
     */
    private HttpRequest buildGetDiscountsRequest(
            final String subscriptionId,
            final int page,
            final int size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/discounts/");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getDiscounts.
     * @return An object of type ListDiscountsResponse
     */
    private ListDiscountsResponse handleGetDiscountsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListDiscountsResponse result = ApiHelper.deserialize(responseBody,
                ListDiscountsResponse.class);

        return result;
    }

    /**
     * Updates a subscription item.
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  itemId  Required parameter: Item id
     * @param  body  Required parameter: Request for updating a subscription item
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionItemResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionItemResponse updateSubscriptionItem(
            final String subscriptionId,
            final String itemId,
            final UpdateSubscriptionItemRequest body,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildUpdateSubscriptionItemRequest(subscriptionId, itemId, body,
                idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateSubscriptionItemResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionItem.
     */
    private HttpRequest buildUpdateSubscriptionItemRequest(
            final String subscriptionId,
            final String itemId,
            final UpdateSubscriptionItemRequest body,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{item_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("item_id",
                new SimpleEntry<Object, Boolean>(itemId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for updateSubscriptionItem.
     * @return An object of type GetSubscriptionItemResponse
     */
    private GetSubscriptionItemResponse handleUpdateSubscriptionItemResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionItemResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionItemResponse.class);

        return result;
    }

    /**
     * Creates a new Subscription item.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  request  Required parameter: Request for creating a subscription item
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionItemResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionItemResponse createSubscriptionItem(
            final String subscriptionId,
            final CreateSubscriptionItemRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateSubscriptionItemRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateSubscriptionItemResponse(context);
    }

    /**
     * Builds the HttpRequest object for createSubscriptionItem.
     */
    private HttpRequest buildCreateSubscriptionItemRequest(
            final String subscriptionId,
            final CreateSubscriptionItemRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createSubscriptionItem.
     * @return An object of type GetSubscriptionItemResponse
     */
    private GetSubscriptionItemResponse handleCreateSubscriptionItemResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionItemResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionItemResponse.class);

        return result;
    }

    /**
     * Lists all usages from a subscription item.
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  itemId  Required parameter: The subscription item id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  code  Optional parameter: Identification code in the client system
     * @param  group  Optional parameter: Identification group in the client system
     * @param  usedSince  Optional parameter: Example:
     * @param  usedUntil  Optional parameter: Example:
     * @return    Returns the ListUsagesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListUsagesResponse getUsages(
            final String subscriptionId,
            final String itemId,
            final Integer page,
            final Integer size,
            final String code,
            final String group,
            final LocalDateTime usedSince,
            final LocalDateTime usedUntil) throws ApiException, IOException {
        HttpRequest request = buildGetUsagesRequest(subscriptionId, itemId, page, size, code, group,
                usedSince, usedUntil);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetUsagesResponse(context);
    }

    /**
     * Builds the HttpRequest object for getUsages.
     */
    private HttpRequest buildGetUsagesRequest(
            final String subscriptionId,
            final String itemId,
            final Integer page,
            final Integer size,
            final String code,
            final String group,
            final LocalDateTime usedSince,
            final LocalDateTime usedUntil) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{item_id}/usages");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("item_id",
                new SimpleEntry<Object, Boolean>(itemId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);
        queryParameters.put("code", code);
        queryParameters.put("group", group);
        queryParameters.put("used_since", DateTimeHelper.toRfc8601DateTime(usedSince));
        queryParameters.put("used_until", DateTimeHelper.toRfc8601DateTime(usedUntil));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getUsages.
     * @return An object of type ListUsagesResponse
     */
    private ListUsagesResponse handleGetUsagesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListUsagesResponse result = ApiHelper.deserialize(responseBody,
                ListUsagesResponse.class);

        return result;
    }

    /**
     * Atualização do valor mínimo da assinatura.
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  request  Required parameter: Request da requisição com o valor mínimo que será
     *         configurado
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionMiniumPrice(
            final String subscriptionId,
            final UpdateSubscriptionMinimumPriceRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionMiniumPriceRequest(subscriptionId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionMiniumPriceResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionMiniumPrice.
     */
    private HttpRequest buildUpdateSubscriptionMiniumPriceRequest(
            final String subscriptionId,
            final UpdateSubscriptionMinimumPriceRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/minimum_price");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionMiniumPrice.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionMiniumPriceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  cycleId  Required parameter: Example:
     * @return    Returns the GetPeriodResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetPeriodResponse getSubscriptionCycleById(
            final String subscriptionId,
            final String cycleId) throws ApiException, IOException {
        HttpRequest request = buildGetSubscriptionCycleByIdRequest(subscriptionId, cycleId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSubscriptionCycleByIdResponse(context);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionCycleById.
     */
    private HttpRequest buildGetSubscriptionCycleByIdRequest(
            final String subscriptionId,
            final String cycleId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/cycles/{cycleId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("cycleId",
                new SimpleEntry<Object, Boolean>(cycleId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getSubscriptionCycleById.
     * @return An object of type GetPeriodResponse
     */
    private GetPeriodResponse handleGetSubscriptionCycleByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetPeriodResponse result = ApiHelper.deserialize(responseBody,
                GetPeriodResponse.class);

        return result;
    }

    /**
     * Create Usage.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  itemId  Required parameter: Item id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetUsageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetUsageResponse createAnUsage(
            final String subscriptionId,
            final String itemId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildCreateAnUsageRequest(subscriptionId, itemId, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateAnUsageResponse(context);
    }

    /**
     * Builds the HttpRequest object for createAnUsage.
     */
    private HttpRequest buildCreateAnUsageRequest(
            final String subscriptionId,
            final String itemId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{item_id}/usages");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("item_id",
                new SimpleEntry<Object, Boolean>(itemId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for createAnUsage.
     * @return An object of type GetUsageResponse
     */
    private GetUsageResponse handleCreateAnUsageResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetUsageResponse result = ApiHelper.deserialize(responseBody,
                GetUsageResponse.class);

        return result;
    }

    /**
     * Cancels a subscription.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  request  Optional parameter: Request for cancelling a subscription
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse cancelSubscription(
            final String subscriptionId,
            final CreateCancelSubscriptionRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCancelSubscriptionRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCancelSubscriptionResponse(context);
    }

    /**
     * Builds the HttpRequest object for cancelSubscription.
     */
    private HttpRequest buildCancelSubscriptionRequest(
            final String subscriptionId,
            final CreateCancelSubscriptionRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().deleteBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for cancelSubscription.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleCancelSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * Deletes a subscription item.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  subscriptionItemId  Required parameter: Subscription item id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionItemResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionItemResponse deleteSubscriptionItem(
            final String subscriptionId,
            final String subscriptionItemId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteSubscriptionItemRequest(subscriptionId, subscriptionItemId,
                idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteSubscriptionItemResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteSubscriptionItem.
     */
    private HttpRequest buildDeleteSubscriptionItemRequest(
            final String subscriptionId,
            final String subscriptionItemId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{subscription_item_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("subscription_item_id",
                new SimpleEntry<Object, Boolean>(subscriptionItemId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteSubscriptionItem.
     * @return An object of type GetSubscriptionItemResponse
     */
    private GetSubscriptionItemResponse handleDeleteSubscriptionItemResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionItemResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionItemResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListIncrementsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListIncrementsResponse getIncrements(
            final String subscriptionId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildGetIncrementsRequest(subscriptionId, page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetIncrementsResponse(context);
    }

    /**
     * Builds the HttpRequest object for getIncrements.
     */
    private HttpRequest buildGetIncrementsRequest(
            final String subscriptionId,
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/increments/");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getIncrements.
     * @return An object of type ListIncrementsResponse
     */
    private ListIncrementsResponse handleGetIncrementsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListIncrementsResponse result = ApiHelper.deserialize(responseBody,
                ListIncrementsResponse.class);

        return result;
    }

    /**
     * Updates the boleto due days from a subscription.
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  request  Required parameter: Example:
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionDueDays(
            final String subscriptionId,
            final UpdateSubscriptionDueDaysRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionDueDaysRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionDueDaysResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionDueDays.
     */
    private HttpRequest buildUpdateSubscriptionDueDaysRequest(
            final String subscriptionId,
            final UpdateSubscriptionDueDaysRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/boleto-due-days");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionDueDays.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionDueDaysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * Updates the credit card from a subscription.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  request  Required parameter: Request for updating a card
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionCard(
            final String subscriptionId,
            final UpdateSubscriptionCardRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionCardRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionCardResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionCard.
     */
    private HttpRequest buildUpdateSubscriptionCardRequest(
            final String subscriptionId,
            final UpdateSubscriptionCardRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/card");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionCard.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * Deletes a usage.
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  itemId  Required parameter: The subscription item id
     * @param  usageId  Required parameter: The usage id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetUsageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetUsageResponse deleteUsage(
            final String subscriptionId,
            final String itemId,
            final String usageId,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildDeleteUsageRequest(subscriptionId, itemId, usageId,
                idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteUsageResponse(context);
    }

    /**
     * Builds the HttpRequest object for deleteUsage.
     */
    private HttpRequest buildDeleteUsageRequest(
            final String subscriptionId,
            final String itemId,
            final String usageId,
            final String idempotencyKey) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{item_id}/usages/{usage_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("item_id",
                new SimpleEntry<Object, Boolean>(itemId, true));
        templateParameters.put("usage_id",
                new SimpleEntry<Object, Boolean>(usageId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteUsage.
     * @return An object of type GetUsageResponse
     */
    private GetUsageResponse handleDeleteUsageResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetUsageResponse result = ApiHelper.deserialize(responseBody,
                GetUsageResponse.class);

        return result;
    }

    /**
     * Creates a discount.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  request  Required parameter: Request for creating a discount
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetDiscountResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetDiscountResponse createDiscount(
            final String subscriptionId,
            final CreateDiscountRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateDiscountRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateDiscountResponse(context);
    }

    /**
     * Builds the HttpRequest object for createDiscount.
     */
    private HttpRequest buildCreateDiscountRequest(
            final String subscriptionId,
            final CreateDiscountRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/discounts");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createDiscount.
     * @return An object of type GetDiscountResponse
     */
    private GetDiscountResponse handleCreateDiscountResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetDiscountResponse result = ApiHelper.deserialize(responseBody,
                GetDiscountResponse.class);

        return result;
    }

    /**
     * Updates the payment method from a subscription.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  request  Required parameter: Request for updating the paymentmethod from a
     *         subscription
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionPaymentMethod(
            final String subscriptionId,
            final UpdateSubscriptionPaymentMethodRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionPaymentMethodRequest(subscriptionId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionPaymentMethodResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionPaymentMethod.
     */
    private HttpRequest buildUpdateSubscriptionPaymentMethodRequest(
            final String subscriptionId,
            final UpdateSubscriptionPaymentMethodRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/payment-method");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionPaymentMethod.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionPaymentMethodResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * Creates a increment.
     * @param  subscriptionId  Required parameter: Subscription id
     * @param  request  Required parameter: Request for creating a increment
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetIncrementResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetIncrementResponse createIncrement(
            final String subscriptionId,
            final CreateIncrementRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildCreateIncrementRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleCreateIncrementResponse(context);
    }

    /**
     * Builds the HttpRequest object for createIncrement.
     */
    private HttpRequest buildCreateIncrementRequest(
            final String subscriptionId,
            final CreateIncrementRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/increments");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().postBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for createIncrement.
     * @return An object of type GetIncrementResponse
     */
    private GetIncrementResponse handleCreateIncrementResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetIncrementResponse result = ApiHelper.deserialize(responseBody,
                GetIncrementResponse.class);

        return result;
    }

    /**
     * Creates a usage.
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  itemId  Required parameter: Item id
     * @param  body  Required parameter: Request for creating a usage
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetUsageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetUsageResponse createUsage(
            final String subscriptionId,
            final String itemId,
            final CreateUsageRequest body,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest request = buildCreateUsageRequest(subscriptionId, itemId, body, idempotencyKey);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateUsageResponse(context);
    }

    /**
     * Builds the HttpRequest object for createUsage.
     */
    private HttpRequest buildCreateUsageRequest(
            final String subscriptionId,
            final String itemId,
            final CreateUsageRequest body,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/items/{item_id}/usages");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("item_id",
                new SimpleEntry<Object, Boolean>(itemId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createUsage.
     * @return An object of type GetUsageResponse
     */
    private GetUsageResponse handleCreateUsageResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetUsageResponse result = ApiHelper.deserialize(responseBody,
                GetUsageResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: Subscription Id
     * @param  page  Required parameter: Page number
     * @param  size  Required parameter: Page size
     * @return    Returns the ListCyclesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListCyclesResponse getSubscriptionCycles(
            final String subscriptionId,
            final String page,
            final String size) throws ApiException, IOException {
        HttpRequest request = buildGetSubscriptionCyclesRequest(subscriptionId, page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSubscriptionCyclesResponse(context);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionCycles.
     */
    private HttpRequest buildGetSubscriptionCyclesRequest(
            final String subscriptionId,
            final String page,
            final String size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/cycles");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getSubscriptionCycles.
     * @return An object of type ListCyclesResponse
     */
    private ListCyclesResponse handleGetSubscriptionCyclesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ListCyclesResponse result = ApiHelper.deserialize(responseBody,
                ListCyclesResponse.class);

        return result;
    }

    /**
     * Updates the billing date from a subscription.
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  request  Required parameter: Request for updating the subscription billing date
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionBillingDate(
            final String subscriptionId,
            final UpdateSubscriptionBillingDateRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionBillingDateRequest(subscriptionId,
                request, idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionBillingDateResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionBillingDate.
     */
    private HttpRequest buildUpdateSubscriptionBillingDateRequest(
            final String subscriptionId,
            final UpdateSubscriptionBillingDateRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/billing-date");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionBillingDate.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionBillingDateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * Updates the start at date from a subscription.
     * @param  subscriptionId  Required parameter: The subscription id
     * @param  request  Required parameter: Request for updating the subscription start date
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSubscriptionStartAt(
            final String subscriptionId,
            final UpdateSubscriptionStartAtRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSubscriptionStartAtRequest(subscriptionId, request,
                idempotencyKey);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSubscriptionStartAtResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionStartAt.
     */
    private HttpRequest buildUpdateSubscriptionStartAtRequest(
            final String subscriptionId,
            final UpdateSubscriptionStartAtRequest request,
            final String idempotencyKey) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/start-at");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("idempotency-key", idempotencyKey);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSubscriptionStartAt.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSubscriptionStartAtResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

    /**
     * @param  subscriptionId  Required parameter: The subscription Id
     * @param  periodId  Required parameter: The period Id
     * @return    Returns the GetUsageReportResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetUsageReportResponse getUsageReport(
            final String subscriptionId,
            final String periodId) throws ApiException, IOException {
        HttpRequest request = buildGetUsageReportRequest(subscriptionId, periodId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetUsageReportResponse(context);
    }

    /**
     * Builds the HttpRequest object for getUsageReport.
     */
    private HttpRequest buildGetUsageReportRequest(
            final String subscriptionId,
            final String periodId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{subscription_id}/periods/{period_id}/usages/report");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscription_id",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        templateParameters.put("period_id",
                new SimpleEntry<Object, Boolean>(periodId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getUsageReport.
     * @return An object of type GetUsageReportResponse
     */
    private GetUsageReportResponse handleGetUsageReportResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetUsageReportResponse result = ApiHelper.deserialize(responseBody,
                GetUsageReportResponse.class);

        return result;
    }

    /**
     * @param  id  Required parameter: Subscription's id
     * @param  request  Required parameter: Example:
     * @return    Returns the GetSubscriptionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetSubscriptionResponse updateSplitSubscription(
            final String id,
            final UpdateSubscriptionSplitRequest request) throws ApiException, IOException {
        HttpRequest internalRequest = buildUpdateSplitSubscriptionRequest(id, request);
        authManagers.get("global").apply(internalRequest);

        HttpResponse response = getClientInstance().execute(internalRequest, false);
        HttpContext context = new HttpContext(internalRequest, response);

        return handleUpdateSplitSubscriptionResponse(context);
    }

    /**
     * Builds the HttpRequest object for updateSplitSubscription.
     */
    private HttpRequest buildUpdateSplitSubscriptionRequest(
            final String id,
            final UpdateSubscriptionSplitRequest request) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/subscriptions/{id}/split");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("id",
                new SimpleEntry<Object, Boolean>(id, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(request);
        HttpRequest internalRequest = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        return internalRequest;
    }

    /**
     * Processes the response for updateSplitSubscription.
     * @return An object of type GetSubscriptionResponse
     */
    private GetSubscriptionResponse handleUpdateSplitSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetSubscriptionResponse result = ApiHelper.deserialize(responseBody,
                GetSubscriptionResponse.class);

        return result;
    }

}